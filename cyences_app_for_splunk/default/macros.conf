# ================================== #
# Internal Macros #
# Do not update these macros #
# ================================== #
[cs_cyences_index]
definition = index=cyences
iseval = 0

[cs_monthly_alerts]
definition = ("Windows - Hosts Missing Update")
iseval = 0

[cs_filter_savedsearches(1)]
args = name
definition = regex savedsearch_name="($name$)\s" | rex field=savedsearch_name "^.*\-\s(?<Name>.*)$"
iseval = 0


# For Notable Event Editor Related
[cs_add_notable_event_editor_fields]
definition = join notable_event_id type=left [| inputlookup cyences_notable_event | dedup notable_event_id sortby -update_time | rename assignee as notable_event_assignee, status as notable_event_status | table notable_event_id, notable_event_assignee, notable_event_status]\
| fillnull notable_event_assignee value="Unassigned"\
| fillnull notable_event_status value="Unassigned"\
| eval notable_event_assignee=if(isnotnull(notable_event_id) AND notable_event_id!="", notable_event_assignee, "BANANABANANA")\
| eval notable_event_status=if(isnotnull(notable_event_id) AND notable_event_id!="", notable_event_status, "BANANABANANA")\
| eval notable_event_selector=if(isnotnull(notable_event_id) AND notable_event_id!="", notable_event_id, "BANANABANANA")\
| eval notable_event_edit=if(isnotnull(notable_event_id) AND notable_event_id!="", "-", "BANANABANANA")\
| eval notable_event_quick_assign_to_me=if(isnotnull(notable_event_id) AND notable_event_id!="", "-", "BANANABANANA")


# Time
[cs_human_readable_time_format(1)]
args = field
definition = eval "$field$" = strftime('$field$', "%F %T %Z")
iseval = 0

[cs_human_readable_time_format(2)]
args = oldfield, newfield
definition = eval "$newfield$" = strftime('$oldfield$', "%F %T %Z") | fields - "$oldfield$"
iseval = 0

[cs_windows_cert_time_format(1)]
args = fieldname
definition = eval "$fieldname$" = coalesce(strptime('$fieldname$', "%d-%m-%Y %H:%M:%S"), strptime('$fieldname$', "%m/%d/%Y %l:%M:%S %p"))
iseval = 0

[cs_local_time_conversion]
args = fieldname, timeformat
definition = eval "$fieldname$" = strftime(strptime('$fieldname$', "$timeformat$"), "%F %T %Z")
iseval = 0

# For time-based filteration
[cs_generate_time_fields_for_filter]
definition = eval firstTime_ptime=strptime(firstTime, "%F %T %Z"), firstTime_wday=strftime(firstTime_ptime, "%A"), firstTime_date=tonumber(strftime(firstTime_ptime, "%e")), firstTime_hour=tonumber(strftime(firstTime_ptime, "%H")), firstTime_minute=tonumber(strftime(tmp, "%M")) \
| eval lastTime_ptime=strptime(lastTime, "%F %T %Z"), lastTime_wday=strftime(lastTime_ptime, "%A"), lastTime_date=tonumber(strftime(lastTime_ptime, "%e")), lastTime_hour=tonumber(strftime(lastTime_ptime, "%H")), lastTime_minute=tonumber(strftime(lastTime_ptime, "%M")) \
| eval event_ptime=strptime(event_ptime, "%F %T %Z"), event_wday=strftime(event_ptime, "%A"), event_date=tonumber(strftime(event_ptime, "%e")), event_hour=tonumber(strftime(event_ptime, "%H")), event_minute=tonumber(strftime(event_ptime, "%M"))
iseval = 0

[cs_generate_time_fields_for_filter(1)]
args = field
definition = eval "$field$_hr" = strftime('$field$', "%F %T %Z"), "$field$_wday"=strftime('$field$', "%A"), "$field$_date"=tonumber(strftime('$field$', "%e")), "$field$_hour"=tonumber(strftime('$field$', "%H")), "$field$_minute"=tonumber(strftime('$field$', "%M")), "$field$_zone"=strftime('$field$', "%Z")
iseval = 0

[cs_remove_time_fields_for_filter]
definition = fields - event_wday, event_date, event_hour, event_minute, event_ptime, lastTime_wday, lastTime_date, lastTime_hour, lastTime_minute, lastTime_ptime, firstTime_wday, firstTime_date, firstTime_hour, firstTime_minute, firstTime_ptime
iseval = 0

[cs_remove_time_fields_for_filter(1)]
args = field
definition = fields - "$field$_hr" "$field$_wday" "$field$_date" "$field$_hour" "$field$_minute" "$field$_zone"
iseval = 0


# Network
[cs_filter_private_ips]
definition = NOT (src_ip=10.0.0.0/8 OR src_ip=172.16.0.0/12 OR src_ip=192.168.0.0/16)
iseval = 0

[cs_private_ips(1)]
args = ip_field
definition = ($ip_field$="10.0.0.0/8" OR $ip_field$="172.16.0.0/12" OR $ip_field$="192.168.0.0/16")
iseval = 0

[cs_public_ips(1)]
args = ip_field
definition = ($ip_field$!="10.0.0.0/8" AND $ip_field$!="172.16.0.0/12" AND $ip_field$!="192.168.0.0/16")
iseval = 0

[cs_identify_private_ips(1)]
args = ip_field
definition = eval is_source_internal = if(cidrmatch("10.0.0.0/8",$ip_field$) OR cidrmatch("172.16.0.0/12",$ip_field$) OR cidrmatch("192.168.0.0/16",$ip_field$), "Yes", "No") 
iseval = 0

[cs_palo_search_blocked_ip(1)]
args = field_name
definition = lookup `cs_palo_search_blocked_ip_lookup_name` ip as $field_name$ OUTPUT blocked | search blocked=1 | fields - blocked
iseval = 0


[cs_palo_malicious_ip_list_filter_previous_results(1)]
args = filter_from
definition = where last_seen>relative_time(now(), "$filter_from$")
iseval = 0

[cs_network_generate_location_for_internal_network(1)]
args = ip
definition = eval lat=if(cidrmatch("10.0.0.0/8",$ip$) OR cidrmatch("172.16.0.0/12",$ip$) OR cidrmatch("192.168.0.0/16",$ip$), `cs_network_home_location_lat`, lat) \
| eval lon=if(cidrmatch("10.0.0.0/8",$ip$) OR cidrmatch("172.16.0.0/12",$ip$) OR cidrmatch("192.168.0.0/16",$ip$), `cs_network_home_location_lon`, lon)
iseval = 0

[cs_network_filter_internal_traffic]
definition = eval start_lat=if(cidrmatch("10.0.0.0/8",src_ip) OR cidrmatch("172.16.0.0/12",src_ip) OR cidrmatch("192.168.0.0/16",src_ip), `cs_network_home_location_lat`, start_lat) \
| eval start_lon=if(cidrmatch("10.0.0.0/8",src_ip) OR cidrmatch("172.16.0.0/12",src_ip) OR cidrmatch("192.168.0.0/16",src_ip), `cs_network_home_location_lon`, start_lon) \
| eval end_lat=if(cidrmatch("10.0.0.0/8",dest_ip) OR cidrmatch("172.16.0.0/12",dest_ip) OR cidrmatch("192.168.0.0/16",dest_ip), `cs_network_home_location_lat`, end_lat) \
| eval end_lon=if(cidrmatch("10.0.0.0/8",dest_ip) OR cidrmatch("172.16.0.0/12",dest_ip) OR cidrmatch("192.168.0.0/16",dest_ip), `cs_network_home_location_lon`, end_lon) \
| where start_lat!=end_lat OR start_lon!=end_lon
iseval = 0

[cs_network_animate_pulse_traffic_map]
definition = eval animate="true", pulse_at_start="true"
iseval = 0

[cs_network_animate_traffic_map]
definition = eval animate="true"
iseval = 0

[cs_network_traffic_top]
definition = 20
iseval = 0

[cs_network_scanning_min_dc_ports]
definition = 100
iseval = 0

[cs_all_indexes]
definition = index=*
iseval = 0

# Qualys
[cs_qualys_hostsummary]
definition = `cs_qualys` "HOSTSUMMARY:"
iseval = 0

[cs_qualys_vuln]
definition = `cs_qualys` "HOSTVULN:"
iseval = 0

# Tenable
[cs_tenable_assets]
definition = `cs_tenable` sourcetype IN ("tenable:io:assets", "tenable:sc:assets", "nessus_json")
iseval = 0

[cs_tenable_vuln]
definition = `cs_tenable` sourcetype IN ("tenable:io:vuln", "tenable:sc:vuln", "nessus_json")
iseval = 0

# Device Inventory Related
[cs_device_inventory_data_format]
definition = cyencesdevicemanager operation="getdevices" \
| mvexpand product_uuids \
| rename product_uuids as product_uuid \
| join product_uuid type=left \
    [| inputlookup cs_lansweeper_inventory \
    | rename time as lansweeper_last_event \
    | fields - ip, hostname, mac_address, tenable_uuid, qualys_id, sophos_uuid, crowdstrike_id, kaspersky_host, windows_defender_host \
    | append \
        [| inputlookup cs_tenable_vuln \
        | stats max(_time) as _time, count, count(eval(vul_state="open" OR vul_state="reopened")) as active, count(eval(vul_state="fixed")) as fixed by tenable_uuid, vul_severity \
        | stats max(_time) as _time, sum(count) as total_vuln, sum(eval(if(vul_severity="informational", count, 0))) as info_vuln, sum(eval(if(vul_severity="low", count, 0))) as low_vuln, sum(eval(if(vul_severity="medium", count, 0))) as medium_vuln, sum(eval(if(vul_severity="high", count, 0))) as high_vuln, sum(eval(if(vul_severity="critical", count, 0))) as critical_vuln, sum(active) as active_vuln, sum(eval(if(vul_severity="informational", active, 0))) as info_active_vuln, sum(eval(if(vul_severity="low", active, 0))) as low_active_vuln, sum(eval(if(vul_severity="medium", active, 0))) as medium_active_vuln, sum(eval(if(vul_severity="high", active, 0))) as high_active_vuln, sum(eval(if(vul_severity="critical", active, 0))) as critical_active_vuln, sum(fixed) as fixed_vuln, sum(eval(if(vul_severity="informational", fixed, 0))) as info_fixed_vuln, sum(eval(if(vul_severity="low", fixed, 0))) as low_fixed_vuln, sum(eval(if(vul_severity="medium", fixed, 0))) as medium_fixed_vuln, sum(eval(if(vul_severity="high", fixed, 0))) as high_fixed_vuln, sum(eval(if(vul_severity="critical", fixed, 0))) as critical_fixed_vuln by tenable_uuid \
        | append \
            [| inputlookup cs_tenable_inventory] \
        | stats values(*) as *, max(time) as time by tenable_uuid \
        | rename time as tenable_last_event, created_at as tenable_created_at, first_seen as tenable_first_seen, last_seen as tenable_last_seen \
        | fields - ip, hostname, mac_address, qualys_id, lansweeper_id, sophos_uuid, crowdstrike_id,kaspersky_host, windows_defender_host] \
    | append \
        [| inputlookup cs_qualys_inventory \
        | rename time as qualys_last_event \
        | fields - ip, hostname, mac_address, tenable_uuid, lansweeper_id, sophos_uuid, crowdstrike_id, kaspersky_host, windows_defender_host] \
    | append \
        [| inputlookup cs_sophos_inventory \
        | rename time as sophos_last_event \
        | fields - ip, hostname, mac_address, tenable_uuid, qualys_id, lansweeper_id, crowdstrike_id, kaspersky_host, windows_defender_host] \
    | append \
        [| inputlookup cs_windows_defender_inventory \
        | rename time as defender_last_event \
        | fields - ip, hostname, mac_address, tenable_uuid, qualys_id, lansweeper_id, sophos_uuid, crowdstrike_id, kaspersky_host] \
    | append \
        [| inputlookup cs_crowdstrike_inventory \
        | rename time as crowdstrike_last_event \
        | fields - ip, hostname, mac_address, tenable_uuid, qualys_id, lansweeper_id, sophos_uuid, kaspersky_host, windows_defender_host] \
    | append \
        [| inputlookup cs_kaspersky_inventory \
        | rename time as kaspersky_last_event \
        | fields - ip, hostname, mac_address, tenable_uuid, qualys_id, lansweeper_id, sophos_uuid,crowdstrike_id, windows_defender_host] ] \
| stats values(*) as * by uuid \
| rename latest_time as _time, ips as ip, hostnames as hostname, mac_addresses as mac_address, users as user \
| eval lansweeper_os=coalesce(lansweeper_os, AssetType." ".OSVersion." ".AssetVersion) \
| eval os=coalesce(sophos_os, tenable_os, QUALYS_OS, lansweeper_os) \
| eval lansweeper_status=case(isnull(lansweeper_last_event), "-", 1==1, lansweeper_state) \
| eval tmp_lansweeper_status = lansweeper_status, lansweeper=case(tmp_lansweeper_status=="Non-active",1,tmp_lansweeper_status=="Active",0) \
| fieldformat lansweeper=tmp_lansweeper_status \
| eval qualys_status=case(isnull(qualys_last_event), "-", ACTIVE_SEVERITY_5>0, "Red", ACTIVE_SEVERITY_4>0, "Orange", ACTIVE_SEVERITY_3>0, "Yellow", ACTIVE_SEVERITY_2>0, "Blue", 1==1, "Green") \
| eval tmp_qualys_status = qualys_status, qualys=case(tmp_qualys_status == "Red", 4, tmp_qualys_status=="Orange", 3, tmp_qualys_status=="Yellow", 2, tmp_qualys_status=="Blue", 1, tmp_qualys_status=="Green", 0) \
| fieldformat qualys=tmp_qualys_status \
| eval tenable_status=case(isnull(tenable_last_event), "-", critical_active_vuln>0, "Red", high_active_vuln>0, "Orange", medium_active_vuln>0, "Yellow", low_active_vuln>0, "Blue", 1==1, "Green") \
| eval tmp_tenable_status = tenable_status, tenable=case(tmp_tenable_status == "Red", 4, tmp_tenable_status=="Orange", 3, tmp_tenable_status=="Yellow", 2, tmp_qualys_status=="Blue", 1, tmp_tenable_status=="Green", 0) \
| fieldformat tenable=tmp_tenable_status \
| eval defender_status=case(isnull(defender_last_event), "-", 1==1, RTP_state) \
| eval tmp_defender_status = defender_status, defender=case(tmp_defender_status == "Enabled", 0,tmp_defender_status=="Disabled",1,true(),tmp_defender_status) \
| fieldformat defender=tmp_defender_status \
| eval sophos_status=case(isnull(sophos_last_event), "-", isnull(sophos_status), "RTP Enabled", 1==1, sophos_status) \
| eval tmp_sophos_status = sophos_status, sophos=case(tmp_sophos_status == "RTP Enabled", 0,tmp_sophos_status=="RTP Disabled",1,tmp_sophos_status=="Service not Running",2) \
| fieldformat sophos=tmp_sophos_status \
| eval crowdstrike_status=if(isnull(crowdstrike_last_event), "-", "Present") \
| eval tmp_crowdstrike_status = crowdstrike_status, crowdstrike=case(tmp_crowdstrike_status == "Present", 0) \
| fieldformat crowdstrike=tmp_crowdstrike_status \
| eval kaspersky_status=kaspersky_status \
| eval tmp_kaspersky_status = kaspersky_status, kaspersky=case(tmp_kaspersky_status == "Present", 0, tmp_kaspersky_status == "Disabled", 1) \
| fieldformat kaspersky=tmp_kaspersky_status \
| eval ip_drilldown=mvjoin(ip, ","), hostname_drilldown=mvjoin(hostname, ","), user_drilldown=mvjoin(user, ",") \
| eval active_vul_qualys=ACTIVE-ACTIVE_SEVERITY_1, active_vul_tenable=active_vuln-info_active_vuln \
| eval active_vul=coalesce(active_vul_qualys,active_vul_tenable), total_vul=coalesce(total_vuln,TOTAL_VULNS), severity_5_q=if(isnull(ACTIVE_SEVERITY_5), 0, ACTIVE_SEVERITY_5), severity_4_q=if(isnull(ACTIVE_SEVERITY_4), 0, ACTIVE_SEVERITY_4), high_vul_q=severity_5_q+severity_4_q, high_vul_t=critical_active_vuln+high_active_vuln, high_vul_q=if(isnull(high_vul_q), 0, high_vul_q), high_vul_t=if(isnull(high_vul_t), 0, high_vul_t), high_vul=high_vul_q+high_vul_t \
| eval high_vul=if(high_vul==0, null(), high_vul) \
| table _time, product_names, uuid, ip, hostname, mac_address, user, os, lansweeper, qualys, tenable, active_vul, high_vul, sophos, defender, crowdstrike,kaspersky, tmp_*, *_last_event, ip_drilldown, hostname_drilldown, user_drilldown \
| fields - crowdstrike_status, kaspersky_status, sophos_status, defender_status, tenable_status, qualys_status, lansweeper_status
iseval = 0


[cs_windows_defender_inventory_fill_search]
definition = dedup host \
| eval hostname=lower(host), ip="", mac_address="", product_name="Windows Defender", product_uuid=lower(host), Last_full_scan_start_time=if(Last_full_scan_start_time="1/1/1601 12:00:00 AM", "-", Last_full_scan_start_time), Last_full_scan_end_time=if(Last_full_scan_end_time="1/1/1601 12:00:00 AM", "-", Last_full_scan_end_time), Last_quick_scan_start_time=if(Last_quick_scan_start_time="1/1/1601 12:00:00 AM", "-", Last_quick_scan_start_time), Last_quick_scan_end_time=if(Last_quick_scan_end_time="1/1/1601 12:00:00 AM", "-", Last_quick_scan_end_time), time=_time, indextime=_indextime, user="" \
| rename host as windows_defender_host \
| table time, indextime, product_name, product_uuid, windows_defender_host, hostname, ip, mac_address, user, RTP_state, Platform_version, Engine_version, AVSignature_version, BM_state, IOAV_state, OA_state, Last_full_scan_start_time, Last_full_scan_end_time, Last_quick_scan_start_time, Last_quick_scan_end_time \
| cyencesdevicemanager operation="addentries" \
| append \
    [| inputlookup cs_windows_defender_inventory ] \
| stats latest(time) as time, latest(*) as * by windows_defender_host \
| eval _key=windows_defender_host \
| outputlookup cs_windows_defender_inventory




# Linux
[cs_linux_users_with_previledge]
definition = `cs_linux` sourcetype="usersWithLoginPrivs"
iseval = 0

[cs_linux_groups]
definition = `cs_linux` sourcetype="cyences:linux:groups"
iseval = 0

[cs_linux_users]
definition = `cs_linux` sourcetype="cyences:linux:users"
iseval = 0

[cs_linux_sudousers]
definition = `cs_linux` sourcetype="sudousers"
iseval = 0

[cs_linux_interfaces]
definition = `cs_linux` sourcetype="interfaces"
iseval = 0

[cs_linux_df]
definition = `cs_linux` sourcetype="df"
iseval = 0

[cs_linux_unix_listening_ports]
definition = `cs_linux` sourcetype="Unix:ListeningPorts"
iseval = 0

[cs_linux_unix_service]
definition = `cs_linux` sourcetype="Unix:Service"
iseval = 0

[cs_linux_unix_version]
definition = `cs_linux` sourcetype="Unix:Version"
iseval = 0

[cs_linux_unix_uptime]
definition = `cs_linux` sourcetype="Unix:Uptime"
iseval = 0

[cs_linux_hardware]
definition = `cs_linux` sourcetype="hardware"
iseval = 0

[cs_linux_success_login]
definition = `cs_linux` (source=/var/log/secure app=sshd) OR (source=/var/log/audit.log user=* process=sshd ) action=success
iseval = 0

[cs_linux_failed_login]
definition = `cs_linux` (sourcetype=linux_secure eventtype=*failed_login*) OR (source=/var/log/audit.log user=* process=sshd action=failure)
iseval = 0


# Microsoft 365 Defender ATP
[cs_o365_defender_atp_alerts]
definition = `cs_o365_defender_atp` sourcetype="ms:defender:atp:alerts"


# Google Workspace
[cs_gws_login_events]
definition = `cs_gws` sourcetype=gws:reports:login


# Cyences CIM indexes 
[cs_cim_vulnerabilities_indexes]
definition = ((`cs_tenable_vuln`) OR (`cs_qualys_vuln`) OR (`cs_crowdstrike_vuln`))
iseval = 0

[cs_cim_assets_indexes]
definition = ((`cs_tenable_assets`) OR (`cs_qualys_hostsummary`))
iseval = 0

# Configuration and Upgrade related macros
[cy_run_filter_macro_upgrade_steps]
definition = 1
iseval = 0

[cy_cyences_version]
definition = 
iseval = 0


# ================================== #
# Do not update these macros - Internal macros used to avoid known false positives #
# ================================== #

#Ransomware
[cs_spike_in_the_file_writes_internal_filter]
definition = (Filesystem.file_path!="C:\\Program Files\\*" Filesystem.file_path!="C:\\Program Files (x86)\\*" Filesystem.file_path!="C:\\Windows\\Temp\\*" Filesystem.file_path!="C:\\ProgramData\\Tenable\\Nessus\\nessus\\plugins\\*" Filesystem.file_path!="C:\\Windows\\ServiceProfiles\\LocalService\\AppData\\Local\\Temp\\*" Filesystem.file_path!="C:\\Users\\*\\AppData\\Local\\Temp\\*" Filesystem.file_path!="C:\\Windows\\assembly*" Filesystem.file_path!="C:\\Windows\\Prefetch\\*.pf" Filesystem.file_path!="C:\\Windows\\WinSxS\Backup\\*.mui_*")
iseval = 0

[cs_system_processes_run_from_unexpected_locations_internal_filter]
# fake windows processes - internal use macro
definition = search NOT (parent_process_path IN ("C:\\Windows\\System32\\Dism.exe", "C:\\Windows\\System32\\cleanmgr.exe") process_name="DismHost.exe")
iseval = 0

[cs_common_ransomware_extensions_internal_filter]
definition = search NOT file_path IN ("C:\\ProgramData\\Microsoft\\Windows Defender\\IMpService*.lock","C:\\Users\\*\\AppData\\Roaming\\Code\\CachedData\\*\\*.code","C:\\Users\\*\\AppData\\Roaming\\Cisco\\Unified Communications\\Jabber\\CSF\\Security\\AppDialRules.xml.adr","C:\\Program Files\\Microsoft SQL Server\\MSSQL*.*SQL*\\*_SERVICES\\*.enc")
iseval = 0

[cs_ransomware_min_file_writes]
definition = 3000

[cs_ransomware_min_file_extension_count]
definition = 10

# Network
[cs_network_ddos_min_m_packets]
# no. of buckets in millions
definition = 0.5

[cs_network_outbound_min_m_packets]
# no. of buckets in millions
definition = 0.5

# O365
[cs_o365_authorizationpolicy_change_internal_filter]
definition = search *
iseval = 0

[cs_o365_policy_change_internal_filter]
definition = search *
iseval = 0

[cs_o365_role_change_internal_filter]
definition = search *
iseval = 0

[cs_o365_group_change_internal_filter]
definition = search *
iseval = 0

[cs_o365_group_membership_change_internal_filter]
definition = search *
iseval = 0

[cs_o365_user_change_internal_filter]
definition = search NOT (Actor="fim_password_service@support.onmicrosoft.com" Command="Update user.") NOT (Actor="MFA Service" Command="Update user.")
iseval = 0

[cs_o365_serviceprincipal_change_internal_filter]
definition = search *
iseval = 0

[cs_o365_application_change_internal_filter]
definition = search *
iseval = 0

[cs_o365_ad_other_change_internal_filter]
definition = search *
iseval = 0

[cs_o365_sharing_file_with_external_user_filter]
definition = search *
iseval = 0

[cs_o365_external_user_accessing_file_filter]
definition = search *
iseval = 0

[cs_o365_onedrive_or_sharepoint_link_accessed_by_external_user_filter]
definition = search *
iseval = 0

[cs_o365_onedrive_or_sharepoint_link_accessed_by_external_user_internal_filter]
definition = search *
iseval = 0


# Sysmon Deploy Audit
[cs_sysmon_deploy_audit_data]
definition = (index=windows OR index=_internal) sourcetype="InstallLog:Sysmon"
iseval = 0


# Configuration for AD Object Changes
##-- All Changes for Category--##
[ms_obj_changes_base_cat(1)]
args = tok_chg_cat
definition = `cs_wineventlog_security` [|inputlookup cs_ad_audit_change_event_codes WHERE change_category="$tok_chg_cat$" |stats values(EventCode) AS EventCode,values(obj_type) AS obj_type | format] src_user_type="user" NOT((EventCode=4723 OR EventCode=4738) AND src_user!=user)
iseval = 0

[ms_obj_changes_base_cat_customised(1)]
args = tok_chg_cat
definition = `cs_wineventlog_security` [| inputlookup cs_ad_audit_change_event_codes | makemv delim="|" alert | mvexpand alert | where alert=="$tok_chg_cat$"  |stats values(EventCode) AS EventCode,values(obj_type) AS obj_type | format] src_user_type="user" NOT((EventCode=4723 OR EventCode=4738) AND src_user!=user)
iseval = 0

[ms_obj_group_change_out]
definition = fields _time, _raw,ComputerName, src_user, src_nt_domain, dest_nt_domain, msad_action, signature,DN,New_DN,Old_DN,group_obj_lkp,member_obj_lkp,MSADGroupClass,MSADGroupClassID,MSADGroupType,MSADChanges,MSADChangedAttributes,AttributeLDAPDisplayName,AttributeValue,dir_svcs_action \
| eval msad_action=if(isnull(msad_action),if(isnull(dir_svcs_action),"NA",dir_svcs_action),if(isnull(dir_svcs_action),msad_action,msad_action." (".dir_svcs_action.")"))\
| eval adminuser=if(isnull(src_nt_domain),src_user,upper(src_nt_domain)."\\".src_user)\
| lookup cs_ad_audit_group_type MSADGroupClassID OUTPUT MSADGroupClass\
| lookup cs_ad_obj_group lookup_grp AS group_obj_lkp OUTPUT cn AS group_obj_cn, orig_cn AS group_obj_o_cn,MSADGroupClass AS MSADGroupClass_u, MSADGroupType AS MSADGroupType_u\
| eval group_obj_nm=if(isnull(group_obj_o_cn) OR group_obj_o_cn="",if(isnull(group_obj_cn) OR group_obj_cn="",if(isnull(group_obj_lkp),"NA",group_obj_lkp),lower(group_obj_cn)),lower(group_obj_o_cn))\
| eval MSADGroupClass=if(isnull(MSADGroupClass),if(isnull(MSADGroupClass_u),"NA",MSADGroupClass_u),MSADGroupClass)\
| eval MSADGroupType=if(isnull(MSADGroupType),if(isnull(MSADGroupType_u),"NA",MSADGroupType_u),MSADGroupType)\
| fillnull value="N/A" Correlation_ID,member_obj_lkp\
| `ms_obj_msad-changed-attributes`\
| stats list(MSADChanges) AS MSADChanges,values(Correlation_ID) AS Correlation_IDs, values(ComputerName) as ComputerName by _time,adminuser,msad_action,group_obj_nm,MSADGroupType,MSADGroupClass,member_obj_lkp,signature\
| eval MSADChanges=mvjoin(MSADChanges, "########")\
| eval MSADChanges=case(isnull(signature) AND isnull(MSADChanges),"Unknown Changes",isnull(signature),MSADChanges,isnotnull(MSADChanges),"Signature: ".signature."########".MSADChanges)\
| makemv delim="########" MSADChanges\
| table _time,ComputerName, adminuser, group_obj_nm,msad_action,MSADGroupType,MSADGroupClass,member_obj_lkp,MSADChanges
iseval = 0

[ms_obj_msad-changed-attributes]
definition = fillnull value="" signature,Correlation_IDs\
| eval f=replace(MSADChangedAttributes, "(?msi)\r\s+|\n\s+", "########")\
| makemv delim="########" f\
| eval MSADChangedAttributes=mvfilter(NOT match(f, ":(\s*\-\s*|)$")) \
| eval MSADChanges=if(isnull(MSADChangedAttributes),if(isnull(AttributeLDAPDisplayName),if(msad_action="moved","Moved:########--From: ".Old_DN."########--To: ".New_DN,""),if(isnull(AttributeValue) OR AttributeValue="-" OR AttributeValue="",NULL,dir_svcs_action." (".AttributeLDAPDisplayName.": ".AttributeValue.")")),MSADChangedAttributes)
iseval = 0

[ms_obj_user_change_out]
definition = fields _time,Message, ComputerName, src_user, user, user_obj_dn, user_obj_email,msad_action, MSADChanges, dest_nt_domain, signature, change_signature, MSADChangedAttributes,Correlation_ID,AttributeLDAPDisplayName,AttributeValue,DN,Old_DN,New_DN,dir_svcs_action\
| eval adminuser=if(isnull(src_nt_domain),src_user,upper(src_nt_domain)."\\".src_user)\
| eval user_obj_lkp=if(isnull(user_obj_dn),if(isnull(user_obj_email),if(isnull(DN),if(isnull(Old_DN),if(isnull(New_DN),lower(user),lower(New_DN)),lower(Old_DN)),lower(DN)),lower(user_obj_email)),lower(user_obj_dn))\
| lookup cs_ad_obj_user lookup_usr AS user_obj_lkp OUTPUT sAMAccountName AS b_user_obj_sam,cn AS b_user_obj_cn\
| eval user=if(isnull(b_user_obj_sam),if(isnull(b_user_obj_cn),if(isnull(user_obj_lkp),"NA",lower(user_obj_lkp)),lower(b_user_obj_cn)),lower(b_user_obj_sam))\
| eval user=mvindex(user,0)\
| eval dest_user_subject=if(isnull(dest_nt_domain),user,dest_nt_domain."\\".lower(user))\
| eval signature=coalesce(change_signature, signature)\
| `ms_obj_msad-changed-attributes`\
| stats count, values(Correlation_ID) AS Correlation_IDs,values(Message) as Message,values(MSADChanges) AS MSADChanges, values(ComputerName) as ComputerName by _time,adminuser,msad_action,dest_user_subject,user,signature\
| eval signature=mvdedup(signature)\
| eval MSADChanges=mvjoin(MSADChanges, "########")\
| eval MSADChanges=case(isnull(signature) AND isnull(MSADChanges),"Unknown Changes",isnull(signature),MSADChanges,isnull(MSADChanges),"Signature: ".signature,isnotnull(MSADChanges),"Signature: ".signature."########".MSADChanges)\
| makemv delim="########" MSADChanges\
| table _time,ComputerName,adminuser,msad_action,user,dest_user_subject,Correlation_IDs,MSADChanges,Message
iseval = 0

[ms_obj_groupmembership_change_out]
definition = fields ComputerName _time, _raw, src_user, src_nt_domain, dest_nt_domain, msad_action, signature,DN,New_DN,Old_DN,group_obj_lkp,member_obj_domain,member_obj_id,member_obj_lkp,MSADGroupClass,MSADGroupClassID,MSADGroupType,MSADChanges,MSADChangedAttributes,AttributeLDAPDisplayName,AttributeValue,dir_svcs_action \
| eval member=if(isnull(member_obj_domain),member_obj_id,member_obj_domain."\\".member_obj_id) \
| eval member=if(isnull(member),if(isnull(member_obj_dn),"NA",member_obj_dn),member) \
| eval msad_action=if(isnull(msad_action),if(isnull(dir_svcs_action),"NA",dir_svcs_action),if(isnull(dir_svcs_action),msad_action,msad_action." (".dir_svcs_action.")")) \
| eval adminuser=if(isnull(src_nt_domain),src_user,upper(src_nt_domain)."\\".src_user) \
| lookup cs_ad_audit_group_type MSADGroupClassID OUTPUT MSADGroupClass \
| lookup cs_ad_obj_group lookup_grp AS group_obj_lkp OUTPUT cn AS group_obj_cn, orig_cn AS group_obj_o_cn,MSADGroupClass AS MSADGroupClass_u, MSADGroupType AS MSADGroupType_u \
| eval group_obj_nm=if(isnull(group_obj_o_cn) OR group_obj_o_cn="",if(isnull(group_obj_cn) OR group_obj_cn="",if(isnull(group_obj_lkp),"NA",group_obj_lkp),lower(group_obj_cn)),lower(group_obj_o_cn)) \
| eval MSADGroupClass=if(isnull(MSADGroupClass),if(isnull(MSADGroupClass_u),"NA",MSADGroupClass_u),MSADGroupClass) \
| eval MSADGroupType=if(isnull(MSADGroupType),if(isnull(MSADGroupType_u),"NA",MSADGroupType_u),MSADGroupType) \
| fillnull value="N/A" Correlation_ID,member_obj_lkp | `ms_obj_msad-changed-attributes` \
| stats list(MSADChanges) AS MSADChanges,values(Correlation_ID) AS Correlation_IDs values(ComputerName) as ComputerName by _time,adminuser,msad_action,group_obj_nm,member,MSADGroupType,MSADGroupClass,member_obj_lkp,signature \
| eval MSADChanges=mvjoin(MSADChanges, "########") \
| eval MSADChanges=case(isnull(signature) AND isnull(MSADChanges),"Unknown Changes",isnull(signature),MSADChanges,isnotnull(MSADChanges),"Signature: ".signature."########".MSADChanges) \
| makemv delim="########" MSADChanges | lookup cs_ad_obj_user lookup_usr AS member_obj_lkp OUTPUT cn AS u_cn, dn AS u_dn \
| lookup cs_ad_obj_group lookup_grp AS member_obj_lkp OUTPUT cn AS g_cn, dn AS g_dn \
| lookup cs_ad_obj_computer lookup_cmp AS member_obj_lkp OUTPUT cn AS c_cn, dn AS c_dn \
| eval member_obj_dn=case(isnotnull(c_dn), c_dn, isnotnull(g_dn), g_dn, isnotnull(u_dn), u_dn, true(), member_obj_dn) \
| eval Member_Type=case(isnotnull(c_cn), "Computer", isnotnull(g_cn), "Group", true(), "User") \
| table _time, ComputerName, adminuser,group_obj_nm,msad_action,MSADGroupType,MSADGroupClass,Member_Type,member_obj_lkp,member,MSADChanges
iseval = 0

[cs_ad_important_group_internal]
definition = "Administrator", "Admin", "GlobalAdmin", "DcAdmin"
iseval = 0

[cs_ad_important_policy_internal]
definition = "sample_policy_1", "sample_policy_2"
iseval = 0

[cs_ad_important_user_internal]
definition = "Administrator", "Admin", "GlobalAdmin", "DcAdmin"
iseval = 0

[cs_ad_important_role_internal]
definition = "Administrator", "Admin", "GlobalAdmin", "DcAdmin"
iseval = 0

#AWS
[cs_aws_cloudtrail_logs]
definition =  `cs_aws` sourcetype="aws:cloudtrail" 
iseval = 0

[cs_cloudtrail_service(2)]
args = service, notable
definition = lookup cs_aws_all_eventName.csv eventName OUTPUT function | fillnull value="N/A" function | search function="$service$" | eval notable=if(match(eventName, "(^Get*|^List*|^Describe*)"), 0, 1) | search notable=$notable$


# Windows
[cs_windows_process_tampering_filter_internal]
definition = search NOT (Type="Image is locked for access" Image IN("C:\\Windows\\System32\\wbem\\WMIADAP.exe","&lt;unknown process&gt;"))
iseval = 0

[cs_country_login_percentage]
definition = fillnull value=0 percentage_login_from_country \
| where percentage_login_from_country < `cs_authentication_new_location_login_pct_limit` \
| eval reason = case(isnull(usual_login_location), "No login from this user in last 90 days", percentage_login_from_country=="0", "No login from this country in last 90 days", true(), "Low historical login from this country")
iseval = 0

[cs_current_week_login_count(1)]
args = sourcetypefilter
definition = eval main_event="1" \
| append [ | tstats count, values(Authentication.org_country) as org_country from datamodel=Cyences_Authentication where Authentication.action="success" AND Authentication.user!="unknown" AND `cs_public_ips(Authentication.src)` AND sourcetype="$sourcetypefilter$" AND earliest="@w" latest="@d" by Authentication.app, Authentication.user, Authentication.src \
| `drop_dm_object_name(Authentication)` \
| iplocation src \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| inputlookup cs_authentication_usual_location.csv append=true \
| eval user = lower(user) \
| stats sum(count) as count by user, app, Country \
| eventstats sum(count) as total by user, app \
| eval percentage_login_from_country = round(count*100/total, 2) \
| table user app Country percentage_login_from_country ] \
| eventstats values(eval(Country." (". percentage_login_from_country. "%)")) as usual_login_location by user, app \
| stats values(*) as * by user,app, Country \
| search main_event="1" \
| fields - main_event
iseval = 0

[cs_current_week_login_count_vpn]
definition = eval main_event="1" \
| append [ | tstats count, values(Authentication.org_country) as org_country from datamodel=Cyences_Authentication where Authentication.dest_category="vpn_auth" AND Authentication.action="success" AND Authentication.user!="unknown" AND `cs_public_ips(Authentication.src)` AND earliest="@w" latest="@d" by Authentication.app, Authentication.user, Authentication.src \
| `drop_dm_object_name(Authentication)` \
| iplocation src \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| inputlookup cs_authentication_usual_location.csv append=true \
| eval user = lower(user) \
| stats sum(count) as count by user, app, Country \
| eventstats sum(count) as total by user, app \
| eval percentage_login_from_country = round(count*100/total, 2) \
| table user app Country percentage_login_from_country ] \
| eventstats values(eval(Country." (". percentage_login_from_country. "%)")) as usual_login_location by user, app \
| stats values(*) as * by user,app, Country \
| search main_event="1" \
| fields - main_event
iseval = 0

[cs_current_week_login_count_o365]
definition = eval main_event="1" \
| append [ | tstats count, values(Authentication.org_country) as org_country from datamodel=Cyences_Authentication where Authentication.action="success" AND Authentication.user!="unknown" AND `cs_public_ips(Authentication.src)` AND `cs_o365_login_source` AND earliest="@w" latest="@d" by Authentication.app, Authentication.user, Authentication.src \
| `drop_dm_object_name(Authentication)` \
| iplocation src \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| inputlookup cs_authentication_usual_location.csv append=true \
| eval user = lower(user) \
| stats sum(count) as count by user, app, Country \
| eventstats sum(count) as total by user, app \
| eval percentage_login_from_country = round(count*100/total, 2) \
| table user app Country percentage_login_from_country ] \
| eventstats values(eval(Country." (". percentage_login_from_country. "%)")) as usual_login_location by user, app \
| stats values(*) as * by user,app, Country \
| search main_event="1" \
| fields - main_event
iseval = 0

[cs_o365_login_source]
definition = [|search `cs_o365` (sourcetype="o365:management:activity" OR (sourcetype=o365:graph:api source="AuditLogs.SignIns")) earliest=-2h latest=now \
| stats values(sourcetype) as sourcetype, dc(sourcetype) as count \
| eval search=if(count==2 or (count==1 and sourcetype=="o365:graph:api"), "(sourcetype=o365:graph:api source=AuditLogs.SignIns)", "sourcetype=o365:management:activity") \
| table search | return $search]
iseval = 0

[cs_o365_login_filter_source]
definition = [|search `cs_o365` (sourcetype="o365:management:activity" OR (sourcetype=o365:graph:api source="AuditLogs.SignIns")) earliest=-2h latest=now \
| stats values(sourcetype) as sourcetype, dc(sourcetype) as count \
| eval search=if(count==2 or (count==1 and sourcetype=="o365:graph:api"), "sourcetype!=o365:management:activity", "(sourcetype!=o365:graph:api source!=AuditLogs.SignIns)") \
| table search | return $search]
iseval = 0

# ================================== #
# Update below macros based on your environment #
# ================================== #

# Data-Models
[cs_summariesonly_cyences_vulnerabilities]
definition = summariesonly=false
iseval = 0

[cs_summariesonly_cyences_assets]
definition = summariesonly=false
iseval = 0

[cs_summariesonly_endpoint]
definition = summariesonly=false
iseval = 0

[cs_summariesonly_network_traffic]
definition = summariesonly=false
iseval = 0

[cs_summariesonly_authentication]
definition = summariesonly=false
iseval = 0

[cs_summariesonly_network_resolution_dns]
definition = summariesonly=false
iseval = 0

# General
[cs_home_country]
definition = "United States"
# Quotes around the name of the country is compulsory.

[cs_email_subject_prefix]
definition = N/A

# Device Inventory
[cs_device_inventory_hostname_postfixes]
definition = ".ad.crossrealms.com, .crossrealms.com, .local"
# Put it with double quote on both side (compulsory)

# User Inventory
[cs_user_inventory_user_postfixes]
definition = ".ad.crossrealms.com, @crossrealms.com, @CROSSREALMS.LOCAL, .crossrealms.com, .local"
# Put it with double quote on both side (compulsory)

[cs_user_inventory_user_prefixes]
definition = "crossrealms\, CR\"
# Put it with double quote on both side (compulsory)

[cs_user_inventory_data_filter]
definition = search *

[cs_user_privilege_mapping(1)]
args = field
definition = join $field$ type=left [| cyencesusermanager operation="getusers" | mvexpand users | table users, is_privileged_user | rename users as $field$] | fillnull value="No" is_privileged_user
iseval = 0

# Windows/AD

[cs_windows_idx]
definition = (index IN (wineventlog, windows, msad) OR `cs_windows_cert_store_idx`)
iseval = 0

[cs_wineventlog_security]
definition = `cs_windows_idx` sourcetype="*WinEventLog" source="*WinEventLog:Security"
iseval = 0

[cs_wineventlog_system]
definition = `cs_windows_idx` sourcetype="*WinEventLog" source="*WinEventLog:System"
iseval = 0

[cs_windows_firewall_status_logs]
definition = `cs_windows_idx` sourcetype="WindowsFirewallStatus"
iseval = 0

[cs_ad_active_directory]
definition = `cs_windows_idx` sourcetype="ActiveDirectory"
iseval = 0

[cs_ad_health_logs]
definition = `cs_windows_idx` source=powershell sourcetype="MSAD:*:Health"
iseval = 0

[cs_ad_important_group]
definition = ""
iseval = 0

[cs_ad_important_policy]
definition = ""
iseval = 0

[cs_ad_important_user]
definition = ""
iseval = 0

[cs_ad_important_role]
definition = ""
iseval = 0

[cs_ad_group_changed_filter]
definition = search *
iseval = 0

[cs_ad_group_membership_changed_filter]
definition = search *
iseval = 0

[cs_ad_group_policy_changed_filter]
definition = search *
iseval = 0

[cs_ad_user_changed_filter]
definition = search *
iseval = 0

[cs_ad_user_locked_out_filter]
definition = search *
iseval = 0

[cs_ad_password_change_outside_working_hour_definition]
definition = where date_wday="Saturday" OR date_wday="Sunday" OR date_hour<6 OR date_hour>19
iseval = 0

[cs_ad_password_change_outside_working_hour_filter]
definition = search *
iseval = 0

[cs_ad_multiple_password_changes_count_limit]
definition = 3
iseval = 0

[cs_ad_multiple_password_changes_filter]
definition = search *
iseval = 0

[cs_ad_bulk_user_creation_deletion_count_limit]
definition = 10

[cs_ad_bulk_user_creation_deletion_filter]
definition = search *

[cs_ad_login_failure_due_to_password_expire_filter]
definition = search *

[cs_windows_host_missing_update_filter]
definition = search *
iseval = 0

[cs_windows_firewall_disabled_filter]
definition = search *
iseval = 0

[cs_windows_wmi_lateral_movement_filter]
definition = search *
iseval = 0

[cs_windows_event_log_cleared_filter]
definition = search *
iseval = 0

[cs_windows_process_tampering_filter]
definition = search *
iseval = 0

[cs_windows_firewall_is_disabled_filter]
definition = search *

[cs_windows_certification_is_expiring_filter]
definition = search *

[cs_windows_cert_store_idx]
definition = index IN (wincerts)
iseval = 0


# Sysmon
[cs_sysmon]
definition = index=epintel source="*WinEventLog:Microsoft-Windows-Sysmon/Operational"
iseval = 0


# Ransomware
[cs_ransomware_extensions]
definition = lookup update=true ransomware_extensions_lookup Extensions AS file_extension OUTPUT Name AS Ransomware_Name | search Ransomware_Name!=False 
iseval = 0

[cs_spike_in_file_writes_filter]
definition = search *
iseval = 0


# fake windows processes
[cs_system_processes_run_from_unexpected_locations_filter]
definition = search *
iseval = 0

[cs_common_ransomware_extensions_filter]
definition = search *
iseval = 0

[cs_common_ransomware_notes_filter]
definition = search *
iseval = 0

[cs_usn_journal_deletion_filter]
definition = search *
iseval = 0

[cs_scheduled_tasks_used_in_badrabbit_ransomware_filter]
definition = search *
iseval = 0


# MSSQL
[cs_mssql]
definition = index=mssql
iseval = 0

[cs_mssql_user_changes_filter]
definition = search *
iseval = 0


# Oracle
[cs_oracle]
definition = index=oracle
iseval = 0

[cs_oracle_user_changes_filter]
definition = search *
iseval = 0


# O365
[cs_o365]
definition = index=o365
iseval = 0

[cs_o365_success_login_outside_country_filter]
definition = search *
iseval = 0

[cs_o365_successful_login_from_unusual_country_filter]
definition = search *
iseval = 0

[cs_o365_failed_login_from_unusual_country_filter]
definition = search *
iseval = 0

[cs_o365_failed_login_outside_country_filter]
definition = search *
iseval = 0

[cs_o365_failed_login_due_to_mfs_filter]
definition = search *
iseval = 0

[cs_confirmiplocation]
definition = search *
iseval = 0

[cs_o365_failed_login_due_to_mfs_outside_country_filter]
definition = search *
iseval = 0

[cs_o365_failed_login_due_to_mfs_from_unusual_country_filter]
definition = search *
iseval = 0

[cs_o365_failed_login_due_to_conditional_access_policy_filter]
definition = search *
iseval = 0

[cs_o365_login_by_unknown_userid_filter]
definition = search *
iseval = 0

[cs_o365_daily_login_failure_filter]
definition = search *
iseval = 0

[cs_o365_dlp_exchange_filter]
definition = search *
iseval = 0

[cs_o365_security_compliance_alert_filter]
definition = search *
iseval = 0

[cs_o365_dlp_sharepoint_filter]
definition = search *
iseval = 0

[cs_o365_external_users_filter]
definition = search *
iseval = 0

[cs_o365_service_not_operational_filter]
definition = search *
iseval = 0

[cs_o365_authorizationpolicy_change_filter]
definition = search *
iseval = 0

[cs_o365_policy_change_filter]
definition = search *
iseval = 0

[cs_o365_role_change_filter]
definition = search *
iseval = 0

[cs_o365_group_change_filter]
definition = search *
iseval = 0

[cs_o365_group_membership_change_filter]
definition = search *
iseval = 0

[cs_o365_user_change_filter]
definition = search *
iseval = 0

[cs_o365_serviceprincipal_change_filter]
definition = search *
iseval = 0

[cs_o365_application_change_filter]
definition = search *
iseval = 0

[cs_o365_ad_other_change_filter]
definition = search *
iseval = 0

[cs_azure_securityscore]
definition = index=o365
iseval = 0

[cs_o365_file_sharing_to_external_user_internal_filter]
definition = search *
iseval = 0

[cs_o365_link_accessed_by_external_user_internal_filter]
definition = search *
iseval = 0

# Azure AD
[cs_azure]
definition = index=azure
iseval = 0

[cs_azure_ad_changes(1)]
args = category
definition = `cs_azure` sourcetype="azure:aad:audit" category=$category$
iseval = 0

[cs_azure_ad_unneccesary_group_change_events]
definition = NOT activityDisplayName IN ("ApprovalNotification_Create", "Features_*", "GroupLifecyclePolicies_Get", "Group_Get*", "GroupsODataV4_Get", "GroupsODataV4_evaluateDynamicMembership", "LcmPolicy_Get")
iseval = 0

# Email
[cs_email_increase_in_email_filter]
definition = search *
iseval = 0

[cs_email_daily_spam_email_filter]
definition = search *
iseval = 0

[cs_email_increase_over_baseline_limit]
definition = 10

[cs_email_user_domain]
definition = ("cyences.com")
# Add the comma separated values inside the brackets.


# Networking
[cs_scanning_basic_scanning_filter]
definition = search *
iseval = 0

[cs_inbound_vulnerable_traffic_filter]
definition = search *
iseval = 0

[cs_tor_traffic_filter]
definition = search *
iseval = 0

[cs_network_home_location_lat]
definition = 41.881832
iseval = 0

[cs_network_home_location_lon]
definition = -87.623177
iseval = 0

[cs_network_traffic_map_filter]
definition = search *
iseval = 0

[cs_network_scanning_map_filter]
definition = search *
iseval = 0

[cs_network_ddos_filter]
definition = search *
iseval = 0

[cs_network_unusual_outbound_traffic_filter]
definition = search *
iseval = 0

# Palo Alto Firewall
[cs_palo]
definition = index=pan_log
iseval = 0

[cs_palo_commit_filter]
definition = search *
iseval = 0

[cs_palo_dns_sinkhole_filter]
definition = search *
iseval = 0

[cs_palo_high_threats_alert_filter]
definition = search *
iseval = 0

[cs_palo_high_system_alerts_filter]
definition = search *
iseval = 0

[cs_palo_wildfire_filter]
definition = search *
iseval = 0

[cs_palo_ddos_prevented_filter]
definition = search *
iseval = 0

[cs_palo_firewall_login_failure_filter]
definition = search *
iseval = 0

[cs_palo_search_blocked_ip_lookup_name]
definition = ip_blocked_list
# Use ip_range_blocked_list lookup if you have blocked ip list with IP CIDR (range) in the lookup
# Lookups must have two fields ip and blocked
# ip - Blocked IP or IP range (CIDR)
# blocked - 1 (all the list is blocked IPs so, keep value as 1)
iseval = 0

[cs_palo_blocked_ip_inbound_filter]
definition = search *
iseval = 0

[cs_palo_blocked_ip_outbound_filter]
definition = search *
iseval = 0

[cs_palo_malicious_ip_list_filter_old_results]
definition = `cs_palo_malicious_ip_list_filter_previous_results("-7d@h")`
# Change the value to keep values in the malicious IP list for longer or shorter time period, the default value is -7d@h (last 7 days)
iseval = 0

[cs_palo_malicious_ip_list_filter]
definition = search *
iseval = 0


# FortiGate Firewall
[cs_fortigate]
definition = index=fortigate
iseval = 0

[cs_fortigate_dns_sinkhole_filter]
definition = search *
iseval = 0

[cs_fortigate_high_threats_alert_filter]
definition = search *
iseval = 0

[cs_fortigate_high_system_alerts_filter]
definition = search *
iseval = 0

[cs_fortigate_dns_sinkhole_ip]
definition = dest_ip="208.91.112.55"
iseval = 0


# Cisco Meraki
[cs_cisco_meraki]
definition = index IN (cisco_meraki, meraki)
iseval = 0

[cs_cisco_meraki_org_security_events_filter]
definition = search *
iseval = 0

[cs_cisco_meraki_config_changes_filter]
definition = search *
iseval = 0

# Sophos Endpoint Protection
[cs_sophos]
definition = index=sophos sourcetype="sophos*"
iseval = 0

[cs_sophos_update_errors_filter]
definition = search *
iseval = 0

[cs_sophos_endpoint_not_protected_filter]
definition = search *
iseval = 0

[cs_sophos_endpoint_outofdate_filter]
definition = search *
iseval = 0

[cs_sophos_realtime_protection_disabled_filter]
definition = search *
iseval = 0

[cs_sophos_service_not_running_filter]
definition = search *
iseval = 0

[cs_sophos_failed_to_cleanup_threat_filter]
definition = search *
iseval = 0

[cs_sophos_core_restore_failed_filter]
definition = search *
iseval = 0

[cs_sophos_expiration_messages_filter]
definition = search *
iseval = 0

[cs_sophos_exploit_prevented]
definition = search *
iseval = 0

[cs_sophos_malware_detected]
definition = search *
iseval = 0

[cs_sophos_potentially_unwanted_application_pua]
definition = search *
iseval = 0

# Sophos Firewall
[cs_sophos_firewall]
definition = index=sophos_firewall
iseval = 0


# Windows Defender
[cs_windows_defender]
definition = index=windefender
iseval = 0

[cs_windows_defender_max_timerange]
definition = earliest=-24h@h latest=now
iseval = 0

[cs_windows_defender_endpoint_not_protected]
definition = search *
iseval = 0

[cs_windows_defender_realtime_protection_disabled_filter]
definition = search *
iseval = 0

[cs_windows_defender_update_errors_filter]
definition = search *
iseval = 0

[cs_windows_defender_antivirus_expired_filter]
definition = search *
iseval = 0

[cs_windows_defender_antivirus_dropped_support_for_os_filter]
definition = search *
iseval = 0

[cs_windows_defender_antivirus_will_expired_filter]
definition = search *
iseval = 0

[cs_windows_defender_antivirus_will_dropped_support_for_os_filter]
definition = search *
iseval = 0

[cs_windows_defender_antivirus_scan_failed_filter]
definition = search *
iseval = 0

[cs_windows_defender_unable_to_download_offline_scan_filter]
definition = search *
iseval = 0

[cs_windows_defender_malware_detected_filter]
definition = search *
iseval = 0

# Crowdstrike
[cs_crowdstrike_devices]
definition = index=crowdstrike sourcetype="crowdstrike:device:json"
iseval = 0

[cs_crowdstrike_vuln]
definition = index=crowdstrike sourcetype="crowdstrike:spotlight:vulnerability*"
iseval = 0

[cs_crowdstrike_eventstream]
definition = index=crowdstrike sourcetype="CrowdStrike:Event:Streams:JSON"
iseval = 0

[cs_crowdstrike_malware_detected_alert_filter]
definition = search *
iseval = 0

[cs_crowdstrike_malware_detected_report_filter]
definition = search *
iseval = 0

[cs_crowdstrike_malware_prevented_filter]
definition = search *
iseval = 0

#kaspersky
[cs_kaspersky]
definition = index=kaspersky
iseval = 0

# Credential Compromise
[cs_attempted_credential_dump_from_registry_via_reg_exe_filter]
definition = search *
iseval = 0

[cs_detect_credential_dumping_through_lsass_access_filter]
definition = search *
iseval = 0

[cs_credential_dumping_via_symlink_to_shadow_copy_filter]
definition = search *
iseval = 0

[cs_credential_dumping_via_copy_command_from_shadow_copy_filter]
definition = search *
iseval = 0


# VPN
[cs_vpn_indexes]
definition = (`cs_palo` OR `cs_fortigate`)
iseval = 0

[cs_vpn_dashboard_filter]
definition = search *
iseval = 0


# Radius Authentication
[cs_radius_authentication_indexes]
definition = index=pan_log*
iseval = 0


# Authentication
[cs_authentication_indexes]
definition = index=*
iseval = 0

[cs_authentication_app_filter]
definition = Authentication.app=*
# Apply filter on Authentication.app field (tstats where condition filter format, you can use !=, =, OR and AND condition)
iseval = 0

[cs_bruteforce_from_user_additional_filter]
definition = (Authentication.error_code!="0xC0000071")
# error_code="0xC0000071" Windows Password Expired events
# Apply filter on Authentication.* field (tstats where condition filter format, you can use !=, =, OR and AND condition)
iseval = 0

[cs_bruteforce_from_source_additional_filter]
definition = (Authentication.error_code!="0xC0000071")
# error_code="0xC0000071" Windows Password Expired events
# Apply filter on Authentication.* field (tstats where condition filter format, you can use !=, =, OR and AND condition)
iseval = 0

[cs_authentication_bruteforce_attempt_limit]
definition = 100
iseval = 0

[cs_authentication_bruteforce_attempt_for_user_filter]
definition = search *
iseval = 0

[cs_authentication_bruteforce_attempt_from_source_filter]
definition = search *
iseval = 0

[cs_authentication_excessive_vpn_login_failure_limit]
definition = 20
iseval = 0

[cs_authentication_excessive_vpn_login_failure_for_user_filter]
definition = search *
iseval = 0

[cs_authentication_excessive_vpn_login_failure_from_source_filter]
definition = search *
iseval = 0

[cs_authentication_successful_vpn_login_outside_home_country_filter]
definition = search *
iseval = 0

[cs_authentication_vpn_login_attemps_outside_working_hour_filter]
definition = search *
iseval = 0

[cs_authentication_new_location_login_pct_limit]
definition = 15
iseval = 0

[cs_authentication_successful_vpn_login_from_unusual_country_filter]
definition = search *
iseval = 0

[cs_authentication_failed_vpn_login_from_unusual_country_filter]
definition = search *
iseval = 0

[cs_authentication_vpn_session_duration_limit]
definition = 87000
iseval = 0

[cs_authentication_vpn_long_running_session_disconnected_filter]
definition = search *
iseval = 0


# Radius Authentication
[cs_radius_authentication_excessive_login_failure_limit]
definition = 20
iseval = 0

[cs_radius_authentication_excessive_login_failure_for_user_filter]
definition = search *
iseval = 0


# Lansweeper
[cs_lansweeper]
definition = index=lansweeper
iseval = 0

[cs_lansweeper_timerange]
definition = earliest=-4h@h latest=now
iseval = 0

[cs_wineventlog_security_timerange]
definition = earliest=-4h@h latest=now
iseval = 0

[cs_wineventlog_system_timerange]
definition = earliest=-4h@h latest=now
iseval = 0

[cs_sysmon_timerange]
definition = earliest=-4h@h latest=now
iseval = 0


# Qualys
[cs_qualys]
definition = index=qualys sourcetype="qualys:*"
iseval = 0

[cs_qualys_timerange]
definition = earliest=-7d@h latest=now
iseval = 0

[cs_qualys_linux_os]
definition = ("*Ubuntu*", "*Linux*", "*CentOS*")
iseval = 0


# Tenable
[cs_tenable]
definition = index IN (tenable, nessus)
iseval = 0

[cs_newly_detected_vuln_filter]
definition = search *
iseval = 0

# Linux/Unix
[cs_linux]
definition = index IN (os, linux)
iseval = 0

[cs_change_in_sudo_access_of_local_linux_account_filter]
definition = search *
iseval = 0

[cs_change_in_user_linux_filter]
definition = search *
iseval = 0

[cs_change_in_group_of_linux_filter]
definition = search *
iseval = 0


# Microsoft 365 Defender ATP
[cs_o365_defender_atp]
definition = index=defenderatp sourcetype="ms:defender:atp:*"

[cs_o365_defender_atp_audit]
definition = index=defenderatp sourcetype="DefenderATPStatusLog"


[cs_o365_defender_atp_alerts_filter]
definition = search *



# AWS
[cs_aws]
definition = index IN (aws,summary)

[cs_aws_login_filter_source]
definition = (sourcetype="aws:cloudtrail" Authentication.signature="ConsoleLogin")

[cs_aws_iam_accesskey_creation_or_deletion_filter]
definition = search *

[cs_aws_iam_login_profile_change_or_update_filter]
definition = search *

[cs_aws_iam_user_creation_or_deletion_filter]
definition = search *

[cs_aws_concurrent_sessions_from_diff_ips_filter]
definition = search *

[cs_aws_console_login_failed_during_mfa_challenge_filter]
definition = search *

[cs_aws_created_policy_version_to_access_resources_filter]
definition = search *

[cs_aws_someone_retrieving_encrypted_admin_password_filter]
definition = search *

[cs_aws_rds_master_user_password_reset_filter]
definition = search *

[cs_aws_bucket_versioning_disabled_filter]
definition = search *

[cs_aws_iam_policy_creation_or_deletion_filter]
definition = search *

[cs_aws_iam_group_change_filter]
definition = search *

[cs_aws_iam_group_membership_change_filter]
definition = search *

[cs_aws_mfa_request_failure_count_limit]
definition = 10

[cs_aws_mfa_is_disabled_for_iam_user_filter]
definition = search *

[cs_aws_network_acl_creation_or_deletion_filter]
definition = search *

[cs_aws_iam_role_creation_or_deletion_filter]
definition = search *

[cs_aws_successful_login_from_unusual_country_filter]
definition = search *

[cs_aws_failed_login_from_unusual_country_filter]
definition = search *

[cs_aws_daily_login_failure_filter]
definition = search *

[cs_aws_failed_login_due_to_mfs_from_unusual_country_filter]
definition = search *


# Google Workspace
[cs_gws]
definition = index=google sourcetype=gws:*

[cs_gws_multiple_password_changes_count_limit]
definition = 3

[cs_gws_multiple_password_changes_filter]
definition = search *

[cs_gws_bulk_user_creation_deletion_count_limit]
definition = 10

[cs_gws_bulk_user_creation_deletion_filter]
definition = search *

[cs_gws_group_change_filter]
definition = search *

[cs_gws_group_membership_change_filter]
definition = search *

[cs_gws_important_group_and_membership_change_event]
definition = "ban_member_with_moderation"

[cs_gws_role_change_filter]
definition = search *

[cs_gws_important_role_change_event]
definition = "UPDATE_ROLE"

[cs_gws_user_change_filter]
definition = search *

[cs_gws_important_user_change_event]
definition = "UNSUSPEND_USER", "UNARCHIVE_USER"

[cs_gws_successful_login_from_unusual_country_filter]
definition = search *

[cs_gws_failed_login_from_unusual_country_filter]
definition = search *

[cs_gws_suspicious_login_by_user_filter]
definition = search *

[cs_gws_daily_login_failure_filter]
definition = search *

[cs_gws_alerts_center_alert_filter]
definition = search * 

[cs_gws_drive_object_shared_outside_filter]
definition = search *

[cs_gws_google_drive_objects_accessed_by_external_user]
definition = search *

[cs_gws_suspicious_file_shared_by_external_user_filter]
definition = search *

[cs_gws_search_suspicious_title]
definition = lookup cs_email_suspicious_subjects_and_title title as doc_title OUTPUT status | search status=True
iseval = 0


# Cisco IOS
[cs_cisco_ios]
definition = index=cisco_ios
iseval = 0

[cs_cisco_ios_new_connection_for_user_filter]
definition = search *
iseval = 0

[cs_cisco_ios_device_failed_login_filter]
definition = search *
iseval = 0
