# Categaries #

# Antivirus
# -----
# 1. CrowdStrike (Antivirus) 
# 2. Office 365 Defender ATP (Antivirus) 
# 3. Sophos Endpoint Protection (Antivirus)
# 4. Windows Defender (Antivirus) 

# Cloud Tenancies
# -----
# 5. AWS (Cloud Tenancies)
# 6. Google Workspace (Cloud Tenancies)
# 7. O365 (Cloud Tenancies)

# Email
# ------
# 8. Email

# Network
# --------
# 9. Network Reports
# 10. Cisco IOS (Network Devices)
# 11. Fortigate Firewall (Network Devices)
# 12. Palo Alto Firewall (Network Devices)
# 13. Sophos Firewall (Network Devices)
# 14. F5 BIGIP (Network Devices) 
# 15. Cisco Meraki


# Vulnerability
# -------
# 16. Vulnerability Scanners 

# Active Directory
# -------
# 17. Active Directory 

# Windows
# --------
# 18. Windows 

# Sysmon
# ---------
# 19. Sysmon 

# Linux
# -------
# 20. Linux/Unix 

# Authentication & VPN
# --------
# 21. Authentication
# 22. VPN
# 23. Radius Authentication


# Database
# ------
# 24. MSSQL
# 25. Oracle

# Other
# ------
# 26. Asset Inventory
# 27. Device Inventory
# 28. User Inventory


# Cron Details
# -------------------
# Every 10 minutes
#   - 1, 3, 4, 5, 6 and 8 's multiples
# Every 15 minutes
#   - 2, 17, 32, 47 th minutes
#   - 7, 22, 37, 52 th minutes
# Every 30 minutes
#   - 9, 39th minutes or 19, 49th minutes
# Hourly
#   - 29, 59th minutes
# Daily, Weekly, Monthly, Yearly
#   - At 0th Minute

# Severity Chart
# -----------------
# 5 - critical
# 4 - high
# 3 - medium
# 2 - low
# 1 - info

# For Dev
# ----------
# Keep savedsearch name/stanza length less than 100 characters (it's limitation when updating the searches via REST calls)


[Sync Filter Macros]
disabled = 0
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = */5 * * * *
description = This report is used for syncing the filter macro param value from savedsearch to the macro.
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | syncfiltermacros

[Cyences Upgrade]
disabled = 0
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 53 * * * *
description = This report is used for doing cyences app upgrade steps if required.
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | cyencesupgrade


[Cyences Fill Users Lookup]
disabled = 0
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = */15 * * * *
description = This report is used to populate the lookup with users created on the Splunk.
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | rest /services/authentication/users splunk_server=local \
| table title, email, realname, roles, type, tz \
| rename title as username, email as user_email, realname as user_fullname, roles as user_roles, type as user_type, tz as user_tz \
| eval user_roles=mvjoin(user_roles, " | ") \
| outputlookup cyences_splunk_user_list.csv


[Cyences Notable Events Lookup Cleanup]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 4 * * 0
description = This report cleans up Cyences notable events lookup every week (sunday early morning) and remove older entries than 1 year.
dispatch.earliest_time = -365d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cyences_notable_event \
| addinfo | where update_time>=info_min_time and update_time<=info_max_time \
| fields - info_* \
| outputlookup cyences_notable_event


[Cyences Digest Email]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
relation = greater than
quantity = 0
cron_schedule = 1 19 * * *
description = Sends All Non-Critical Cyences Alert Notables as Daily Digest Email
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
search = `cs_cyences_index`\
| fields - _raw, alert_name, category, info_min_time, info_max_time, info_search_time, search_now, timestartpos, timeendpos, eventtype, linecount, splunk_server, splunk_server_group, tag, "tag::*", date_*, host, index, source, sourcetype, avoid_es_fields\
| rename * AS X_*_NEW \
| foreach * [ eval newFieldName=replace("<<FIELD>>", "\s+|\.+", "_"), {newFieldName}='<<FIELD>>' ] | fields - "* *", newFieldName \
| foreach X_*_NEW [ eval <<MATCHSTR>>=<<FIELD>> ]\
| fields - X_*_NEW \
| rename orig_* as * \
| `cs_human_readable_time_format(_time, alert_time)` \
| join type=left search_name \
    [| rest /servicesNS/-/cyences_app_for_splunk/saved/searches count=0 splunk_server=local \
    | fields title action.cyences_notable_event_action.teams \
    | rename title as search_name, action.cyences_notable_event_action.teams as teams] \
| table search_name, teams, alert_time, event_tim*, cyences_severity, user*, User*, src*, Source*, *Time, *time, *, notable_event_id
action.cyences_send_digest_email_action = 1



# ======================
# CrowdStrike
# ======================
[CrowdStrike - Suspicious Activity or Malware Detected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert notifies users when CrowdStrike detects a suspicios activity or malware. 
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent \
| `cs_user_privilege_mapping(event.UserName)` \
| eval cyences_severity = case(action=="allowed", "info", 'event.SeverityName'=="Critical" or is_privileged_user="Yes", "critical", 'event.SeverityName'=="High", "high", 'event.SeverityName'=="Medium", "medium", 'event.SeverityName'=="Low", "low", 'event.SeverityName'=="Informational" or 'event.SeverityName'=="Info", "info") \
| table _time, event.ComputerName, action, event.LocalIP, event.UserName, event.DetectDescription, event.DetectName, event.CommandLine, event.MD5String, event.SHA256String, event.ProcessId, event.PatternDispositionDescription, event.ParentCommandLine, event.Objective, event.DetectId, event.FalconHostLink, event.SeverityName, cyences_severity, event.Tactic, event.Technique, event.ProcessStartTime, event.ProcessEndTime, is_privileged_user \
| rename event.* as * | `cs_human_readable_time_format(ProcessStartTime)` | `cs_human_readable_time_format(ProcessEndTime)` \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_crowdstrike_malware_detected_alert_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_crowdstrike_malware_detected_alert_filter
action.cyences_notable_event_action.contributing_events = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent
action.cyences_notable_event_action.system_compromised_search = | stats count by ComputerName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent "event.ComputerName"=$row.ComputerName$
action.cyences_notable_event_action.attacker_search = | stats count by UserName
action.cyences_notable_event_action.attacker_drilldown = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent "event.UserName"=$row.UserName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = CrowdStrike EventStream
action.cyences_notable_event_action.teams = SOC


# ======================
# Office 365 Defender ATP
# ======================
[Defender ATP - Alerts]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert notifies users when there is alert from Microsoft Office 365 Defender ATP.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_defender_atp_alerts`\
| stats count, earliest(_time) as firstTime, latest(_time) as lastTime, last(lastUpdateTime) as lastUpdateTime, last(resolvedTime) as resolvedTime, last(severity) as severity, last(status) as status, last(threatFamilyName) as threatFamilyName, last(threatName) as threatName, last(title) as title, last(investigationState) as investigationState, last(detectionSource) as detectionSource, last(assignedTo) as assignedTo, last(category) as category, last(classification) as classification, last(description) as description, last(incidentId) as incidentId, last(investigationId) as investigationId by detectorId, id, machineId, computerDnsName\
| eval lastUpdateTime=strptime(lastUpdateTime, "%FT%T.%7QZ"), resolvedTime=strptime(resolvedTime, "%FT%T.%7QZ")\
| `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(lastUpdateTime)` | `cs_human_readable_time_format(resolvedTime)`\
| eval cyences_severity = case(severity=="Critical", "critical", severity=="High", "high", severity=="Medium", "medium", severity=="Low", "low", severity=="Informational" or severity=="Info", "info") \
| table computerDnsName, count, firstTime, lastTime, lastUpdateTime, resolvedTime, incidentId, title, threatFamilyName, threatName, category, classification, severity, cyences_severity, status, investigationId, invenstigationState, assignedTo, detectionSource, detectorId, id, machineId\
| `cs_o365_defender_atp_alerts_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_defender_atp_alerts_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_defender_atp_alerts`
action.cyences_notable_event_action.system_compromised_search = | stats count by computerDnsName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365_defender_atp_alerts` computerDnsName=$row.computerDnsName$
action.cyences_notable_event_action.attacker_search = | stats count by title
action.cyences_notable_event_action.attacker_drilldown = `cs_o365_defender_atp_alerts` title=$row.title$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365 Defender ATP
action.cyences_notable_event_action.teams = SOC


[Defender ATP - System is Offboarded]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 54 * * * *
description = This alert notifies when system/device is offboarded
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_defender_atp_audit` \
| dedup host \
| search OnboardingState!="1" \
| table host, status, OnboardingState, LastConnected \
| eval cyences_severity = "high" \
| `cs_o365_defender_atp_system_is_offboarded_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_defender_atp_system_is_offboarded_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_defender_atp_audit` | dedup host
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365_defender_atp_audit` | dedup host | search host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365 Defender ATP
action.cyences_notable_event_action.teams = SOC, Compliance


[Defender ATP - System is not Connected since a Week]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 54 * * * *
description = This alert notifies when system/device is not connected since a week. 
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_defender_atp_audit` \
| dedup host \
| where LastConnectedEpoch < relative_time(now(), "-1w") \
| `cs_alert_suppression("Defender ATP - System is not Connected since a Week", "-24h@m", "host")` \
| table host, status, OnboardingState, LastConnected \
| eval cyences_severity = "high" \
| `cs_o365_defender_atp_system_is_not_connected_since_week_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_defender_atp_system_is_not_connected_since_week_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_defender_atp_audit` | dedup host
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365_defender_atp_audit` | dedup host | search host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365 Defender ATP
action.cyences_notable_event_action.teams = SOC, Compliance


# ==========================
# Sophos Endpoint Protection
# ==========================
[Sophos - Endpoint Not Protected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alert will trigger when a Sophos endpoint is unprotected.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` sourcetype="sophos_events" type="Event::Endpoint::NotProtected" \
| `cs_user_privilege_mapping(user)` \
| stats count, latest(_time) as _time, values(source_info.ip) as src_ip, values(user) as user, values(is_privileged_user) as is_privileged_user by host, location \
| search NOT ( \
    [| inputlookup cs_lansweeper_inventory \
    | search antivirus="Sophos Anti-Virus#0" OR antivirus="Sophos Intercept X#0" \
    | mvexpand antivirus \
    | rex field=antivirus max_match=0 "(?<active_antivirus>[^#]+)#(?<antivirus_enabled>[^n]+)" \
    | search active_antivirus!="Sophos Anti-Virus" active_antivirus!="Sophos Intercept X" antivirus_enabled="1" \
    | dedup AssetName \
    | rename AssetName as location \
    | append \
        [| makeresults \
        | eval location="HOST_TO_RETURN_AT_LEAST_ONE_EVENT" ] \
    | table location \
    | return 10000 location]) \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "high") \
| sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_endpoint_not_protected_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_endpoint_not_protected_filter
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type="Event::Endpoint::NotProtected"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Endpoint Protection 
action.cyences_notable_event_action.teams = SOC


[Sophos - Endpoint RealTime Protection Disabled]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,32 * * * *
description = This alert will trigger when RealTime Protection is disabled on a Sophos endpoint. \
\
A false positive may appear when an administrator might have intentionally disabled RealTime Protection for Sophos endpoint. 
dispatch.earliest_time = 0
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
# Search triggers critical alerts if RealTime Protection is disabled for more than three hours, otherwise it triggers high severity alerts.
# In order to avoid duplicate alerts having high severity, the search is running in 2 diff timeranges and merging its result.
search = `cs_sophos` sourcetype="sophos_events" type="Event::Endpoint::Sav*" earliest=-4h@m latest=-2m@m \
| stats count, latest(_time) as _time, latest(type) as type, values(source_info.ip) as src_ip, values(user) as user by host, location \
| where type=="Event::Endpoint::SavDisabled" and _time < relative_time(now(), "-3h@m") \
| eval cyences_severity = "critical" \
| append  \
    [| search `cs_sophos` sourcetype="sophos_events" type="Event::Endpoint::Sav*" earliest=-32m@m latest=-2m@m \
    | stats count, latest(_time) as _time, latest(type) as type, values(source_info.ip) as src_ip, values(user) as user by host, location \
    | where type=="Event::Endpoint::SavDisabled" \
    | eval cyences_severity = "high" ] \
| sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_realtime_protection_disabled_filter` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_realtime_protection_disabled_filter
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type="Event::Endpoint::SavDisabled"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Endpoint Protection
action.cyences_notable_event_action.teams = SOC


[Sophos - Endpoint Protection Service is Not Running]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alert will trigger when a Sophos endpoint service is no longer running. \
\
A false positive may appear when an administrator might have manually stopped Sophos on an endpoint.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos`  sourcetype="sophos_events" type="Event::Endpoint::ServiceNotRunning" \
| `cs_user_privilege_mapping(user)` \
| stats count, latest(_time) as _time, values(source_info.ip) as src_ip, values(user) as user, values(is_privileged_user) as is_privileged_user by host, location \
| search NOT ( \
    [| inputlookup cs_lansweeper_inventory \
    | search antivirus="Sophos Anti-Virus#0" OR antivirus="Sophos Intercept X#0" \
    | mvexpand antivirus \
    | rex field=antivirus max_match=0 "(?<active_antivirus>[^#]+)#(?<antivirus_enabled>[^n]+)" \
    | search active_antivirus!="Sophos Anti-Virus" active_antivirus!="Sophos Intercept X" antivirus_enabled="1" \
    | dedup AssetName \
    | rename AssetName as location \
    | append \
        [| makeresults \
        | eval location="HOST_TO_RETURN_AT_LEAST_ONE_EVENT" ] \
    | table location \
    | return 10000 location]) \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "high") \
| sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_service_not_running_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_service_not_running_filter
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type="Event::Endpoint::ServiceNotRunning"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Endpoint Protection
action.cyences_notable_event_action.teams = SOC


[Sophos - Failed to CleanUp Threat]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert will trigger when a Sophos Endpoint Protection fails to clean-up a known threat.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search =`cs_sophos` sourcetype="sophos_events" type IN ("Event::Endpoint::Threat::CleanupFailed", "Event::Endpoint::CoreCleanFailed", "Event::Endpoint::CoreHmpaCleanFailed", "Event::Endpoint::CoreSystemCleanFailed") \
| stats count, latest(_time) as _time, values(name) as threat, values(source_info.ip) as src_ip, values(user) as user by host, location | sort -count \
| eval cyences_severity = "critical" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_failed_to_cleanup_threat_filter` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_failed_to_cleanup_threat_filter
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type IN ("Event::Endpoint::Threat::CleanupFailed", "Event::Endpoint::CoreCleanFailed", "Event::Endpoint::CoreHmpaCleanFailed", "Event::Endpoint::CoreSystemCleanFailed")
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Endpoint Protection
action.cyences_notable_event_action.teams = SOC


[Sophos - Failed to CleanUp Potentially Unwanted Application]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert will trigger when a Sophos Endpoint Protection Failes to CleanUp Potentially Unwanted Application.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search =`cs_sophos` sourcetype="sophos_events" type="Event::Endpoint::CorePuaCleanFailed" \
| stats count, latest(_time) as _time, values(name) as threat, values(source_info.ip) as src_ip, values(user) as user by host, location | sort -count \
| eval cyences_severity = "critical" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_potentially_unwanted_application_pua` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_potentially_unwanted_application_pua
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type="Event::Endpoint::CorePuaCleanFailed"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Endpoint Protection
action.cyences_notable_event_action.teams = SOC


# ======================
# Windows Defender
# ======================
[Windows Defender - Endpoint Not Protected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alert notifies users when a Windows Defender endpoint is unprotected.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode IN (2042, 5008, 5012) | dedup host \
| eval EventCodeDescription=case(EventCode=2042, "The antimalware engine no longer supports this operating system, and is no longer protecting your system from malware.", EventCode=5012, "Scanning for viruses is disabled.", EventCode=5008, "The antimalware engine encountered an error and failed.") \
| eval cyences_severity = "high" \
| table _time, cyences_severity, host, EventCode, EventCodeDescription \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_defender_endpoint_not_protected`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_defender_endpoint_not_protected
action.cyences_notable_event_action.contributing_events = `cs_windows_defender` EventCode IN (2042, 5008, 5012)
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_windows_defender` host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows Defender
action.cyences_notable_event_action.teams = SOC


[Windows Defender - RealTime Protection Disabled or Failed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert notifies users when Windows Defender RealTime Protection has failed or been disabled.
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode=3002 OR EventCode=3007 OR EventCode=5001 OR EventCode=5000 \
| eval EventCodeDescription=case(EventCode==3002 ,"3002 - Real-time protection encountered an error and failed.", EventCode==3007 ,"3007 - Real-time protection recovered from a failure.", EventCode==5001 ,"5001 - Real-time protection is disabled.", EventCode==5000 ,"5000 - Real-time protection is enabled.") \
| stats latest(EventCodeDescription) as latest_EventCodeDescription latest(eval(if(EventCode==3002 OR EventCode==5001,_time,null()))) as failed_time latest(eval(if(EventCode==3007 OR EventCode==5000,_time,null()))) as success_time latest(eval(if(EventCode==3002 OR EventCode==5001,EventCodeDescription,null()))) as failed_EventCode latest(eval(if(EventCode==3007 OR EventCode==5000,EventCodeDescription,null()))) as success_EventCode by host \
| where failed_time > success_time OR isnull(success_time) \
| table host latest_EventCodeDescription failed_time \
| search NOT ( \
    [| inputlookup cs_lansweeper_inventory \
    | search antivirus="Windows Defender#0" \
    | mvexpand antivirus \
    | rex field=antivirus max_match=0 "(?<active_antivirus>[^#]+)#(?<antivirus_enabled>[^n]+)" \
    | search active_antivirus!="Windows Defender" antivirus_enabled="1" \
    | dedup AssetName \
    | rename AssetName as host \
    | append \
        [| makeresults \
        | eval host="HOST_TO_RETURN_AT_LEAST_ONE_EVENT" ] \
    | table host \
    | return 10000 host]) \
| eval cyences_severity = "high" \
| `cs_human_readable_time_format(failed_time)` \
| `cs_human_readable_time_format(success_time)` \
| `cs_windows_defender_realtime_protection_disabled_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_defender_realtime_protection_disabled_filter
action.cyences_notable_event_action.contributing_events = `cs_windows_defender` (EventCode IN (5001, 3002) OR (EventCode=1151 AND RTP_state!="Enabled"))
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_windows_defender` host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows Defender
action.cyences_notable_event_action.teams = SOC


[Windows Defender - Malware Detected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert notifies users when Malware Detected by Windows Defender. 
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode IN(1006, 1007, 1008, 1015, 1116, 1117, 1118) \
| fields Detection_Time, Computer, EventCode, Threat_Name, severity, action, Category_Name, Detection_User, Additional_Actions_String, Threat_ID, Detection_ID, Process_Name, Path \
| eval EventCodeDescription=case(EventCode==1006 ,"1006 - Antimalware engine found malware or other potentially unwanted software.", EventCode==1007 ,"1007 - Antimalware platform performed an action to protect your system.", EventCode==1008 ,"1008 - Antimalware platform performed an action to protect your system, but the action failed.", EventCode==1015 ,"1015 - Antimalware platform detected suspicious behavior.", EventCode==1116 ,"1116 - Antimalware platform detected malware or other potentially unwanted software.", EventCode==1117 ,"1117 - Antimalware platform performed an action to protect your system.", EventCode==1118 ,"1118 - Antimalware platform performed an action to protect your system, but the action failed.") \
| `cs_user_privilege_mapping(Detection_User)` \
| stats values(*) as * by Detection_ID, Computer, Threat_ID \
| eval cyences_severity = case(in(action, "blocked", "deleted"), "info", is_privileged_user=="Yes", "critical", true(), severity) \
| eval action = if(mvcount(action)>1, mvfilter(!match(action,"deferred")), action) \
| table Detection_Time, Computer, EventCodeDescription, Threat_Name, severity, cyences_severity, action, Category_Name, Detection_User, Additional_Actions_String, Threat_ID, Detection_ID, Process_Name, Path, is_privileged_user \
| rename Additional_Actions_String as Additional_Action \
| `cs_local_time_conversion(Detection_Time, "%Y-%m-%dT%H:%M:%S.%QZ")` \
| `cs_windows_defender_malware_detected_filter` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_defender_malware_detected_filter
action.cyences_notable_event_action.contributing_events = `cs_windows_defender` EventCode IN (1006, 1015, 1116)
action.cyences_notable_event_action.system_compromised_search = | stats count by Computer
action.cyences_notable_event_action.system_compromised_drilldown = `cs_windows_defender` EventCode IN (1006, 1015, 1116) Computer=$row.Computer$
action.cyences_notable_event_action.attacker_search = | stats count by Threat_Name
action.cyences_notable_event_action.attacker_drilldown = `cs_windows_defender` EventCode IN (1006, 1015, 1116) Threat_Name=$row.Threat_Name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows Defender
action.cyences_notable_event_action.teams = SOC



# ===============
# AWS
# ===============
[AWS - IAM Access Key Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = Alert to detect creation/deletion of access Key for the user.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateAccessKey","DeleteAccessKey") errorCode="success" \
| rename requestParameters.userName as username_for_new_accessKeyId \
| eval accessKeyId=if(eventName="CreateAccessKey", 'responseElements.accessKey.accessKeyId', 'requestParameters.accessKeyId'), accessKeyStatus=coalesce('responseElements.accessKey.status', "-") \
| `cs_user_privilege_mapping(username_for_new_accessKeyId)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "medium") \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, eventName, cyences_severity, userName, userAgent, username_for_new_accessKeyId, accessKeyId, accessKeyStatus, user_arn, awsRegion, is_privileged_user \
| `cs_aws_iam_accesskey_creation_or_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_iam_accesskey_creation_or_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateAccessKey","DeleteAccessKey") errorCode="success" | rename requestParameters.userName as username_for_new_accessKeyId
action.cyences_notable_event_action.system_compromised_search = | stats count by userName, username_for_new_accessKeyId, eventName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateAccessKey","DeleteAccessKey") errorCode="success" userName=$row.userName$ requestParameters.userName=$row.username_for_new_accessKeyId$ eventName=$row.eventName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - IAM Login Profile Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = Alert to detect the change in console login profile of the user.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateLoginProfile","UpdateLoginProfile","DeleteLoginProfile") errorCode="success" \
| rename requestParameters.userName as consoleUserName \
| `cs_user_privilege_mapping(consoleUserName)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "medium") \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, eventName, cyences_severity, userName, userAgent, consoleUserName, user_arn, awsRegion, is_privileged_user \
| `cs_aws_iam_login_profile_change_or_update_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_iam_login_profile_change_or_update_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateLoginProfile","UpdateLoginProfile","DeleteLoginProfile") errorCode="success" | rename requestParameters.userName as consoleUserName
action.cyences_notable_event_action.system_compromised_search = | stats count by userName, consoleUserName, eventName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateLoginProfile","UpdateLoginProfile","DeleteLoginProfile") errorCode="success" userName=$row.userName$ requestParameters.userName=$row.consoleUserName$ eventName=$row.eventName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - IAM User Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = Alert to detect the creation/deletion of the IAM user.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateUser","DeleteUser") errorCode="success" \
| rename requestParameters.userName as target_user \
| `cs_user_privilege_mapping(target_user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "medium", "low") \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, eventName, cyences_severity, userName, userAgent, target_user, user_arn, awsRegion, is_privileged_user \
| `cs_aws_iam_user_creation_or_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_iam_user_creation_or_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateUser","DeleteUser") errorCode="success" | rename requestParameters.userName as target_user
action.cyences_notable_event_action.system_compromised_search = | stats count by userName, target_user, eventName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateUser","DeleteUser") errorCode="success" userName=$row.userName$ requestParameters.userName=$row.target_user$ eventName=$row.eventName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - IAM Policy Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = Alert to detect the creation/deletion of the IAM Policy.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreatePolicy","DeletePolicy") errorCode="success" \
| eval policyArn =if(eventName="CreatePolicy", 'responseElements.policy.arn', 'requestParameters.policyArn') \
| eval cyences_severity = "low" \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, eventName, cyences_severity, userName, userAgent, policyArn, user_arn, awsRegion \
| `cs_aws_iam_policy_creation_or_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_iam_policy_creation_or_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreatePolicy","DeletePolicy") errorCode="success"
action.cyences_notable_event_action.system_compromised_search = | stats count by userName, eventName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreatePolicy","DeletePolicy") errorCode="success" userName=$row.userName$ eventName=$row.eventName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - IAM Group Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = This alert will show the change/update in Group.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateGroup","DeleteGroup", "AttachGroupPolicy", "DetachGroupPolicy") errorCode="success" \
| rename requestParameters.groupName as groupName, requestParameters.policyArn as policyArn \
| eval cyences_severity = "low" \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, eventName, cyences_severity, groupName, userName, policyArn, userAgent, user_arn, awsRegion \
| `cs_aws_iam_group_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_iam_group_change_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateGroup","DeleteGroup", "AttachGroupPolicy", "DetachGroupPolicy") errorCode="success"
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - IAM Group Membership Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = This alert will show the change/update in Group members.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("AddUserToGroup","RemoveUserFromGroup") errorCode="success" \
| rename requestParameters.userName as target_user, requestParameters.groupName as groupName \
| `cs_user_privilege_mapping(target_user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "medium", "low") \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, eventName, cyences_severity, groupName, userName, target_user, userAgent, user_arn, awsRegion, is_privileged_user \
| `cs_aws_iam_group_membership_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_iam_group_membership_change_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("AddUserToGroup","RemoveUserFromGroup") errorCode="success"
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - IAM Role Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = Alert to detect the creation/deletion of the IAM Role.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateRole", "DeleteRole") errorCode="success" \
| rename requestParameters.assumeRolePolicyDocument as assumeRolePolicyDocument, requestParameters.roleName as roleName \
| eval cyences_severity = "low" \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, eventName, cyences_severity, userName, roleName, assumeRolePolicyDocument, userAgent, user_arn, awsRegion \
| `cs_aws_iam_role_creation_or_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_iam_role_creation_or_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventSource="iam.amazonaws.com" eventName IN ("CreateRole", "DeleteRole") errorCode="success"
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Network Access Control List Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = Alert to detect the creation/deletion of the Network ACL.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName IN ("CreateNetworkAclEntry","DeleteNetworkAclEntry") requestParameters.egress="false" errorCode="success" \
| stats count min(_time) as firstTime max(_time) as lastTime by eventName userName user_arn requestParameters.networkAclId src userAgent \
| eval cyences_severity = case(eventName=="DeleteNetworkAclEntry", "medium", true(), "low") \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_aws_network_acl_creation_or_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_network_acl_creation_or_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName IN ("CreateNetworkAclEntry","DeleteNetworkAclEntry") requestParameters.egress="false" errorCode="success"
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Concurrent Sessions From Different IPs]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = Alert identifies an AWS IAM account with concurrent sessions coming from more than one unique IP address within the span of 5 minutes.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName="DescribeEventAggregates" src_ip!="health.amazonaws.com" userAgent!="AWS Internal" \
| bin span=5m _time \
| stats values(userAgent) as userAgent, values(eventName) as eventName, values(awsRegion) as awsRegion, values(src_ip) as src_ip,  dc(src_ip) as distinct_ips by _time user_arn \
| where distinct_ips > 1 \
| eval cyences_severity="high" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_aws_concurrent_sessions_from_diff_ips_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_concurrent_sessions_from_diff_ips_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName="DescribeEventAggregates" src_ip!="health.amazonaws.com" userAgent!="AWS Internal"
action.cyences_notable_event_action.system_compromised_search = | stats count by user_arn
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName="DescribeEventAggregates" src_ip!="health.amazonaws.com" userAgent!="AWS Internal" user_arn=$row.user_arn$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Multiple Failed MFA Requests For User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = The alert triggers when more than 10 MFA user prompts fail within 5 minutes.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName="ConsoleLogin" errorMessage="Failed authentication" additionalEventData.MFAUsed="Yes" \
| bin span=5m _time \
| stats dc(_raw) as mfa_prompts values(userAgent) as userAgent values(src_ip) as src_ip by _time userName aws_account_id awsRegion \
| where mfa_prompts > `cs_aws_mfa_request_failure_count_limit` \
| eval cyences_severity="critical" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_aws_console_login_failed_during_mfa_challenge_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_console_login_failed_during_mfa_challenge_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName="ConsoleLogin" errorMessage="Failed authentication" additionalEventData.MFAUsed="Yes"
action.cyences_notable_event_action.system_compromised_search = | stats count by userName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName="ConsoleLogin" errorMessage="Failed authentication" additionalEventData.MFAUsed="Yes" userName=$row.userName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Created a Policy Version that allows All Resources to be Accessed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = Alert triggers when user creates a policy version that allows them to access any resource in their account.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName="CreatePolicyVersion" eventSource="iam.amazonaws.com" errorCode="success" \
| spath input=requestParameters.policyDocument output=key_policy_statements path=Statement{} \
| mvexpand key_policy_statements \
| spath input=key_policy_statements output=key_policy_action path=Action \
| where key_policy_action="*" \
| stats count min(_time) as firstTime max(_time) as lastTime values(key_policy_statements) as policy_added by eventSource aws_account_id userAgent awsRegion userName user_arn \
| eval cyences_severity="medium" \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_aws_created_policy_version_to_access_resources_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_created_policy_version_to_access_resources_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName="CreatePolicyVersion" eventSource="iam.amazonaws.com" errorCode="success"
action.cyences_notable_event_action.system_compromised_search = | stats count by userName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName="CreatePolicyVersion" eventSource="iam.amazonaws.com" errorCode="success" userName=$row.userName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


# TODO - This alert is not tested as data is not available.
[AWS - Someone Tries to Retrieve the Encrypted Administrator Password]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = Alert identifies more than 10 GetPasswordData API calls made to your AWS account with a time window of 5 minutes.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName="GetPasswordData" eventSource="ec2.amazonaws.com" \
| bin _time span=5m \
| stats count values(errorCode) as errorCode dc(requestParameters.instanceId) as distinct_instance_ids values(requestParameters.instanceId) as instance_ids by aws_account_id src_ip user_arn userName userAgent _time \
| where distinct_instance_ids > 10 \
| eval cyences_severity="critical" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_aws_someone_retrieving_encrypted_admin_password_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_someone_retrieving_encrypted_admin_password_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName="GetPasswordData" eventSource="ec2.amazonaws.com"
action.cyences_notable_event_action.system_compromised_search = | stats count by src_ip, userName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName="GetPasswordData" eventSource="ec2.amazonaws.com" src_ip=$row.src_ip$ userName=$row.userName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - RDS Master User Password has been Reset]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = Alert triggers when master user password for Amazon RDS DB instance is reset using the Amazon RDS console.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventSource="rds.amazonaws.com" eventName="ModifyDBInstance" "requestParameters.masterUserPassword"=* \
| stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.dBInstanceIdentifier) as DB by src_ip awsRegion userName userAgent user_arn \
| eval cyences_severity="medium" \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_aws_rds_master_user_password_reset_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_rds_master_user_password_reset_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventSource="rds.amazonaws.com" eventName="ModifyDBInstance" "requestParameters.masterUserPassword"=*
action.cyences_notable_event_action.system_compromised_search = | stats count by src_ip, userName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventSource="rds.amazonaws.com" eventName="ModifyDBInstance" "requestParameters.masterUserPassword"=* src_ip=$row.src_ip$ userName=$row.userName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Bucket Versioning is Disabled]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = Alert triggers when bucket versioning is suspended by a user and due to that client can't recover the s3 bucket data.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName="PutBucketVersioning" "requestParameters.VersioningConfiguration.Status"="Suspended" errorCode="success" \
|  stats count values(requestParameters.bucketName) as bucket_name values(resources{}.ARN) as resource_arn by src_ip aws_account_id awsRegion userAgent userName user_arn userIdentity.principalId _time \
| eval cyences_severity="low" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_aws_bucket_versioning_disabled_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_bucket_versioning_disabled_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName="PutBucketVersioning" "requestParameters.VersioningConfiguration.Status"="Suspended" errorCode="success"
action.cyences_notable_event_action.system_compromised_search = | stats count by src_ip, userName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName="PutBucketVersioning" "requestParameters.VersioningConfiguration.Status"="Suspended" errorCode="success" src_ip=$row.src_ip$ userName=$row.userName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - MFA is Disabled for IAM User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = Alert triggers when multi-factor authentication is disabled for an AWS IAM user.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName IN ("DeactivateMFADevice") \
| rename requestParameters.userName as target_user \
| table _time, eventName, eventSource, aws_account_id, userAgent, userName, user_arn, target_user, status, awsRegion \
| eval cyences_severity="critical" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_aws_mfa_is_disabled_for_iam_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_mfa_is_disabled_for_iam_user_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName IN ("DeleteVirtualMFADevice", "DeactivateMFADevice") | rename requestParameters.userName as target_user
action.cyences_notable_event_action.system_compromised_search = | stats count by eventName, target_user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName IN ("DeleteVirtualMFADevice", "DeactivateMFADevice") requestParameters.userName=$row.target_user$ userName=$row.userName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Successful Login From Unusual Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 13,28,43,58 * * * *
description = A Successful AWS Login From Unusual Country.
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="success" `cs_public_ips(src)` \
| fields _time user src authentication_method app awsRegion \
| eval user = lower(user) \
| stats count, values(*) as *, max(_time) as Last_Success_Login by user, src \
| iplocation src \
| `cs_current_week_login_count(aws:cloudtrail)` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 or is_privileged_user=="Yes", "critical", true(), "medium") \
| table user, src, count, cyences_severity, Country, Region, City, awsRegion, percentage_login_from_country, usual_login_location, Last_Success_Login, authentication_method, reason, is_privileged_user \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_aws_successful_login_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_successful_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="success" `cs_public_ips(src)` | iplocation src
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="success" `cs_public_ips(src)` user=$row.user$ | iplocation src
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Failed Login From Unusual Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = A Failed AWS Login From Unusual Country. 
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" `cs_public_ips(src)` \
| fields _time user src authentication_method app awsRegion \
| eval user = lower(user) \
| stats count, values(*) as *, max(_time) as Last_Failed_Login by user, src \
| iplocation src \
| `cs_current_week_login_count(aws:cloudtrail)` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 or is_privileged_user=="Yes", "critical", true(), "medium") \
| where count > 5 \
| table user, src, count, cyences_severity, Country, Region, City, awsRegion, percentage_login_from_country, usual_login_location, Last_Failed_Login, authentication_method, reason, is_privileged_user \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_aws_failed_login_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_failed_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" `cs_public_ips(src)` | iplocation src
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" `cs_public_ips(src)` user=$row.user$ | iplocation src
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Daily Login Failure]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will show the daily Login failure.
dispatch.earliest_time = -25h@m
dispatch.latest_time = -1h@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" \
| stats count, values(authentication_method) as authentication_method, values(awsRegion) as awsRegion, max(_time) as Last_Failed_Login by user, src \
| iplocation src \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| fillnull value="-" Country, Region, City \
| eventstats sum(count) as total_count_by_user by user \
| eval cyences_severity = "low" \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| sort - total_count_by_user, user, count \
| table user, total_count_by_user, src, count, cyences_severity, Country, Region, City, awsRegion, Last_Failed_Login, authentication_method \
| `cs_aws_daily_login_failure_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_daily_login_failure_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" user=$row.user$
action.cyences_notable_event_action.attacker_search = | stats count by authentication_method
action.cyences_notable_event_action.attacker_drilldown = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" authentication_method=$row.authentication_method$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC


[AWS - Login Failure From Unusual Country Due To MFA]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the login failure from Unusual Country due to multi factor authentication.
dispatch.earliest_time = -31m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" authentication_method="MFA" `cs_public_ips(src)` \
| fields _time user src authentication_method errorMessage app awsRegion user_type \
| eval user = lower(user) \
| stats count, values(*) as *, max(_time) as Last_Failed_Login by user, src \
| iplocation src \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| `cs_current_week_login_count(aws:cloudtrail)` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 or is_privileged_user=="Yes" or user_type=="Root", "critical", true(), "medium") \
| table user, src, count, cyences_severity, Country, Region, City, percentage_login_from_country, reason, usual_login_location, Last_Failed_Login, user_type, authentication_method, errorMessage, app, awsRegion, is_privileged_user \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_aws_failed_login_due_to_mfa_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_aws_failed_login_due_to_mfa_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" authentication_method="MFA" `cs_public_ips(src)` | iplocation src
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" authentication_method="MFA" `cs_public_ips(src)` user=$row.user$ | iplocation src
action.cyences_notable_event_action.attacker_search = | stats count by errorMessage
action.cyences_notable_event_action.attacker_drilldown = `cs_aws_cloudtrail_logs` eventName IN ("ConsoleLogin") errorCode="failure" authentication_method="MFA" `cs_public_ips(src)` errorMessage=$row.errorMessage$ | iplocation src
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = AWS
action.cyences_notable_event_action.teams = SOC



# =================
# Google Workspace
# =================

# Refer https://support.google.com/a/answer/7061566?hl=en for the google data lag.

[Google Workspace - Bulk User Creation or Deletion]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 55 * * * *
description = This alert will show if users being created or deleted in bulk.
dispatch.earliest_time = -4h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws` sourcetype="gws:reports:admin" "event.name" IN ("CREATE_USER", "DELETE_USER") _index_earliest=-61m@m _index_latest=-1m@m \
| rename "actor.email" as admin \
| fields _time, action, admin, user \
| `cs_user_privilege_mapping(user)` \
| eval users_created=if(action=="created", user, null()), users_deleted=if(action=="deleted", user, null()) \
| stats count as total_actions, count(eval(action=="created")) as no_users_created, values(users_created) as users_created, count(eval(action=="deleted")) as no_users_deleted, values(users_deleted) as users_deleted, values(is_privileged_user) as is_privileged_user by admin \
| where total_actions>=`cs_gws_bulk_user_creation_deletion_count_limit` \
| eval cyences_severity = if(is_privileged_user=="Yes", case(total_actions>3*`cs_gws_bulk_user_creation_deletion_count_limit`, "critical", true(), "high"), case(total_actions>5*`cs_gws_bulk_user_creation_deletion_count_limit`, "critical", total_actions>3*`cs_gws_bulk_user_creation_deletion_count_limit`, "high", true(), "medium")) \
| `cs_gws_bulk_user_creation_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_bulk_user_creation_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_gws` sourcetype="gws:reports:admin" "event.name" IN ("CREATE_USER", "DELETE_USER")
action.cyences_notable_event_action.attacker_search = | stats count by admin
action.cyences_notable_event_action.attacker_drilldown = `cs_gws` sourcetype="gws:reports:admin" "event.name" IN ("CREATE_USER", "DELETE_USER") | rename "actor.email" as admin | search admin=$row.admin|s$ | stats count by user
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


# TODO - Try to add the old_value and new_value field if its extraction works.
[Google Workspace - User Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 55 * * * *
description = This alert will show the change/update in Group members.
dispatch.earliest_time = -4h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws` sourcetype="gws:reports:admin" "event.name" IN ("*USER*") NOT "event.name" IN ("CHANGE_CHROME_OS_USER_SETTING", "DOWNLOAD_USERLIST_CSV") _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_user_privilege_mapping(user_email)` \
| eval cyences_severity = case( in('event.name', `cs_gws_important_user_change_event`) or is_privileged_user=="Yes", "critical", in('event.name', "SUSPEND_USER", "ARCHIVE_USER", "RENAME_USER", "USER_LICENSE_ASSIGNMENT", "USER_LICENSE_REVOKE"), "medium", true(), "low") \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_gws_user_change_filter`  \
| table event_time, cyences_severity, actor.email, event.name, user_email, is_privileged_user
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_user_change_filter
action.cyences_notable_event_action.contributing_events = `cs_gws` sourcetype="gws:reports:admin" "event.name" IN ("*USER*") NOT "event.name" IN ("CHANGE_CHROME_OS_USER_SETTING", "DOWNLOAD_USERLIST_CSV")
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Group Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 56 * * * *
description = This alert will show the change/update in Group.
dispatch.earliest_time = -6h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
# This search excludes the events having event.name related to members, users and joining request. 
search = `cs_gws` sourcetype="gws:reports:groups_enterprise" NOT "event.name" IN ("*member*", "*user*", "*join*") _index_earliest=-61m@m _index_latest=-1m@m \
| rex field=_raw "\"name\": \"info_setting\", \"value\": \"(?<info_setting>[^\"]*)\"" \
| rex field=_raw "\"name\": \"old_value\", \"value\": \"(?<old_value>[^\"]*)\"" \
| rex field=_raw "\"name\": \"new_value\", \"value\": \"(?<new_value>[^\"]*)\"" \
| eval ModifiedProperties = info_setting." ::: ".old_value." --> ".new_value \
| eval cyences_severity = case( in('event.name', `cs_gws_important_group_and_membership_change_event`), "medium", true(), "low")  \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_gws_group_change_filter`  \
| table event_time, cyences_severity, actor.email, event.name, group_id, ModifiedProperties
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_group_change_filter
action.cyences_notable_event_action.contributing_events = `cs_gws` sourcetype="gws:reports:groups_enterprise" NOT "event.name" IN ("*member*", "*user*", "*join*")
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Group Membership Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 56 * * * *
description = This alert will show the change/update in Group members. 
dispatch.earliest_time = -6h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
# This search includes the events having event.name related to members. 
# Here, user related events are not considered because members and users related events are similar (i.e. if "add user to the group" action occurs then 2 same events with event.name add_member and add_user will be ingested)
search = `cs_gws` sourcetype="gws:reports:groups_enterprise" "event.name" IN ("*member*") _index_earliest=-61m@m _index_latest=-1m@m \
| rex field=_raw "\"name\": \"member_role\", \"multiValue\": \[(?<member_role>[^]]*)\]" \
| rex mode=sed "s/\"//g" field=member_role \
| `cs_user_privilege_mapping(member_id)` \
| eval cyences_severity = case( in('event.name', `cs_gws_important_group_and_membership_change_event`) or is_privileged_user=="Yes", "medium", true(), "low") \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_gws_group_membership_change_filter`  \
| table event_time, cyences_severity, actor.email, event.name, group_id, member_id, member_type, member_role, is_privileged_user
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_group_membership_change_filter
action.cyences_notable_event_action.contributing_events = `cs_gws` sourcetype="gws:reports:groups_enterprise" "event.name" IN ("*member*")
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Role Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = This alert will show the change/update in Role. 
dispatch.earliest_time = -4h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws` sourcetype="gws:reports:admin" "event.name" IN ("*ROLE*") _index_earliest=-61m@m _index_latest=-1m@m \
| dedup _time, actor.email, event.name, role_name, user \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case( in('event.name', `cs_gws_important_role_change_event`) or is_privileged_user=="Yes", "medium", true(), "low") \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_gws_role_change_filter` \
| table event_time, cyences_severity, actor.email, event.name, role_name, user, is_privileged_user
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_role_change_filter
action.cyences_notable_event_action.contributing_events = `cs_gws` sourcetype="gws:reports:admin" "event.name" IN ("*ROLE*")
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Multiple Password Changes in a Short Period of Time]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = This alert will show if user made multiple password changes in the last hours.
dispatch.earliest_time = -12h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws_login_events` "event.name"="password_edit" _index_earliest=-61m@m _index_latest=-1m@m \
| stats latest(_time) as _time, count, values(ipAddress) as ipAddress by user \
| where count>=`cs_gws_multiple_password_changes_count_limit` \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", case(count>3*`cs_gws_multiple_password_changes_count_limit`, "critical", true(), "high"), case(count>5*`cs_gws_multiple_password_changes_count_limit`, "critical", count>3*`cs_gws_multiple_password_changes_count_limit`, "high", true(), "medium")) \
| sort - count \
| `cs_gws_multiple_password_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_multiple_password_changes_filter
action.cyences_notable_event_action.contributing_events = `cs_gws_login_events` "event.name"="password_edit"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count, values(ipAddress) as ipAddress by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_gws_login_events` "event.name"="password_edit" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Successful Login From Unusual Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 13,28,43,58 * * * *
description = A Successful GWS Login From Unusual Country. 
dispatch.earliest_time = -12h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws_login_events` "event.name"="login_success" `cs_public_ips(ipAddress)` _index_earliest=-16m@m _index_latest=-1m@m \
| fields _time user ipAddress login_challenge_method app \
| eval user = lower(user) \
| stats count, values(*) as *, max(_time) as Last_Success_Login by user, ipAddress \
| iplocation ipAddress \
| `cs_current_week_login_count(gws:reports:login)` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 or is_privileged_user=="Yes", "critical", true(), "medium") \
| table user, ipAddress, count, cyences_severity, Country, Region, City, percentage_login_from_country, usual_login_location, Last_Success_Login, login_challenge_method, reason, is_privileged_user \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_gws_successful_login_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_successful_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_gws_login_events` "event.name"="login_success" `cs_public_ips(ipAddress)` | iplocation ipAddress
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_gws_login_events` "event.name"="login_success" `cs_public_ips(ipAddress)` user=$row.user$ | iplocation ipAddress
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Failed Login From Unusual Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = A Failed GWS Login From Unusual Country.
dispatch.earliest_time = -12h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws_login_events` _index_earliest=-61m@m _index_latest=-1m@m "event.name"="login_failure" `cs_public_ips(ipAddress)` \
| fields _time user ipAddress login_challenge_method app \
| eval user = lower(user) \
| stats count, values(*) as *, max(_time) as Last_Failed_Login by user, ipAddress \
| iplocation ipAddress \
| `cs_current_week_login_count(gws:reports:login)` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 or is_privileged_user=="Yes", "critical", true(), "medium") \
| where count > 5 \
| table user, ipAddress, count, cyences_severity, Country, Region, City, percentage_login_from_country, usual_login_location, Last_Failed_Login, login_challenge_method, reason, is_privileged_user \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_gws_failed_login_from_unusual_country_filter` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_failed_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_gws_login_events` "event.name"="login_failure" `cs_public_ips(ipAddress)` | iplocation ipAddress
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_gws_login_events` "event.name"="login_failure"`cs_public_ips(ipAddress)` user=$row.user$ | iplocation ipAddress
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Suspicious Login Activity by User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the suspicious login activity. 
dispatch.earliest_time = -12h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws_login_events` "event.name"="suspicious_login" _index_earliest=-31m@m _index_latest=-1m@m \
| stats count, values(ipAddress) as ipAddress, max(_time) as Last_Success_Login by user \
| iplocation ipAddress \
| fields - lat lon \
| sort - count \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "medium", "low") \
| `cs_gws_suspicious_login_by_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_suspicious_login_by_user_filter
action.cyences_notable_event_action.contributing_events = `cs_gws_login_events` "event.name"="suspicious_login"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_gws_login_events` "event.name"="suspicious_login" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Daily Login Failure]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will show the daily Login failure.
dispatch.earliest_time = -2d@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws_login_events` "event.name"="login_failure" _index_earliest=-25h@m _index_latest=-1h@m \
| stats count, values(login_challenge_method) as login_challenge_method, max(_time) as Last_Failed_Login by user, ipAddress \
| iplocation ipAddress \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| fillnull value="-" Country, Region, City \
| eventstats sum(count) as total_count_by_user by user \
| eval cyences_severity = "info" \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| sort - total_count_by_user, user, count \
| `cs_gws_daily_login_failure_filter` \
| table user, total_count_by_user, ipAddress, count, cyences_severity, Country, Region, City, Last_Failed_Login, login_challenge_method
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_daily_login_failure_filter
action.cyences_notable_event_action.contributing_events = `cs_gws_login_events` "event.name"="login_failure"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_gws_login_events` "event.name"="login_failure" user=$row.user$
action.cyences_notable_event_action.attacker_search = | stats count by login_challenge_method
action.cyences_notable_event_action.attacker_drilldown = `cs_gws_login_events` "event.name"="login_failure" login_challenge_method=$row.login_challenge_method$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Alerts Center Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 30 * * * *
description = This alert will show the google alert center's alert.
dispatch.earliest_time = -6h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws` sourcetype="gws:alerts" _index_earliest=-61m@m _index_latest=-1m@m \
| dedup alertId \
| `cs_human_readable_time_format(_time, event_time)` \
| rename type as alert_type, metadata.status as status, severity as cyences_severity \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", cyences_severity) \
| `cs_gws_alerts_center_alert_filter` \
| table event_time, user, cyences_severity, alert_type, event_type, description, status, is_privileged_user
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_alerts_center_alert_filter
action.cyences_notable_event_action.contributing_events = `cs_gws` sourcetype="gws:alerts"
action.cyences_notable_event_action.attacker_search = | stats count by event_type
action.cyences_notable_event_action.attacker_drilldown = `cs_gws` sourcetype="gws:alerts" event_type=$row.event_type$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Google Drive objects accessed by External User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description =  The alert will generate if google drive or google docs files accessed by external user. \
NOTE: cs_email_user_domain macro must be configured with the domain name in order to use this alert.
dispatch.earliest_time = -6h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws` sourcetype="gws:reports:drive" _index_earliest=-61m@m _index_latest=-1m@m \
| rex field=owner "[^@]+@(?<src_domain>[^@]+)" \
| rex field=email "[^@]+@(?<dest_domain>[^@]+)" \
| where isnotnull(src_domain) AND isnotnull(dest_domain) \
| search src_domain IN `cs_email_user_domain` AND NOT dest_domain IN `cs_email_user_domain` \
| `cs_user_privilege_mapping(owner)` \
| stats values(doc_title) as doc_title, values(doc_type) as doc_type, values(event.name) as event.name, values(owner) as owner_email_list, values(is_privileged_user) as is_privileged_user, values(visibility) as visibility, count, min(_time) as firstTime, max(_time) as lastTime by email \
| rename email as external_email \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "medium") \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_gws_google_drive_objects_accessed_by_external_user`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_google_drive_objects_accessed_by_external_user
action.cyences_notable_event_action.contributing_events =`cs_gws` sourcetype="gws:reports:drive" | rex field=owner "[^@]+@(?<src_domain>[^@]+)" | rex field=email "[^@]+@(?<dest_domain>[^@]+)" | where isnotnull(src_domain) AND isnotnull(dest_domain) | search src_domain IN `cs_email_user_domain` AND NOT dest_domain IN `cs_email_user_domain`
action.cyences_notable_event_action.system_compromised_search = | stats count by external_email
action.cyences_notable_event_action.system_compromised_drilldown = `cs_gws` sourcetype="gws:reports:drive" | rex field=owner "[^@]+@(?<src_domain>[^@]+)" | rex field=email "[^@]+@(?<dest_domain>[^@]+)" | where isnotnull(src_domain) AND isnotnull(dest_domain) | search src_domain IN `cs_email_user_domain` AND NOT dest_domain IN `cs_email_user_domain` | search email=$row.external_email$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC


[Google Workspace - Google Drive objects shared Outside or with External User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description =The alert will generate if google drive or google docs files shared outside or externally. \
NOTE: cs_email_user_domain macro must be configured with the domain name in order to use this alert. 
dispatch.earliest_time = -6h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gws` sourcetype="gws:reports:drive" "event.type"=acl_change visibility IN ("shared_externally","people_with_link") _index_earliest=-61m@m _index_latest=-1m@m \
| rex field=actor.email "[^@]+@(?<src_domain>[^@]+)" \
| rex field=target_user "[^@]+@(?<dest_domain>[^@]+)" \
| where isnotnull(src_domain) AND isnotnull(dest_domain) \
| search src_domain IN `cs_email_user_domain` AND NOT dest_domain IN `cs_email_user_domain` \
| rename actor.email as actor\
| stats values(doc_title) as doc_title, values(doc_type) as doc_type, values(event.name) as event.name, values(target_user) as dst_email_list, values(visibility) as visibility, count, min(_time) as firstTime, max(_time) as lastTime by actor \
| `cs_user_privilege_mapping(actor)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "medium") \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_gws_drive_object_shared_outside_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gws_drive_object_shared_outside_filter
action.cyences_notable_event_action.contributing_events =  `cs_gws` sourcetype="gws:reports:drive" "event.type"=acl_change visibility IN ("shared_externally","people_with_link") | rex field=actor.email "[^@]+@(?<src_domain>[^@]+)" | rex field=target_user "[^@]+@(?<dest_domain>[^@]+)" | where isnotnull(src_domain) AND isnotnull(dest_domain) | search src_domain IN `cs_email_user_domain` AND NOT dest_domain IN `cs_email_user_domain`
action.cyences_notable_event_action.system_compromised_search = | stats count by actor
action.cyences_notable_event_action.system_compromised_drilldown =   `cs_gws` sourcetype="gws:reports:drive" "event.type"=acl_change visibility IN ("shared_externally","people_with_link") | rex field=actor.email "[^@]+@(?<src_domain>[^@]+)" | rex field=target_user "[^@]+@(?<dest_domain>[^@]+)" | where isnotnull(src_domain) AND isnotnull(dest_domain) | search src_domain IN `cs_email_user_domain` AND NOT dest_domain IN `cs_email_user_domain` |search actor.email=$row.actor$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Google Workspace
action.cyences_notable_event_action.teams = SOC

# This alert has been removed and commented here for future reference as it contains a static list of suspicious file titles, which is not maintainable and causes false positives.
# [Google Workspace - Suspicious File Shared by External User on Google Drive]


# TODO - Add DLP alert (regarding sharing the sensitive info) from gws:alerts sourcetype (required subscription to generate events)
# TODO - Add MFA/2FA login failure alerts for event.name=login_challenge



# ==============
# Office 365 (O365)
# ==============
[O365 - DLP Event in Exchange]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 0,6,12,18 * * *
description = This alert will pinpoint when there's an Office 365 data loss prevention event in Microsoft Exchange. \
\
The user has to enable the DLP rules on the Office 365 (https://docs.microsoft.com/en-us/microsoft-365/compliance/create-test-tune-dlp-policy?view=o365-worldwide).\
\
A false positive could be generated when the query itself lacks a false positive, but the DLP rules for Office 365 might contain some. 
dispatch.earliest_time = -1d@h
dispatch.latest_time = +1d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` _index_earliest=-361m@m _index_latest=-1m@m Workload=Exchange UserId=DlpAgent \
| rename "ExchangeMetaData.From" as From, "ExchangeMetaData.To{}" as To, "ExchangeMetaData.CC{}" as CC, "ExchangeMetaData.BCC{}" as BCC, "ExchangeMetaData.Subject" as Subject, "PolicyDetails{}.PolicyName" as PolicyName, "PolicyDetails{}.Rules{}.RuleName" as RuleName, "PolicyDetails{}.Rules{}.Actions{}" as RuleActions, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.Location" as SensitiveInformationLocation, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.SensitiveInformationTypeName" as SensitiveInformationType, "ExchangeMetaData.FileSize" as fs \
| convert auto(fs) | eval EmailSizeInKB=round(tonumber(fs)/1024, 2) \
| eval cyences_severity = "medium" \
| table _time, cyences_severity, host, Subject, From, To, CC, BCC, EmailSizeInKB, PolicyName, RuleName, RuleActions, SensitiveInformationType, SensitiveInformationLocation \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_dlp_exchange_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_dlp_exchange_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` Workload=Exchange UserId=DlpAgent
action.cyences_notable_event_action.system_compromised_search = | eval Email_To=mvappend(mvappend(To, CC), BCC) | mvexpand Email_To | stats count by Email_To
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` Workload=Exchange UserId=DlpAgent | rename "ExchangeMetaData.From" as From, "ExchangeMetaData.To{}" as To, "ExchangeMetaData.CC{}" as CC, "ExchangeMetaData.BCC{}" as BCC | search (To=$row.Email_To$ OR CC=$row.Email_To$ OR BCC=$row.Email_To$)
action.cyences_notable_event_action.attacker_search = | stats count by From
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` Workload=Exchange UserId=DlpAgent | rename "ExchangeMetaData.From" as From, "ExchangeMetaData.To{}" as To, "ExchangeMetaData.CC{}" as CC, "ExchangeMetaData.BCC{}" as BCC | search From=$row.From$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[O365 - DLP Event in SharePoint]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 0,6,12,18 * * *
description = This alert will pinpoint when there's an Office 365 data loss prevention event in Microsoft SharePoint. \
\
The user has to enable the DLP rules on the Office 365 (https://docs.microsoft.com/en-us/microsoft-365/compliance/create-test-tune-dlp-policy?view=o365-worldwide).\
\
A false positive could be generated when the query itself lacks a false positive, but the DLP rules for SharePoint might contain some.
dispatch.earliest_time = -1d@h
dispatch.latest_time = +1d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` _index_earliest=-361m@m _index_latest=-1m@m Workload=SharePoint UserId=DlpAgent \
| rename "SharePointMetaData.From" as From, "SharePointMetaData.FileName" as FileName, "SharePointMetaData.FileOwner" as FileOwner, "SharePointMetaData.DocumentLastModifier" as User, "SharePointMetaData.FilePathUrl" as FilePathUrl, "PolicyDetails{}.PolicyName" as PolicyName, "PolicyDetails{}.Rules{}.RuleName" as RuleName, "PolicyDetails{}.Rules{}.Actions{}" as RuleActions, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.Location" as SensitiveInformationLocation, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.SensitiveInformationTypeName" as SensitiveInformationType \
| `cs_user_privilege_mapping(User)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "medium") \
| table _time, cyences_severity, host, FileName, From, User, FileOwner, FilePathUrl, PolicyName, RuleName, RuleActions, SensitiveInformationType, SensitiveInformationLocation, is_privileged_user \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_dlp_sharepoint_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_dlp_sharepoint_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` Workload=SharePoint UserId=DlpAgent
action.cyences_notable_event_action.system_compromised_search = | stats count by FileName, FilePathUrl
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` Workload=SharePoint UserId=DlpAgent | rename "SharePointMetaData.From" as From, "SharePointMetaData.FileName" as FileName, "SharePointMetaData.FilePathUrl" as FilePathUrl | search FileName=$row.FileName$
action.cyences_notable_event_action.attacker_search = | stats count by From
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` Workload=SharePoint UserId=DlpAgent | rename "SharePointMetaData.From" as From, "SharePointMetaData.FileName" as FileName, "SharePointMetaData.FilePathUrl" as FilePathUrl | search From=$row.From$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[O365 - O365 Service is Not Operational]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will trigger when O365 service is not in operational state.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` _index_earliest=-61m@m _index_latest=-1m@m (sourcetype="o365:service:healthIssue" OR (sourcetype="o365:service:status" source="*CurrentStatus")) \
| eval Status = coalesce(status, Status), Service = coalesce(service, WorkloadDisplayName) \
| stats latest(Status) as Status latest(_time) as _time by Service host \
| search Status IN ("ExtendedRecovery","InformationUnavailable","Investigating*","RestoringService","ServiceDegradation","ServiceInterruption") \
| `cs_human_readable_time_format(_time, LastUpdatedTime)` \
| eval cyences_severity = "medium" \
| table LastUpdatedTime cyences_severity host Service Status \
| sort host Status | `cs_o365_service_not_operational_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_service_not_operational_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` (sourcetype="o365:service:healthIssue" OR (sourcetype="o365:service:status" source="*CurrentStatus")) | eval Status = coalesce(status, Status), Service = coalesce(service, WorkloadDisplayName)
action.cyences_notable_event_action.system_compromised_search = | stats count by Service
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` (sourcetype="o365:service:healthIssue" OR (sourcetype="o365:service:status" source="*CurrentStatus")) | eval Status = coalesce(status, Status), Service = coalesce(service, WorkloadDisplayName) | search Service=$row.Service$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = Compliance


[O365 - External User Added to Microsoft Teams]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will pinpoint when external user added to teams.
dispatch.earliest_time = -2d@h
dispatch.latest_time = +2d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-25h@m _index_latest=-1h@m Workload=MicrosoftTeams Operation=MemberAdded Members{}.UPN=*\#ext\#* \
| rename Members{}.UPN AS memberUpn \
| eval UserId =lower(UserId)  | rex field=UserId "@(?<src_domain>.*)" \
| eval memberUpn =lower(memberUpn)  | rex field=memberUpn "(?<email>.*)\#ext\#" | rex mode=sed field=email "s/_(?!.*_)/@/g" | rex field=email "@(?<target_domain>.*)" \
| where target_domain != src_domain \
| `cs_user_privilege_mapping(email)` \
| stats values(email) as email, values(target_domain) as target_domain, values(ClientIP) as ClientIP, values(is_privileged_user) as is_privileged_user by CreationTime, CommunicationType, ItemName, UserId, src_domain \
| fields CreationTime, email, CommunicationType, ItemName, ClientIP, UserId, target_domain, is_privileged_user \
| rename CreationTime AS "Timestamp" ItemName AS "Item Name" UserId AS "Added By" email AS "External User" CommunicationType AS "Added To" target_domain AS "External Domain" \
| eval cyences_severity = if(is_privileged_user=="Yes", "medium", "low") \
| `cs_o365_external_users_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_external_users_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=MicrosoftTeams Operation=MemberAdded Members{}.UPN=*\#ext\#*
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[Azure AD - AuthorizationPolicy Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the change/update in AuthorizationPolicy.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_azure_ad_changes("AuthorizationPolicy")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_authorizationpolicy_change_internal_filter` \
| eval additional_details = mvzip(key, value, " = ") \
| table _time, Actor, Command, Target_ObjectID, Target_userPrincipalName, Target_DisplayName, displayName, oldValue, newValue, ResultStatus, modified_properties, additional_details \
| azureadmodifiedpropertiesformatter old_value_field=oldValue new_value_field=newValue property_name_field=displayName field_to_update=modified_properties additional_fields=state \
| fields - displayName oldValue newValue \
| eval cyences_severity=if(isnotnull(old_state) and isnotnull(new_state) and old_state!=new_state, "high", "medium") \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_authorizationpolicy_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_authorizationpolicy_change_filter
action.cyences_notable_event_action.contributing_events = `cs_azure_ad_changes("AuthorizationPolicy")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[Azure AD - Policy Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show the change/update in Policy.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_azure_ad_changes("Policy")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_policy_change_internal_filter` \
| eval additional_details = mvzip(key, value, " = ") \
| table _time, Actor, Command, Target_ObjectID, Target_userPrincipalName, Target_DisplayName, displayName, oldValue, newValue, ResultStatus, modified_properties, additional_details \
| azureadmodifiedpropertiesformatter old_value_field=oldValue new_value_field=newValue property_name_field=displayName field_to_update=modified_properties additional_fields=state \
| fields - displayName oldValue newValue \
| eval cyences_severity = if(in(Target_DisplayName, `cs_ad_important_policy`) or in(Target_DisplayName, `cs_ad_important_policy_internal`), if(isnotnull(old_state) and isnotnull(new_state) and old_state!=new_state, "critical", "medium"), if(isnotnull(old_state) and isnotnull(new_state) and old_state!=new_state, "high", "low")) \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_policy_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_policy_change_filter
action.cyences_notable_event_action.contributing_events = `cs_azure_ad_changes("Policy")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[Azure AD - Role Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the change/update in Role.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_azure_ad_changes("RoleManagement")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_role_change_internal_filter` \
| eval additional_details = mvzip(key, value, " = ") \
| table _time, Actor, Command, Target_ObjectID, Target_userPrincipalName, Target_DisplayName, displayName, oldValue, newValue, ResultStatus, modified_properties, additional_details \
| azureadmodifiedpropertiesformatter old_value_field=oldValue new_value_field=newValue property_name_field=displayName field_to_update=modified_properties \
| fields - displayName oldValue newValue \
| eval cyences_severity = case( in(Target_DisplayName, `cs_ad_important_role`) or in(Target_DisplayName, `cs_ad_important_role_internal`), "medium", true(), "low")  \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_role_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_role_change_filter
action.cyences_notable_event_action.contributing_events = `cs_azure_ad_changes("RoleManagement")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[Azure AD - Group Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show the change/update in Group.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_azure_ad_changes("GroupManagement")` `cs_azure_ad_unneccesary_group_change_events` NOT activityDisplayName IN ("Add member to group", "Add owner to group", "Remove member from group", "Remove owner from group") _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_group_change_internal_filter` \
| eval additional_details = mvzip(key, value, " = ") \
| table _time, Actor, Command, Target_ObjectID, Target_userPrincipalName, Target_DisplayName, displayName, oldValue, newValue, ResultStatus, modified_properties, additional_details \
| azureadmodifiedpropertiesformatter old_value_field=oldValue new_value_field=newValue property_name_field=displayName field_to_update=modified_properties additional_fields=SecurityEnabled \
| fields - displayName oldValue newValue \
| eval cyences_severity = case(new_SecurityEnabled=="[false]" or in(Target_DisplayName, `cs_ad_important_group`) or in(Target_DisplayName, `cs_ad_important_group_internal`), "medium", true(), "low") \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_group_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_group_change_filter
action.cyences_notable_event_action.contributing_events = `cs_azure_ad_changes("GroupManagement")` `cs_azure_ad_unneccesary_group_change_events` NOT activityDisplayName IN ("Add member to group", "Add owner to group", "Remove member from group", "Remove owner from group")
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[Azure AD - GroupMembership Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show the change/update in Group members.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_azure_ad_changes("GroupManagement")` activityDisplayName IN ("Add member to group", "Add owner to group", "Remove member from group", "Remove owner from group") _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_group_membership_change_internal_filter` \
| eval additional_details = mvzip(key, value, " = ") \
| table _time, Actor, Command, Target_ObjectID, Target_userPrincipalName, Target_DisplayName, displayName, oldValue, newValue, ResultStatus, modified_properties, additional_details \
| azureadmodifiedpropertiesformatter old_value_field=oldValue new_value_field=newValue property_name_field=displayName field_to_update=modified_properties \
| fields - displayName oldValue newValue \
| eval cyences_severity = case( in(Target_DisplayName, `cs_ad_important_group`) or in(Target_DisplayName, `cs_ad_important_group_internal`), "medium", true(), "low")  \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_group_membership_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_group_membership_change_filter
action.cyences_notable_event_action.contributing_events = `cs_azure_ad_changes("GroupManagement")` activityDisplayName IN ("Add member to group", "Add owner to group", "Remove member from group", "Remove owner from group") 
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[Azure AD - User Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the change/update in User.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_azure_ad_changes("UserManagement")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_user_change_internal_filter` \
| eval additional_details = mvzip(key, value, " = ") \
| table _time, Actor, Command, Target_ObjectID, Target_userPrincipalName, Target_DisplayName, displayName, oldValue, newValue, ResultStatus, modified_properties, additional_details \
| azureadmodifiedpropertiesformatter old_value_field=oldValue new_value_field=newValue property_name_field=displayName field_to_update=modified_properties \
| fields - displayName oldValue newValue \
| `cs_user_privilege_mapping(Target_DisplayName)` \
| eval field_count = mvcount(affected_properties) \
| eval cyences_severity = case( in(Target_DisplayName, `cs_ad_important_user`) or in(Target_DisplayName, `cs_ad_important_user_internal`) or is_privileged_user=="Yes", "high", affected_properties=="StrongAuthenticationPhoneAppDetail" and  field_count=="1", "info", true(), "medium") \
| fields - field_count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_user_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_user_change_filter
action.cyences_notable_event_action.contributing_events = `cs_azure_ad_changes("UserManagement")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[Azure AD - ServicePrincipal Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the change/update in ServicePrincipal.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_azure_ad_changes("ApplicationManagement")` activityDisplayName!="*application*" _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_serviceprincipal_change_internal_filter` \
| eval additional_details = mvzip(key, value, " = ") \
| table _time, Actor, Command, Target_ObjectID, Target_userPrincipalName, Target_DisplayName, displayName, oldValue, newValue, ResultStatus, modified_properties, additional_details \
| azureadmodifiedpropertiesformatter old_value_field=oldValue new_value_field=newValue property_name_field=displayName field_to_update=modified_properties \
| fields - displayName oldValue newValue \
| eval cyences_severity = "medium" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_serviceprincipal_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_serviceprincipal_change_filter
action.cyences_notable_event_action.contributing_events = `cs_azure_ad_changes("ApplicationManagement")` activityDisplayName!="*application*"
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[Azure AD - Application Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show the change/update in Application.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_azure_ad_changes("ApplicationManagement")` activityDisplayName="*application*" _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_application_change_internal_filter` \
| eval additional_details = mvzip(key, value, " = ") \
| table _time, Actor, Command, Target_ObjectID, Target_userPrincipalName, Target_DisplayName, displayName, oldValue, newValue, ResultStatus, modified_properties, additional_details \
| azureadmodifiedpropertiesformatter old_value_field=oldValue new_value_field=newValue property_name_field=displayName field_to_update=modified_properties additional_fields="AvailableToOtherTenants,ConsentContext.IsAdminConsent" \
| fields - displayName oldValue newValue \
| eval cyences_severity = if(new_AvailableToOtherTenants=="[true]" or 'new_ConsentContext.IsAdminConsent'=="\"False\"","medium","info") \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_application_change_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_application_change_filter
action.cyences_notable_event_action.contributing_events = `cs_azure_ad_changes("ApplicationManagement")` activityDisplayName="*application*"
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC

# Possible user_type field values for the O365 management activity
# https://learn.microsoft.com/en-us/office/office-365-management-api/office-365-management-activity-api-schema#user-type

[O365 - Risky Login Detected by Microsoft]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the login failure when Microsoft detects it as Risky login.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" _index_earliest=-61m@m _index_latest=-1m@m status.errorCode!=0 user!="not available" riskState="atRisk" \
| rename userPrincipalName as user, ipAddress as ClientIP, status.failureReason as failureReason, status.additionalDetails as additionalDetails, "status.errorCode" as ErrorCode \
| iplocation ClientIP \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| fillnull value="-" Country, Region, City \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "high") \
| table event_time, user, is_privileged_user, ClientIP, cyences_severity, Country, Region, City, LogonError, failureReason, ErrorCode, additionalDetails, appDisplayName, clientAppUsed, risk*, conditionalAccessStatus, isInteractive, deviceDetail.* \
| `cs_o365_risky_login_detected_by_microsoft_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_risky_login_detected_by_microsoft_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" status.errorCode!=0 user!="not available" riskState="atRisk"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" status.errorCode!=0 user!="not available" riskState="atRisk" user=$row.user$
action.cyences_notable_event_action.attacker_search = | stats count by ClientIP
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" status.errorCode!=0 user!="not available" riskState="atRisk" ClientIP=$row.ClientIP$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[O365 - Login Failure Due To MFA]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the login failure due to multi factor authentication.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user!="not available"\
| fields _time sourcetype user ClientIP Id LogonError user_type authentication_method app ApplicationId ExtendedProperties{}.Name ExtendedProperties{}.Value \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| append \
    [| search `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" earliest=-2h@m latest=now status.errorCode!=0 (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user!="not available" \
    | fields _time sourcetype userPrincipalName ipAddress id LogonError appDisplayName clientAppUsed conditionalAccessStatus isInteractive deviceDetail.* status.* org_country org_region org_city \
    | rename userPrincipalName as user, ipAddress as ClientIP, id as Id, status.failureReason as failureReason, status.additionalDetails as additionalDetails ] \
| eval user = lower(user) \
| stats values(*) as *, max(_time) as _time by Id, user, ClientIP \
| search sourcetype="o365:management:activity" \
| fields - Id, sourcetype, lat, lon, deviceDetail.deviceId, status.errorCode \
| stats count, values(*) as *, max(_time) as Last_Failed_Login by user, ClientIP \
| iplocation ClientIP \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| fillnull value="-" Country, Region, City \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(user_type=="Admin" or user_type=="DcAdmin" or is_privileged_user=="Yes", case(count>5,"critical", count>3, "high", true(), "medium"), case(count>10, "critical", count>5, "high", count>3, "medium", true(), "low")) \
| sort - count \
| table user, ClientIP, count, cyences_severity, Country, Region, City, Last_Failed_Login, user_type, authentication_method, LogonError, failureReason, additionalDetails, appDisplayName, clientAppUsed, conditionalAccessStatus, isInteractive, deviceDetail.* , ExtendedProperties, ApplicationId, is_privileged_user \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_mfa_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_failed_login_due_to_mfa_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user!="not available"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user!="not available" user=$row.user$
action.cyences_notable_event_action.attacker_search = | stats count by LogonError
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError=$row.LogonError$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[O365 - Login Failure From Unusual Country Due To MFA]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the login failure from Unusual Country due to multi factor authentication.
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user!="not available" `cs_public_ips(ClientIP)` \
| fields _time sourcetype user ClientIP Id LogonError user_type authentication_method app ApplicationId ExtendedProperties{}.Name ExtendedProperties{}.Value \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| append \
    [| search `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" earliest=-1h@m latest=now status.errorCode!=0 (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user!="not available" `cs_public_ips(ipAddress)` \
    | fields _time sourcetype userPrincipalName ipAddress id LogonError appDisplayName clientAppUsed conditionalAccessStatus isInteractive deviceDetail.* status.* org_country org_region org_city \
    | rename userPrincipalName as user, ipAddress as ClientIP, id as Id, status.failureReason as failureReason, status.additionalDetails as additionalDetails] \
| eval user = lower(user) \
| stats values(*) as *, max(_time) as _time by Id, user, ClientIP \
| search sourcetype="o365:management:activity" \
| fields - Id, sourcetype, lat, lon, deviceDetail.deviceId, status.errorCode \
| stats count, values(*) as *, max(_time) as Last_Failed_Login by user, ClientIP \
| iplocation ClientIP \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| `cs_current_week_login_count_o365` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(reason=="No login from this country in last 90 days", "critical", user_type=="Admin" or user_type=="DcAdmin" or is_privileged_user=="Yes", "high", true(), "medium") \
| table user, ClientIP, count, cyences_severity, Country, Region, City, percentage_login_from_country, reason, usual_login_location, failureReason, additionalDetails, Last_Failed_Login, user_type, authentication_method, LogonError, appDisplayName clientAppUsed conditionalAccessStatus isInteractive deviceDetail.* , ExtendedProperties, ApplicationId, is_privileged_user \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_mfa_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_failed_login_due_to_mfa_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user!="not available"  `cs_public_ips(ClientIP)` | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user!="not available" `cs_public_ips(ClientIP)`  user=$row.user$ | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_notable_event_action.attacker_search = | stats count by LogonError
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed user!="not available" `cs_public_ips(ClientIP)` LogonError=$row.LogonError$ | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[O365 - Login From Unknown User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the Login from unknown user. \
\
Note - The Audit log event (source=AuditLogs.SignIns) does not have the event for unknown user hence we are not using Audit log event for the correlation in this alert 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoggedIn (UserId=Unknown OR UserId="Not Available" ) \
| stats count, values(UserId) as UserId, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Success_Login, values(ApplicationId) as ApplicationId by ClientIP \
| iplocation ClientIP \
| fields - lat lon \
| sort - count \
| `cs_human_readable_time_format(Last_Success_Login)` \
| eval cyences_severity = "low" \
| `cs_o365_login_by_unknown_userid_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_login_by_unknown_userid_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoggedIn (UserId=Unknown OR UserId="Not Available" )
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[O365 - Successful Login From Unusual Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 14,29,44,59 * * * *
description = A Successful O365 Login From Unusual Country.
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-16m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoggedIn user!="not available" `cs_public_ips(ClientIP)` \
| fields _time sourcetype user ClientIP Id LogonError user_type authentication_method app ApplicationId \
| append \
    [| search `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" user!="not available" earliest=-2h@m latest=now status.errorCode=0 `cs_public_ips(ipAddress)` \
    | fields _time sourcetype userPrincipalName ipAddress id LogonError appDisplayName clientAppUsed conditionalAccessStatus isInteractive deviceDetail.* status.additionalDetails org_country org_region org_city \
    | rename userPrincipalName as user, ipAddress as ClientIP, id as Id, status.additionalDetails as additionalDetails ] \
| eval user = lower(user) \
| stats values(*) as *, max(_time) as Last_Success_Login by Id, user, ClientIP \
| search sourcetype="o365:management:activity" \
| fields - Id, sourcetype, lat, lon, deviceDetail.deviceId \
| stats count, values(*) as *, max(Last_Success_Login) as Last_Success_Login by user, ClientIP \
| iplocation ClientIP \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| `cs_current_week_login_count_o365` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 and (user_type=="Admin" or user_type=="DcAdmin" or is_privileged_user=="Yes"), "critical", percentage_login_from_country==0 or user_type=="Admin" or user_type=="DcAdmin" or is_privileged_user=="Yes", "high", true(), "medium") \
| table user, ClientIP, count, cyences_severity, Country, Region, City, percentage_login_from_country, reason, usual_login_location, additionalDetails, Last_Success_Login, user_type, authentication_method, appDisplayName clientAppUsed conditionalAccessStatus isInteractive deviceDetail.*, ApplicationId, is_privileged_user \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_o365_successful_login_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_successful_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoggedIn user!="not available" `cs_public_ips(ClientIP)` NOT LogonError=* | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoggedIn user!="not available" `cs_public_ips(ClientIP)` NOT LogonError=* user=$row.user$ | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[O365 - Failed Login From Unusual Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Failed O365 Login From Unusual Country. 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed user!="not available" `cs_public_ips(ClientIP)` \
| fields _time sourcetype user ClientIP Id LogonError user_type authentication_method app ApplicationId \
| append \
    [| search `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" user!="not available" earliest=-2h@m latest=now status.errorCode!=0 `cs_public_ips(ipAddress)` \
    | fields _time sourcetype userPrincipalName ipAddress id LogonError appDisplayName status.failureReason clientAppUsed conditionalAccessStatus isInteractive deviceDetail.* status.* org_country org_region org_city \
    | rename userPrincipalName as user, ipAddress as ClientIP, id as Id, status.failureReason as failureReason, status.additionalDetails as additionalDetails] \
| eval user = lower(user) \
| stats values(*) as *, max(_time) as Last_Failed_Login by Id, user, ClientIP \
| search sourcetype="o365:management:activity" \
| fields - Id, sourcetype, lat, lon, deviceDetail.deviceId, status.errorCode \
| stats count, values(*) as *, max(Last_Failed_Login) as Last_Failed_Login by user, ClientIP \
| iplocation ClientIP \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| `cs_current_week_login_count_o365` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 and (user_type=="Admin" or user_type=="DcAdmin" or is_privileged_user=="Yes"), "critical", percentage_login_from_country==0 or user_type=="Admin" or user_type=="DcAdmin" or is_privileged_user=="Yes", "high", true(), "medium") \
| where count > 5 \
| table user, ClientIP, count, cyences_severity, Country, Region, City, percentage_login_from_country, reason, failureReason, additionalDetails, LogonError,usual_login_location, Last_Failed_Login, user_type, authentication_method, appDisplayName, clientAppUsed, conditionalAccessStatus, isInteractive, deviceDetail.*, ApplicationId, is_privileged_user \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_from_unusual_country_filter` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_failed_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoginFailed user!="not available" `cs_public_ips(ClientIP)` NOT LogonError=* | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoginFailed user!="not available" `cs_public_ips(ClientIP)` | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[O365 - Authentication Blocked By Conditional Access Policy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the authentication blocked by conditional access policy. 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError="BlockedByConditionalAccess" user!="not available" \
| fields _time sourcetype user ClientIP Id LogonError user_type authentication_method app ApplicationId ExtendedProperties{}.Name ExtendedProperties{}.Value \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| append \
    [| search `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" user!="not available" earliest=-2h@m latest=now status.errorCode!=0 LogonError="BlockedByConditionalAccess" \
    | fields _time sourcetype userPrincipalName ipAddress id LogonError appDisplayName clientAppUsed conditionalAccessStatus isInteractive deviceDetail.* org_country org_region org_city \
    | rename userPrincipalName as user, ipAddress as ClientIP, id as Id ] \
| eval user = lower(user) \
| stats values(*) as *, max(_time) as _time by Id, user, ClientIP \
| search sourcetype="o365:management:activity" \
| fields - Id, sourcetype, lat, lon, deviceDetail.deviceId \
| stats count, values(*) as *, max(_time) as Last_Failed_Login by user, ClientIP \
| iplocation ClientIP \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_country), org_region, Region) \
| eval City = if(isnotnull(org_country), org_city, City) \
| fillnull value="-" Country, Region, City \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(user_type=="Admin" or user_type=="DcAdmin" or is_privileged_user=="Yes", "critical", true(), "medium") \
| sort - count \
| table user, ClientIP, count, cyences_severity, Country, Region, City, Last_Failed_Login, user_type, authentication_method, LogonError, appDisplayName clientAppUsed conditionalAccessStatus isInteractive deviceDetail.* , ExtendedProperties, ApplicationId, is_privileged_user \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_conditional_access_policy_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_failed_login_due_to_conditional_access_policy_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError="BlockedByConditionalAccess" user!="not available"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError="BlockedByConditionalAccess" user!="not available" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC, Compliance


[O365 - Daily Login Failure]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will show the daily Login failure.
dispatch.earliest_time = -2d@h
dispatch.latest_time = +2d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-25h@m _index_latest=-1h@m Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError!=TriggerBrowserCapabilitiesInterrupt user!="not available" \
| fields _time sourcetype user ClientIP Id LogonError user_type authentication_method app ApplicationId ExtendedProperties{}.Name ExtendedProperties{}.Value \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| append \
    [| search `cs_o365` sourcetype=o365:graph:api source="AuditLogs.SignIns" user!="not available" earliest=-26h@m latest=now status.errorCode!=0 LogonError!=TriggerBrowserCapabilitiesInterrupt \
    | fields _time sourcetype userPrincipalName ipAddress id LogonError appDisplayName clientAppUsed conditionalAccessStatus isInteractive deviceDetail.* status.* org_country org_region org_city \
    | rename userPrincipalName as user, ipAddress as ClientIP, id as Id, status.failureReason as failureReason, status.additionalDetails as additionalDetails ] \
| eval user = lower(user) \
| stats values(*) as *, max(_time) as _time by Id, user, ClientIP \
| search sourcetype="o365:management:activity" \
| fields - Id, sourcetype, lat, lon, deviceDetail.deviceId, status.errorCode \
| stats count, values(*) as *, max(_time) as Last_Failed_Login by user, ClientIP \
| iplocation ClientIP \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| fillnull value="-" Country, Region, City \
| eventstats sum(count) as total_count_by_user by user \
| eval cyences_severity = "info" \
| sort - total_count_by_user, user, count \
| table user, total_count_by_user, ClientIP, count, cyences_severity, Country, Region, City, Last_Failed_Login, user_type, authentication_method, LogonError, failureReason, additionalDetails, appDisplayName, clientAppUsed, conditionalAccessStatus, isInteractive, deviceDetail.*, ExtendedProperties, ApplicationId \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_daily_login_failure_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_daily_login_failure_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError!=TriggerBrowserCapabilitiesInterrupt user!="not available"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError!=TriggerBrowserCapabilitiesInterrupt user!="not available" user=$row.user$
action.cyences_notable_event_action.attacker_search = | stats count by LogonError
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed user!="not available" LogonError=$row.LogonError$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[O365 - Security Compliance Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show Security compliance alert.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=SecurityComplianceCenter Operation=AlertTriggered \
| eval cyences_severity = case(Severity=="Critical", "critical", Severity=="High", "high", Severity=="Medium", "medium", Severity=="Low", "low", Severity=="Informational", "info") \
| dedup AlertId \
| spath input=Data \
| table _time Name Severity cyences_severity AlertType Category f3u lon wl ad \
| `cs_o365_security_compliance_alert_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_security_compliance_alert_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=SecurityComplianceCenter Operation=AlertTriggered
action.cyences_notable_event_action.attacker_search = | stats count by Name
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=SecurityComplianceCenter Operation=AlertTriggered Name=$row.Name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[O365 - OneDrive or SharePoint File Sharing with External User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4 * * * *
description = This alert will pinpoint when file sharing with external user usein Onedrive and Sharepoint.
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload IN (OneDrive, SharePoint) Operation IN ("SharingSet", "AccessRequestApproved", "SharingRestored", "AnonymousLinkCreated", "SharingInvitationCreated", "SharingInvitationUpdated", "AddedToSecureLink", "SharingPolicyChanged","SharingLinkCreated") NOT TargetUserOrGroupType IN ("Member", "SharePointGroup") \
|`cs_o365_file_sharing_to_external_user_internal_filter` \
| iplocation ClientIP \
| fillnull value="" Country, Region, City \
| eval Source = ClientIP + " (" + City + ", " + Region + ", " + Country + ")" \
| stats values(Operation) as Operations, values(TargetUserOrGroupName) as TargetUserOrGroupName, values(EventData) as EventData, values(ObjectId) as ObjectId, values(Source) as Source, values(SharingLinkScope) as SharingLinkScope, values(Permission) as Permission, values(ItemType) as ItemType, values(ApplicationDisplayName) as ApplicationDisplayName, values(EventSource) as EventSource latest(_time) as LastTime earliest(_time) as FirstTime by SourceFileName, UserId \
| search NOT SharingLinkScope="Organization" \
| rename UserId as User \
| `cs_human_readable_time_format(FirstTime)` \
| `cs_human_readable_time_format(LastTime)` \
| `cs_user_privilege_mapping(User)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical","high") \
| table User,is_privileged_user,SourceFileName,Permission,SharingLinkScope,TargetUserOrGroupName,EventSource,ItemType,Operations,ApplicationDisplayName,FirstTime,LastTime,EventData,ObjectId,cyences_severity,Source \
| `cs_o365_sharing_file_with_external_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_sharing_file_with_external_user_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload IN (OneDrive, SharePoint) Operation IN ("SharingSet", "AccessRequestApproved", "SharingRestored", "AnonymousLinkCreated", "SharingInvitationCreated", "SharingInvitationUpdated", "AddedToSecureLink", "SharingPolicyChanged","SharingLinkCreated") NOT TargetUserOrGroupType IN ("Member", "SharePointGroup")
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC


[O365 - OneDrive or SharePoint Link Accessed By External User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4 * * * *
description = This alert will pinpoint when OneDrive or SharePoint Link Accessed By External User. 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload IN (OneDrive, SharePoint) Operation IN ("AnonymousLinkUsed","SharingLinkUsed") \
|`cs_o365_link_accessed_by_external_user_internal_filter` \
| iplocation ClientIP \
| fillnull value="" Country, Region, City \
| eval Source = ClientIP + " (" + City + ", " + Region + ", " + Country + ")" \
| `cs_o365_onedrive_or_sharepoint_link_accessed_by_external_user_internal_filter` \
| stats values(Operation) as Operations, values(ObjectId) as ObjectId , values(SharingLinkScope) as SharingLinkScope, values(Permission) as Permission, values(ApplicationDisplayName) as ApplicationDisplayName, values(Source) as Source,values(EventData) as EventData, values(ItemType) as ItemType,values(EventSource) as EventSource latest(_time) as LastTime earliest(_time) as FirstTime by SourceFileName, UserId \
| rex field=UserId "(?<email_user>[^@]+)@(?<email_domain>.+)" \
| eval email_domain_search = replace(email_domain, "\.", "_") | fillnull value="NOTHING_HERE_NO" email_domain_search \
| search NOT SharingLinkScope="Organization" | where !like(ObjectId, "%".email_domain_search."%") \
| rename UserId as UserAccessingFile \
| `cs_human_readable_time_format(FirstTime)` \
| `cs_human_readable_time_format(LastTime)` \
| `cs_user_privilege_mapping(User)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical","high") \
| table UserAccessingFile,is_privileged_user,SourceFileName,ObjectId,SharingLinkScope,Permission,EventSource,ItemType,Operations,FirstTime,LastTime,ApplicationDisplayName,Source \
| `cs_o365_onedrive_or_sharepoint_link_accessed_by_external_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_onedrive_or_sharepoint_link_accessed_by_external_user_filter
action.cyences_notable_event_action.contributing_events =   `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload IN (OneDrive, SharePoint) Operation IN ("AnonymousLinkUsed","SharingLinkUsed") NOT TargetUserOrGroupType IN ("Member", "SharePointGroup") 
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.teams = SOC



# ======================
# Email
# ======================
[Calculate UpperBound for Spike In Emails]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for Email - Hourly Increase In Emails Over Baseline - Generates the upperBound value of email sent for each user
dispatch.earliest_time = -8d@d
dispatch.latest_time = -1d@d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_email_sources` \
| bin span=1h _time \
| stats dc(MessageId) as count by SenderAddress, _time \
| stats avg(count) as avg, stdev(count) as stdev by SenderAddress \
| eval upperBound=(avg+stdev*3) \
| outputlookup cs_email_sent_upperbound.csv
action.cyences_notable_event_action.products = Email


[Hourly Increase In Emails Over Baseline]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the hourly increase in emails over baseline.
dispatch.earliest_time = -2d@h
dispatch.latest_time = +2d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_email_sources` _index_earliest=-61m@m _index_latest=-1m@m \
| rex field=RecipientAddress "(?<RecipientUser>[^@]+)(?<RecipientDomain>.+)" \
| rename recipient_domain as RecipientDomain, recipient as RecipientUser \
| fillnull value="Unknown" RecipientDomain \
| stats dc(MessageId) as count, values(Subject) as Subject, values(RecipientUser) as RecipientUser, count(RecipientUser) as total_RecipientUser, dc(RecipientUser) as RecipientUserCount, values(vendor_product) as Product by SenderAddress, RecipientDomain \
| eval Sample_RecipientUser = mvindex(RecipientUser,0,2) \
| eval Receipients = mvjoin(Sample_RecipientUser, ", "). if(RecipientUserCount - min(3,mvcount(Sample_RecipientUser))>0, ", and " .(RecipientUserCount - min(3,mvcount(Sample_RecipientUser))). " more", ""). " from ".RecipientDomain \
| stats sum(count) as count, values(Subject) as Subject, values(Receipients) as Receipients, sum(total_RecipientUser) as total_RecipientUser, values(Product) as Product by SenderAddress \
| lookup cs_email_sent_upperbound.csv SenderAddress OUTPUT upperBound, avg, stdev \
| where count>upperBound AND count > `cs_email_increase_over_baseline_limit` \
| eval avg=round(avg, 2), stdev=round(stdev, 2), upperBound=round(upperBound, 2) \
| eval cyences_severity = case(count>5*upperBound, "medium", true(), "low") \
| rename avg as avg_hourly_emails_in_last_7_days, upperBound as hourly_email_baseline \
| fields - stdev \
| `cs_email_increase_in_email_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_email_increase_in_email_filter
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Email
action.cyences_notable_event_action.teams = SOC


# These alerts have been removed and commented here for future reference as it contains a static list of subject, attachment and link names, which is not maintainable and causes false positives.
# [Email - Suspicious Subject or Attachment]
# [Email - With Known Abuse Web Service Link]


[Daily Spam Emails]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will show the daily spam email.
dispatch.earliest_time = -3d@h
dispatch.latest_time = +3d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_email_sources` (Status=FilteredAsSpam OR "message_info.is_spam"=true) _index_earliest=-25h@m _index_latest=-1h@m \
| stats count, values(RecipientAddress) as RecipientAddress, values(vendor_product) as Product by SenderAddress, Subject \
| eval cyences_severity = "info" \
| sort - count \
| `cs_email_daily_spam_email_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_email_daily_spam_email_filter
action.cyences_notable_event_action.contributing_events = `cs_email_sources` (Status=FilteredAsSpam OR "message_info.is_spam"=true) 
action.cyences_notable_event_action.system_compromised_search = | stats count by SenderAddress
action.cyences_notable_event_action.system_compromised_drilldown =  `cs_email_sources` (Status=FilteredAsSpam OR "message_info.is_spam"=true) | search SenderAddress=$row.SenderAddress$
action.cyences_notable_event_action.attacker_search = | stats count by Subject
action.cyences_notable_event_action.attacker_drilldown = `cs_email_sources` (Status=FilteredAsSpam OR "message_info.is_spam"=true) | search Subject=$row.Subject$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Email
action.cyences_notable_event_action.teams = SOC



# ==============
# Network Compromise
# ==============
# Reports
[Calculate UpperBound for Spike in Network Traffic]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 2 * * *
description = Supporting Report for Network Compromise - DDoS Behavior Detected alert (Runs everyday at 2 AM) - Generates the upperBound value of network traffic \
For more information refer to Network Compromise - DDoS Behavior Detected alert. \
Warning - Do not run enable this search without enabling data-model acceleration on Network data-model as this search will reduce the system performance without acceleration.
dispatch.earliest_time = -7d@d
dispatch.latest_time = @d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` sum(All_Traffic.bytes) as total_bytes, sum(All_Traffic.packets) as total_packets, dc(All_Traffic.src_ip) as dc_src_ip from datamodel=Network_Traffic where `cs_public_ips(All_Traffic.src_ip)` by _time span=1h, sourcetype \
| `cs_drop_dm_object_name(All_Traffic)` \
| eval total_MB = round(total_bytes/(1024*1024),2) | fields - total_bytes \
| eval total_m_packets = round(total_packets/1000000,2) | fields - total_packets \
| stats avg(total_m_packets) as avg_total_m_packets, stdev(total_m_packets) as stdev_total_m_packets, avg(dc_src_ip) as avg_dc_src_ip, stdev(dc_src_ip) as stdev_dc_src_ip, avg(total_MB) as avg_total_MB, stdev(total_MB) as stdev_total_MB by sourcetype \
| eval upperBound_total_m_packets=(avg_total_m_packets+stdev_total_m_packets*5), upperBound_dc_src_ip=(avg_dc_src_ip+stdev_dc_src_ip*3), upperBound_total_MB=(avg_total_MB+stdev_total_MB*5) \
| foreach avg*, std*, upperBound* [| eval <<FIELD>>=round(<<FIELD>>, 2)] \
| outputlookup cs_network_traffic_upperbound.csv
action.cyences_notable_event_action.products = Network


[Calculate UpperBound for Spike in Outbound Network Traffic]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 2 * * *
description = Supporting Report for Network Compromise - Unusual Outbound Traffic alert (Runs everyday at 2 AM) - Generates the upperBound value of outbound network traffic for each sourcetype  \
For more information refer to Network Compromise - Unusual Outbound Traffic alert. \
Warning - Do not run enable this search without enabling data-model acceleration on Network Traffic data-model as this search will reduce the system performance without acceleration.
dispatch.earliest_time = -7d@d
dispatch.latest_time = @d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` sum(All_Traffic.bytes) as total_bytes, sum(All_Traffic.packets) as total_packets from datamodel=Network_Traffic where `cs_private_ips(All_Traffic.src_ip)` AND `cs_public_ips(All_Traffic.dest_ip)` by _time span=1h, All_Traffic.src_ip \
| `cs_drop_dm_object_name(All_Traffic)` \
| eval total_MB = round(total_bytes/(1024*1024),2) | fields - total_bytes \
| eval total_m_packets = round(total_packets/1000000,2) | fields - total_packets \
| stats avg(total_m_packets) as avg_total_m_packets, stdev(total_m_packets) as stdev_total_m_packets, avg(total_MB) as avg_total_MB, stdev(total_MB) as stdev_total_MB by src_ip \
| eval upperBound_total_m_packets=(avg_total_m_packets+stdev_total_m_packets*5), upperBound_total_MB=(avg_total_MB+stdev_total_MB*5) \
| foreach avg*, std*, upperBound* [| eval <<FIELD>>=round(<<FIELD>>, 2)] \
| outputlookup cs_outbound_network_traffic_upperbound.csv
action.cyences_notable_event_action.products = Network


# Alerts
[DDoS Behavior Detected on the Network]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert identifies a spike in the Network Traffic to detect a DDoS behaviour in the environment. \
Warning: Enable the following report, Network Compromise - Calculate UpperBound for Spike in Network Traffic, before enabling this alert. \
\
Data Collection - Any traffic logs that are CIM mapped with Network data-model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` sum(All_Traffic.bytes) as total_bytes, sum(All_Traffic.packets) as total_packets from datamodel=Network_Traffic by sourcetype, All_Traffic.src_ip, All_Traffic.action \
| `cs_drop_dm_object_name(All_Traffic)` \
| search `cs_public_ips(src_ip)` \
| eval total_MB = round(total_bytes/(1024*1024),2) | fields - total_bytes \
| eval total_m_packets = round(total_packets/1000000,2) | fields - total_packets \
| eval original_event=1 \
| appendpipe \
    [| stats sum(total_m_packets) as total_m_packets_ by sourcetype, src_ip \
    | sort - total_m_packets_ \
    | eval src_ip_mix=src_ip." (".total_m_packets_." M packets)" \
    | fields - total_m_packets_] \
| appendpipe \
    [| where original_event==1 \
    | stats sum(total_m_packets) as total_m_packets_ by sourcetype, action \
    | sort - total_m_packets_ \
    | eval action_mix=action." (".total_m_packets_." M packets)" \
    | fields - total_m_packets_] \
| stats sum(total_m_packets) as total_m_packets, sum(total_MB) as total_MB, dc(src_ip) as dc_src_ip, list(src_ip_mix) as src_ip_mix, list(action_mix) as actions by sourcetype \
| eval top5_src_ip=mvindex(src_ip_mix,0,4) | fields - src_ip_mix \
| where total_m_packets>`cs_network_ddos_min_m_packets` \
| lookup cs_network_traffic_upperbound.csv sourcetype \
| where total_m_packets>upperBound_total_m_packets OR dc_src_ip > uppperBound_dc_src_ip \
| eval cyences_severity = case(total_m_packets>upperBound_total_m_packets*3 OR dc_src_ip>uppperBound_dc_src_ip*3, "critical", total_m_packets>upperBound_total_m_packets*2 OR dc_src_ip>uppperBound_dc_src_ip*2, "high", true(), "medium") \
| table sourcetype, cyences_severity, total_m_packets, avg_total_m_packets, upperBound_total_m_packets, actions, dc_src_ip, avg_dc_src_ip, upperBound_dc_src_ip, top5_src_ip, total_MB, avg_total_MB, upperBound_total_MB \
| fieldformat avg_total_m_packets=avg_total_m_packets." M" \
| fieldformat upperBound_total_m_packets=upperBound_total_m_packets." M" \
| fieldformat total_m_packets=total_m_packets." M" \
| `cs_network_ddos_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_network_ddos_filter
action.cyences_notable_event_action.contributing_events = | datamodel Network_Traffic All_Traffic search strict_fields=false | `cs_drop_dm_object_name(All_Traffic)` | search `cs_public_ips(src_ip)`
action.cyences_notable_event_action.system_compromised_search = | stats values(total_m_packets) as total_m_packets, values(dc_src_ip) as dc_src_ip by sourcetype
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Network_Traffic All_Traffic search strict_fields=false | search sourcetype=$row.sourcetype$ | `cs_drop_dm_object_name(All_Traffic)` | search `cs_public_ips(src_ip)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Network
action.cyences_notable_event_action.teams = SOC


[Unusual Outbound Traffic]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 58 * * * *
description = This alert identifies the unusual Outbound Network Traffic. \
Warning: Enable the following report, Network Compromise - Calculate UpperBound for Spike in Outbound Network Traffic, before enabling this alert. \
\
Data Collection - Any traffic logs that are CIM mapped with Network data-model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` sum(All_Traffic.bytes) as total_bytes, sum(All_Traffic.packets) as total_packets from datamodel=Network_Traffic where `cs_private_ips(All_Traffic.src_ip)` AND `cs_public_ips(All_Traffic.dest_ip)` by All_Traffic.src_ip, All_Traffic.dest_ip, All_Traffic.action \
| `cs_drop_dm_object_name(All_Traffic)` \
| eval total_MB = round(total_bytes/(1024*1024),2) | fields - total_bytes \
| eval total_m_packets = round(total_packets/1000000,2) | fields - total_packets \
| eval original_event=1 \
| appendpipe \
    [| stats sum(total_m_packets) as total_m_packets_ by src_ip, dest_ip \
    | sort - total_m_packets_ \
    | eval dest_ip_mix=dest_ip." (".total_m_packets_." M packets)" \
    | fields - total_m_packets_] \
| appendpipe \
    [| where original_event==1 \
    | stats sum(total_m_packets) as total_m_packets_ by src_ip, action \
    | sort - total_m_packets_ \
    | eval action_mix=action." (".total_m_packets_." M packets)" \
    | fields - total_m_packets_] \
| stats sum(total_m_packets) as total_m_packets, sum(total_MB) as total_MB, list(dest_ip_mix) as dest_ip_mix, list(action_mix) as actions by src_ip \
| eval top5_dest_ip=mvindex(dest_ip_mix,0,4) | fields - dest_ip_mix \
| where total_m_packets > `cs_network_outbound_min_m_packets` OR total_MB > `cs_network_outbound_min_MB_traffic` \
| lookup cs_outbound_network_traffic_upperbound.csv src_ip \
| where (total_m_packets > upperBound_total_m_packets AND total_m_packets > `cs_network_outbound_min_m_packets`) OR (total_MB > upperBound_total_MB AND total_MB > `cs_network_outbound_min_MB_traffic`) \
| eval cyences_severity = case((total_m_packets > 20 AND total_m_packets>upperBound_total_m_packets*3) OR (total_MB > 20000 AND total_MB>upperBound_total_MB*3), "critical", total_m_packets>upperBound_total_m_packets*2 OR total_MB>upperBound_total_MB*2, "high", true(), "medium") \
| table src_ip, cyences_severity, total_m_packets, avg_total_m_packets, upperBound_total_m_packets, actions, top5_dest_ip, total_MB, avg_total_MB, upperBound_total_MB \
| fieldformat avg_total_m_packets=avg_total_m_packets." M" \
| fieldformat upperBound_total_m_packets=upperBound_total_m_packets." M" \
| fieldformat total_m_packets=total_m_packets." M" \
| `cs_network_unusual_outbound_traffic_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_network_unusual_outbound_traffic_filter
action.cyences_notable_event_action.contributing_events = | datamodel Network_Traffic All_Traffic search strict_fields=false | `cs_drop_dm_object_name(All_Traffic)` | search `cs_private_ips(src_ip)` AND `cs_public_ips(dest_ip)`
action.cyences_notable_event_action.system_compromised_search = | stats values(total_m_packets) as total_m_packets, values(total_MB) as total_MB by src_ip
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Network_Traffic All_Traffic search strict_fields=false | search src_ip=$row.src_ip$ | `cs_drop_dm_object_name(All_Traffic)` | search `cs_private_ips(src_ip)` AND `cs_public_ips(dest_ip)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Network
action.cyences_notable_event_action.teams = SOC


[Basic Network Scanning]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert scans for hosts that either reach out to 1500 or more destination ip or 100 or more distinct ports in a short period (1 hour) of time.\
\
Data Collection - Palo Alto Networks firewalls, and with any other device that uses the Splunk common information model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` count values(All_Traffic.dest_port) as dest_port, values(All_Traffic.dest_ip) as dest_ip, values(All_Traffic.dvc) as dvc from datamodel=Network_Traffic where `cs_basic_scanning_internal_filter` by sourcetype, All_Traffic.src_ip, All_Traffic.action \
| `cs_drop_dm_object_name(All_Traffic)` \
| eval allowed=if(action="allowed", count, 0), blocked=if(action="blocked", count, 0), other=if(action!="allowed" and action!="blocked", count, 0) \
| stats sum(count) as count dc(dest_port) as num_dest_port, dc(dest_ip) as num_dest_ip, values(dvc) as dvc sum(allowed) as allowed sum(blocked) as blocked sum(other) as other by sourcetype, src_ip \
| eval traffic_info = if(allowed=0,"", round((allowed/count)*100,2)." % (allowed),") \
| eval traffic_info = if(blocked=0, traffic_info, traffic_info.round((blocked/count)*100,2)." % (blocked),") \
| eval traffic_info = if(other=0, traffic_info, traffic_info.round((other/count)*100,2)." % (other),") \
| makemv delim="," traffic_info \
| where num_dest_port > 200 OR num_dest_ip > 5000 \
| eval cyences_severity = if(allowed=0,"info",if(num_dest_port>5000 or num_dest_ip>30000, "high", "medium")) \
| fields - allowed, blocked, other \
| `cs_scanning_basic_scanning_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_scanning_basic_scanning_filter
action.cyences_notable_event_action.contributing_events = | datamodel Network_Traffic All_Traffic search strict_fields=false | `cs_drop_dm_object_name(All_Traffic)`
action.cyences_notable_event_action.system_compromised_search = | stats count by sourcetype
action.cyences_notable_event_action.system_compromised_drilldown = index=$row.index$ sourcetype=$row.sourcetype$
action.cyences_notable_event_action.attacker_search = | stats count by src_ip
action.cyences_notable_event_action.attacker_drilldown = index=$row.index$ src_ip=$row.src_ip$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Network
action.cyences_notable_event_action.teams = SOC


[Inbound Vulnerable Traffic]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert scans allowed inbound traffic on vulnerable ports.\
\
Data Collection - Palo Alto Networks firewalls, and with any other device that uses the Splunk common information model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` sum(All_Traffic.bytes) as total_bytes, sum(All_Traffic.packets) as total_packets from datamodel=Network_Traffic where `cs_private_ips(All_Traffic.dest_ip)` AND `cs_public_ips(All_Traffic.src_ip)` AND All_Traffic.action="allowed" by All_Traffic.src_ip, All_Traffic.dest_ip, All_Traffic.dest_port, All_Traffic.action \
| `cs_drop_dm_object_name(All_Traffic)` \
| join dest_ip dest_port \
    [| inputlookup cs_all_vuln where (status="open" OR status="reopened") AND port!="0" AND (severity="critical" OR severity="high" OR severity="medium" OR severity="low") \
    | lookup cs_all_assets asset_id as dest_id output asset_ip as ip \
    | makemv ip delim="~~" \
    | stats values(severity) as severity by ip port \
    | rename ip as dest_ip, port as dest_port] \
| eval cyences_severity = case(match(severity,"critical"), "critical", match(severity,"high"), "high", match(severity,"medium"), "medium", match(severity,"low"), "low", match(severity,"info"), "info") \
| iplocation src_ip \
| fields - lat, lon, severity \
| rename Country as src_country, City as src_city, Region as src_region \
| `cs_inbound_vulnerable_traffic_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_inbound_vulnerable_traffic_filter
action.cyences_notable_event_action.contributing_events = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa)
action.cyences_notable_event_action.system_compromised_search = | stats count by sourcetype
action.cyences_notable_event_action.system_compromised_drilldown = index=* sourcetype=$row.sourcetype$
action.cyences_notable_event_action.attacker_search = | stats count by src_ip
action.cyences_notable_event_action.attacker_drilldown = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa) src_ip=$row.src_ip$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Network
action.cyences_notable_event_action.teams = SOC



[TOR Traffic detected by Firewall]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 3,13,23,33,43,53 * * * *
description = This alert will focus on firewall data (Network_Traffic datamodel) to detect TOR traffic. \
\
Data Collection - Any firewall data that complies with the CIM definition. The alert will look for app=tor value.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.app=tor AND All_Traffic.action=allowed by All_Traffic.src_ip All_Traffic.dest_ip All_Traffic.dest_port All_Traffic.action \
| `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` | `cs_drop_dm_object_name("All_Traffic")` \
| eval cyences_severity = "critical" \
| `cs_tor_traffic_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_tor_traffic_filter
action.cyences_notable_event_action.contributing_events = | datamodel Network_Traffic search strict_fields=false | search All_Traffic.app=tor | `cs_drop_dm_object_name(All_Traffic)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest_ip, dest_port
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Network_Traffic search strict_fields=false | search All_Traffic.app=tor All_Traffic.dest_ip=$row.dest_ip$ | `cs_drop_dm_object_name(All_Traffic)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src_ip
action.cyences_notable_event_action.attacker_drilldown = | datamodel Network_Traffic search strict_fields=false | search All_Traffic.app=tor All_Traffic.src_ip=$row.src_ip$ | `cs_drop_dm_object_name(All_Traffic)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Network
action.cyences_notable_event_action.teams = SOC


# ===============
# Cisco IOS
# ===============
[Cisco IOS - New Connection For User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert will show the new connection to Cisco IOS device.
dispatch.earliest_time = -35m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT" \
| rex "CONNECT:\s+(?<message>.*)\s+source\s+(?<src>[^\s]+)\s+destination\s+(?<dest>[^\s]+)" \
| eval cyences_severity = "low" \
| table _time cyences_severity message src dest \
| `cs_cisco_ios_new_connection_for_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_cisco_ios_new_connection_for_user_filter
action.cyences_notable_event_action.contributing_events = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT" $row.dest$
action.cyences_notable_event_action.attacker_search = | stats count by src
action.cyences_notable_event_action.attacker_drilldown = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT" $row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Cisco IOS
action.cyences_notable_event_action.teams = SOC


[Cisco IOS - Device Failed Login]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert will show the failed login to Cisco IOS device.
dispatch.earliest_time = -35m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT" \
| rex "REJECT:\s+(?<message>.*)\s+source\s+(?<src>[^\s]+)\s+destination\s+(?<dest>[^\s]+)"  \
| eval cyences_severity = "low" \
| table _time cyences_severity message src dest \
| `cs_cisco_ios_device_failed_login_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_cisco_ios_device_failed_login_filter
action.cyences_notable_event_action.contributing_events = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT" $row.dest$
action.cyences_notable_event_action.attacker_search = | stats count by src
action.cyences_notable_event_action.attacker_drilldown = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT" $row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Cisco IOS
action.cyences_notable_event_action.teams = SOC



# =============================
# Fortinet Fortigate Firewall
# =============================

[Fortigate - DNS Sinkhole]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = A Fortigate Firewall DNS alert for when outbound traffic goes to DNS Sinkhole IP.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_fortigate` (sourcetype="fortigate_traffic" OR sourcetype="fortigate_utm") `cs_fortigate_dns_sinkhole_ip` \
| stats count, values(dvc) as dvc, dc(src_port) as dc_src_port, values(dest_port) as dest_port, values(url) as url, values(app) as app, values(rule) as rule by src_ip \
| eval cyences_severity = "medium" \
| `cs_fortigate_dns_sinkhole_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_fortigate_dns_sinkhole_filter
action.cyences_notable_event_action.contributing_events = `cs_fortigate` (sourcetype="fortigate_traffic" OR sourcetype="fortigate_utm") `cs_fortigate_dns_sinkhole_ip`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc, rule, app
action.cyences_notable_event_action.system_compromised_drilldown = `cs_fortigate` (sourcetype="fortigate_traffic" OR sourcetype="fortigate_utm") `cs_fortigate_dns_sinkhole_ip` dvc=$row.dvc$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src_ip
action.cyences_notable_event_action.attacker_drilldown = `cs_fortigate` (sourcetype="fortigate_traffic" OR sourcetype="fortigate_utm") `cs_fortigate_dns_sinkhole_ip` src_ip=$row.src_ip$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = FortiGate
action.cyences_notable_event_action.teams = SOC


[Fortigate - High Threats Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 10,40 * * * *
description = A Fortigate Firewall alerts for high or critical severity threats.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_fortigate` sourcetype="fortigate_utm" severity IN ("high" "critical") \
| eval cyences_severity = case((action=="blocked" or action=="dropped") and (severity=="critical" or severity=="high" or severity=="medium" or severity=="low"), "low", (action=="blocked" or action=="dropped") and severity=="informational", "info", action=="allowed" and severity=="informational", "info", action=="allowed", severity) \
| table _time, subtype, app, signature, severity, cyences_severity, action, dvc, src, src_port, srccountry, src_zone, dest, dest_port, url \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_fortigate_high_threats_alert_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_fortigate_high_threats_alert_filter
action.cyences_notable_event_action.contributing_events = `cs_fortigate` sourcetype="fortigate_utm" severity IN ("high" "critical")
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc
action.cyences_notable_event_action.system_compromised_drilldown = `cs_fortigate` sourcetype="fortigate_utm" severity IN ("high" "critical") dvc=$row.dvc$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(srccountry) as src_location by src
action.cyences_notable_event_action.attacker_drilldown = `cs_fortigate` sourcetype="fortigate_utm" src=$row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = FortiGate
action.cyences_notable_event_action.teams = SOC


[Fortigate - High System Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 10,40 * * * *
description = A Fortigate Firewall alerts for high or critical severity system events. Anything license-related is excluded from this alert as generally it's not that high severity. You can view them on the Fortigate dashboard.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
# TODO - Need to check the license related keywords in the event.
search = `cs_fortigate` sourcetype="fortigate_event" severity IN ("critical", "high") NOT "*license*" \
| eval cyences_severity = "high" \
| rename logdesc as description \
| table _time, src_ip, subtype, signature, cyences_severity, action, description, dvc \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_fortigate_high_system_alerts_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_fortigate_high_system_alerts_filter
action.cyences_notable_event_action.contributing_events = `cs_fortigate` sourcetype="fortigate_event" severity IN ("high" "critical") NOT "*license*"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc
action.cyences_notable_event_action.system_compromised_drilldown = `cs_fortigate` sourcetype="fortigate_event" severity IN ("high" "critical") NOT "*license*" dvc=$row.dvc$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = FortiGate
action.cyences_notable_event_action.teams = Compliance


# TODO - Add the alerts related to inbound/outbound traffic from blocked ips when we do countermeasure related changes.



# ==============
# Palo Alto Firewall
# ==============
[Palo Alto - DNS Sinkhole]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Palo Alto Firewall DNS alert for when outbound traffic goes to 72.5.65.111
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` (sourcetype="pan:traffic" OR sourcetype="pan:threat") dest_ip="72.5.65.111" \
| stats count, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(src_port) as dc_src_port, values(dest_port) as dest_port, values(url) as url, values(app) as app, values(rule) as rule, values(http_category) as http_category by src_ip \
| eval cyences_severity = "medium" \
| `cs_palo_dns_sinkhole_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_dns_sinkhole_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` (sourcetype="pan:traffic" OR sourcetype="pan:threat") dest_ip="72.5.65.111"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc_name, rule, app, http_category
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` (sourcetype="pan:traffic" OR sourcetype="pan:threat") dest_ip="72.5.65.111" dvc_name=$row.dvc_name$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src_ip
action.cyences_notable_event_action.attacker_drilldown = `cs_palo` (sourcetype="pan:traffic" OR sourcetype="pan:threat") dest_ip="72.5.65.111" src_ip=$row.src_ip$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto
action.cyences_notable_event_action.teams = SOC, Compliance


[Palo Alto - High Threats Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = A Palo Alto Firewall alerts for high or critical severity threats.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:threat" severity IN ("high" "critical") \
| eval cyences_severity = case( \
    (action=="blocked" or action=="dropped") and (severity=="critical" or severity=="high" or severity=="medium" or severity=="low"), "low", \
    (action=="blocked" or action=="dropped") and severity=="informational", "info", \
    action=="allowed" and severity=="informational", "info", \
    action=="allowed", severity) \
| table _time, log_subtype, threat_category, app, signature, severity, cyences_severity, action, threat, dvc, dvc_name, src, src_port, src_location, src_zone, dest, dest_port, dest_translated_ip, dest_translated_port, url \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_high_threats_alert_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_high_threats_alert_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` sourcetype="pan:threat" severity IN ("high" "critical")
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc, dvc_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` sourcetype="pan:threat" severity IN ("high" "critical") dvc=$row.dvc$ dvc_name=$row.dvc_name$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(src_location) as src_location by src
action.cyences_notable_event_action.attacker_drilldown = `cs_palo` sourcetype="pan:threat" src=$row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto
action.cyences_notable_event_action.teams = SOC, Compliance


[Palo Alto - High System Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = A Palo Alto Firewall alerts for high or critical severity system events. Anything license-related is excluded from this alert as generally it's not that high severity. You can view them on the Palo Alto dashboard.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:system" severity IN ("critical", "high") NOT "license for" \
| eval cyences_severity = "high" \
| table _time, log_subtype, signature, cyences_severity, action, description, dvc, dvc_name \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_high_system_alerts_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_high_system_alerts_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` sourcetype="pan:system" severity IN ("high" "critical")
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc, dvc_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` sourcetype="pan:system" severity IN ("high" "critical") dvc=$row.dvc$ dvc_name=$row.dvc_name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto
action.cyences_notable_event_action.teams = Compliance


[Palo Alto - WildFire Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A Palo Alto Firewall WildFire events Alert
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:threat" log_subtype="wildfire" \
| eval cyences_severity = "high" \
| table _time, cyences_severity, app, signature, severity, action, threat, dvc, dvc_name, src, src_port, src_location, src_zone, dest, dest_port, dest_translated_ip, dest_translated_port, url \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_wildfire_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_wildfire_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` sourcetype="pan:threat"  log_subtype="wildfire"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc, dvc_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` sourcetype="pan:threat"  log_subtype="wildfire" dvc=$row.dvc$ dvc_name=$row.dvc_name$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(src_location) as src_location by src
action.cyences_notable_event_action.attacker_drilldown = `cs_palo` sourcetype="pan:threat" log_subtype="wildfire" src=$row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto
action.cyences_notable_event_action.teams = SOC, Compliance


[Palo Alto Firewall - Commits]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = A Palo Alto Firewall alerts for commit events.
dispatch.earliest_time = -20m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:system" "Commit job succeeded" \
| eval cyences_severity = "low" \
| table _time cyences_severity serial_number dvc dvc_name description \
| `cs_palo_commit_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_commit_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` sourcetype="pan:system" "Commit job succeeded"
action.cyences_notable_event_action.system_compromised_search = | stats count by dvc, dvc_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` sourcetype="pan:system" "Commit job succeeded" dvc=$row.dvc$ dvc_name=$row.dvc_name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto
action.cyences_notable_event_action.teams = SOC


# ================
# Sophos Firewall
# ================
[Sophos Firewall - Lost Connection to Sophos Central]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 51 * * * *
description = This alert will trigger when a Firewall lost connection to Sophos Central.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::LostConnectionToSophosCentral" \
| stats count, latest(_time) as _time, values(name) as description  by host, location | sort -count \
| eval cyences_severity = "high" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_firewall_lost_connection_to_sophos` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_firewall_lost_connection_to_sophos
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::LostConnectionToSophosCentral"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::LostConnectionToSophosCentral" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Firewall
action.cyences_notable_event_action.teams = Compliance


[Sophos Firewall - VPN Tunnel Down]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 52 * * * *
description = This alert will trigger when a Firewall VPN tunnel goes down.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallVPNTunnelDown" \
| stats count, latest(_time) as _time, values(name) as description by host, location | sort - count \
| eval cyences_severity = "high" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_firewall_vpn_tunnel_down` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_firewall_vpn_tunnel_down
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallVPNTunnelDown"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallVPNTunnelDown" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Firewall
action.cyences_notable_event_action.teams = Compliance


[Sophos Firewall - Gateway Down]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 53 * * * *
description = This alert will trigger when a Firewall VPN gateway down.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallGatewayDown" \
| stats count, latest(_time) as _time, values(name) as description by host, location | sort - count \
| eval cyences_severity = "high" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_firewall_vpn_gateway_down` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_firewall_vpn_gateway_down
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallGatewayDown"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallGatewayDown" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Firewall
action.cyences_notable_event_action.teams = Compliance


[Sophos Firewall - Advanced Threat Detected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 53 * * * *
description = This alert will trigger when advanced threat was detected.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallAdvancedThreatProtectionDetailed" \
| stats count, latest(_time) as _time, values(name) as description by host, location | sort - count \
| eval cyences_severity = "critical" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_firewall_advanced_threat_detected` 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_firewall_advanced_threat_detected
action.cyences_notable_event_action.contributing_events = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallAdvancedThreatProtectionDetailed"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by location
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` sourcetype="sophos_events" type="Event::Firewall::FirewallAdvancedThreatProtectionDetailed" location=$row.location$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos Firewall
action.cyences_notable_event_action.teams = SOC


# ===============
# F5 Big IP WAF
# ===============
[F5 BIGIP - Not Blocked Attacks]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 10 * * * *
description = A not blocked attack events from F5 BIGIP ASM 
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_f5_bigip_asm` ip_client="*" dest_ip="*" severity IN ("critical","high","medium") enforcement_action!=block attack_type!="JSON Parser Attack" \
| eval cyences_severity = if(severity="informational", "info", severity) \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time cyences_severity ip_client src_port dest_ip dest_port manage_ip_addr x_fwd_hdr_val attack_type enforcement_action blocking_exception_reason client_type credential_stuffing_lookup_result device_id enforced_by geo_info http_class ip_addr_intelli ip_route_domain login_result method mobile_application_name mobile_application_version policy_apply_date policy_name protocol protocol_info req_status resp_code route_domain sig_ids sig_names sub_violates threat_campaign_names unit_host uri username violate_details violate_rate violations virus_name  is_trunct \
| `cs_f5_bigip_not_blocked_attacks_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_f5_bigip_not_blocked_attacks_filter
action.cyences_notable_event_action.contributing_events =  `cs_f5_bigip_asm` ip_client="*" dest_ip="*" severity IN ("critical","high","medium") enforcement_action!=block attack_type!="JSON Parser Attack"
action.cyences_notable_event_action.system_compromised_search = | stats count by dest_ip
action.cyences_notable_event_action.system_compromised_drilldown =  `cs_f5_bigip_asm` ip_client="*" dest_ip="*" severity IN ("critical","high","medium") enforcement_action!=block attack_type!="JSON Parser Attack" dest_ip=$row.dest_ip$
action.cyences_notable_event_action.attacker_search = | stats count by ip_client
action.cyences_notable_event_action.attacker_drilldown =  `cs_f5_bigip_asm` ip_client="*" dest_ip="*" severity IN ("critical","high","medium") enforcement_action!=block attack_type!="JSON Parser Attack" ip_client=$row.ip_client$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = F5 BIGIP
action.cyences_notable_event_action.teams = SOC


# ==============
# Cisco Meraki
# ==============
[Cisco Meraki - Organizational Security Events]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 57 * * * *
description = Cisco Meraki Organizational Security events.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_cisco_meraki` sourcetype="meraki:organizationsecurity" \
| eval cyences_severity=if(blocked=="true", "info", case(priority==1, "critical", priority==2, "high", 1==1, "medium")) \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, eventType, message, priority, cyences_severity, srcIp, destIp, deviceMac, clientMac, protocol, blocked, classification \
| `cs_cisco_meraki_org_security_events_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_cisco_meraki_org_security_events_filter
action.cyences_notable_event_action.contributing_events = `cs_cisco_meraki` sourcetype="meraki:organizationsecurity"
action.cyences_notable_event_action.system_compromised_search = | stats count by destIp
action.cyences_notable_event_action.system_compromised_drilldown = `cs_cisco_meraki` sourcetype="meraki:organizationsecurity" destIp=$row.destIp$
action.cyences_notable_event_action.attacker_search = | stats count by srcIp
action.cyences_notable_event_action.attacker_drilldown = `cs_cisco_meraki` sourcetype="meraki:organizationsecurity" srcIp=$row.srcIp$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Cisco Meraki
action.cyences_notable_event_action.teams = SOC


[Cisco Meraki - Config Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 49 * * * *
description = Cisco Meraki Config Changes Reporting Alert. 
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_cisco_meraki` sourcetype="meraki:audit" \
| eval cyences_severity = "info" \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, page, networkName, networkId, adminName, adminEmail, label, oldValue, newValue, cyences_severity \
| `cs_cisco_meraki_config_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_cisco_meraki_config_changes_filter
action.cyences_notable_event_action.contributing_events = `cs_cisco_meraki` sourcetype="meraki:audit"
action.cyences_notable_event_action.system_compromised_search = | stats count by networkName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_cisco_meraki` sourcetype="meraki:audit" networkName=$row.networkName$
action.cyences_notable_event_action.attacker_search = | stats count by adminEmail
action.cyences_notable_event_action.attacker_drilldown = `cs_cisco_meraki` sourcetype="meraki:audit" adminEmail=$row.adminEmail$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Cisco Meraki
action.cyences_notable_event_action.teams = SOC



# =======================
# Vulnerability Scanners
# =======================
[Detected New Vulnerabilities]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 5 */4 * * *
description = Newly detected Vulnerabilities from vulnerability data. \
\
Data Collection - Qualys, Tenable, Nessus, CrowdStrike Spotlight vulnerability, etc.. 
dispatch.earliest_time = -4h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_all_vuln where  (status="open" OR status="reopened") \
| dedup vul_id \
| where indextime >= relative_time(now(), "-4h@h") AND first_found >= relative_time(now(), "-72h@h")  \
```Because of delayed event ingestion, indextime and first_found are used to search for events``` \
| fields - days_ago indextime time \
| `cs_human_readable_time_format(first_found)` \
| `cs_human_readable_time_format(last_found)` \
| eval cyences_severity = if(severity="informational", "info", severity) \
| `cs_newly_detected_vuln_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_newly_detected_vuln_filter
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Vulnerability
action.cyences_notable_event_action.teams = SOC



# ================
# Windows / AD
# ================
# Reports
[Windows - Hosts Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 2 * * 0
description = Supporting Report for Windows update check alert (Runs every Sunday at 3 AM) - Generates the host list in the lookup
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats count where `cs_wineventlog_system` by host | append [| inputlookup all_windows_hosts.csv] \
| append [| inputlookup cs_windows_decommissioned_hosts.csv | eval status="decommissioned"] \
| stats values(status) as status by host \
| search NOT status="decommissioned" \
| table host \
| outputlookup all_windows_hosts.csv
action.cyences_notable_event_action.products = Windows


[AD - cs_ad_obj_domain - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every day @1AM)
dispatch.earliest_time = -24h@h
dispatch.latest_time = @h
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_health_logs` \
| fields host, DomainNetBIOSName,DomainDNSName,ForestName,Site \
| stats count by host, DomainNetBIOSName,DomainDNSName,ForestName,Site \
| eval DomainDNSName=lower(DomainDNSName),ForestName=lower(ForestName),Site=lower(Site),host=lower(host),DomainNetBIOSName=lower(DomainNetBIOSName) \
| eval domain=DomainNetBIOSName \
| table host,domain,DomainNetBIOSName,DomainDNSName,ForestName,Site \
| sort ForestName,Site,DomainDNSName,host \
| eval _key = host \
| outputlookup cs_ad_obj_domain append=true
action.cyences_notable_event_action.products = Windows AD


[AD - cs_ad_obj_group - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|group" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields DomainDNSName, OU, admonEventType, adminCount, c, cn, orig_cn, dSCorePropagationData, dcName, deletedDate, description, displayName, distinguishedName, dn, dn_hist, dn_path, domain, groupType, groupType_Name, guid_lookup, instanceType, isCriticalSystemObject, isDeleted, isRecycled, l, lastKnownParent, managedBy, member, name, objectCategory, objectClass, objectGUID, objectSid, primaryGroupToken, sAMAccountName, sAMAccountType, showInAdvancedViewOnly, sid_lookup, st, systemFlags, uSNChanged, uSNCreated, whenChanged, whenCreated \
| rex field=distinguishedName max_match=0 "\\,DC\\=(?<DomainDNSName>[^(\\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\\-\\s,\\$(.+\\x5C{1}.+)[^\\sDEL:]+)\\sDEL:" \
| rex field=objectSid "\\d+\\-(?<primaryGroupToken>\\d+)$" \
| eval distinguishedName=lower(distinguishedName), displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName), dn=lower(distinguishedName), last_evt_flg=admonEventType, cn=lower(cn), lastKnownParent=lower(lastKnownParent), objectGUID=lower(objectGUID), DomainDNSName=lower(DomainDNSName), OU=lower(OU), sAMAccountName=lower(sAMAccountName), dNSHostName=if(isnull(dNSHostName),if(isnull(orig_cn),((displayName . ".") . DomainDNSName),((orig_cn . ".") . DomainDNSName)),dNSHostName), orig_evt_dn=lower(orig_evt_dn), member=lower(member), adminCount=if(isnull(adminCount),0,adminCount) \
| rex field=distinguishedName "(?i)(?:\\,(?<!\\x5C{1}))(?<dn_path>(cn|ou|dc)\\=[^$]+)" \
| rex field=distinguishedName "(?i)(?:\\,(?<!\\x5C{1}))(cn|ou|dc)\\=(?<orig_ou>[^\\,]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if((match(lower(last_evt_flg),"deleted") OR match(lower(isDeleted),"true")),strptime(whenChanged,"%I:%M.%S %p, %a %m/%d/%Y"),0), OU=if(isnull(OU),orig_ou,OU) \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName, domain] \
| lookup cs_ad_audit_group_details groupType,sAMAccountType OUTPUT groupType_Name,MSADGroupType,MSADGroupClass \
| eval isDistributionList=if((sAMAccountType == "268435457"),"TRUE","FALSE") \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if((dn_hist_cnt > 1),lower(dn_hist_hold),""), src_nt_domain=domain \
| fillnull value=0 uSNChanged,uSNCreated,whenChanged,whenCreated \
| fillnull value="" OU,c,orig_cn,dSCorePropagationData,dcName,description,displayName,distinguishedName,dn,dn_path,groupType,groupType_Name,MSADGroupType,MSADGroupClass,guid_lookup,instanceType,l,lastKnownParent,last_evt_flg,managedBy,member,name,objectCategory,objectSid,primaryGroupToken,sAMAccountName,sAMAccountType,sid_lookup,st,systemFlags,uSNChanged,uSNCreated \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName==cn,"",sAMAccountName) \
| eval lookup_grp=lower(d_cn)."|".lower(d_dn)."|".lower(d_sam) \
| makemv delim="|" lookup_grp \
| makemv delim="|" member \
| eval membercount=if((member == ""),0,mvcount(member)) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| table key_val, DomainDNSName, OU, adminCount, c, cn, orig_cn, dSCorePropagationData, dcName, deletedDate, description, displayName, distinguishedName, dn, dn_hist, dn_path, domain, groupType, groupType_Name, guid_lookup, instanceType, isCriticalSystemObject, isDeleted, isDistributionList, isRecycled, l, lastKnownParent, last_evt_flg, lookup_grp, managedBy, member, membercount, MSADGroupType, MSADGroupClass, name, objectCategory, objectClass, objectGUID, objectSid, orig_evt_dn, primaryGroupToken, sAMAccountName, sAMAccountType, showInAdvancedViewOnly, sid_lookup, src_nt_domain, st, systemFlags, uSNChanged, uSNCreated, whenChanged, whenCreated, time \
| lookup cs_ad_obj_group domain,objectGUID OUTPUT lookup_grp AS p_lookup_grp \
| eval lookup_grp=if(isnull(p_lookup_grp),mvjoin(lookup_grp,"|"),mvjoin(lookup_grp,"|")."|".mvjoin(p_lookup_grp,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_grp \
| fields - p_lookup_grp \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_group append=true
action.cyences_notable_event_action.products = Windows AD


[AD - cs_ad_obj_computer - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|person|organizationalPerson|user|computer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields DomainDNSName,OU,admonEventType,accountExpires,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,deletedDate,description,displayName,distinguishedName,dn,dn_path,domain,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,localPolicyFlags,logonCount,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,primaryGroupID,pwdLastSet,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,st,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),lastKnownParent=lower(lastKnownParent),objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),OU=lower(OU),sAMAccountName=lower(sAMAccountName),dNSHostName=if(isnull(dNSHostName),if(isnull(orig_cn),displayName.".".DomainDNSName,orig_cn.".".DomainDNSName),dNSHostName),orig_evt_dn=lower(orig_evt_dn) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(?<dn_path>(cn|ou|dc)\=[^$]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0) \
| lookup cs_ad_obj_uac userAccountControl OUTPUT uac_bin_map, uac_details \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),""),src_nt_domain=domain \
| fillnull value=0 badPwdCount,lastLogonTimestamp,logonCount,primaryGroupID,pwdLastSet,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| fillnull value="" OU,accountExpires,badPasswordTime,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,instanceType,isCriticalSystemObject,l,lastKnownParent,lastLogon,last_evt_flg,localPolicyFlags,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,orig_evt_dn,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,src_nt_domain,st \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName=cn,"",lower(sAMAccountName)) \
| eval key_val=objectGUID."#".DomainDNSName,lookup_cmp=lower(d_cn)."|".lower(d_dn)."|".d_sam \
| makemv delim="|" lookup_cmp \
| eventstats values(lookup_cmp) AS lookup_cmp by key_val \
| table key_val,DomainDNSName,OU,accountExpires,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,deletedDate,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,last_evt_flg,localPolicyFlags,logonCount,lookup_cmp,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,orig_evt_dn,primaryGroupID,pwdLastSet,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,src_nt_domain,st,uac_details,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated,time \
| lookup cs_ad_obj_computer domain objectGUID OUTPUT lookup_cmp AS p_lookup_cmp \
| eval lookup_cmp=if(isnull(p_lookup_cmp),mvjoin(lookup_cmp,"|"),mvjoin(lookup_cmp,"|")."|".mvjoin(p_lookup_cmp,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_cmp \
| fields - p_lookup_cmp \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_computer append=true
action.cyences_notable_event_action.products = Windows AD


[AD - cs_ad_obj_gpo - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|container|groupPolicyContainer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields admonEventType,cn,deletedDate,displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,isCriticalSystemObject,isRecycled,isDeleted,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,showInAdvancedViewOnly,systemFlags,uSNChanged,uSNCreated,versionNumber,whenChanged,whenCreated,_time \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(DomainDNSName,".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| rex field=distinguishedName "(?msi)(?:CN\=\{)(?<gpo_link>[^\}]+)\}\,CN\=Policies" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),orig_cn=lower(orig_cn),lastKnownParent=lower(lastKnownParent),objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),orig_evt_dn=lower(orig_evt_dn),gpo_link=lower(gpo_link) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(cn|ou|dc)\=(?<orig_ou>[^\,]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0),OU=if(isnull(OU),orig_ou,OU) \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),"") \
| fillnull value=0 uSNChanged,uSNCreated,whenChanged,whenCreated \
| fillnull value="" displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,systemFlags,uSNChanged,uSNCreated,versionNumber \
| eval key_val=objectGUID."#".DomainDNSName \
| table key_val,cn,deletedDate,displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,isCriticalSystemObject,isRecycled,isDeleted,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,showInAdvancedViewOnly,systemFlags,uSNChanged,uSNCreated,versionNumber,whenChanged,whenCreated,time \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_gpo append=true
action.cyences_notable_event_action.products = Windows AD


[AD - cs_ad_obj_user - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=*|person|organizationalPerson|user" NOT "objectClass=top|person|organizationalPerson|user|computer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields _time,DomainDNSName,OU,accountExpires,adminCount,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,deletedDate,department,description,displayName,distinguishedName,dn,dn_path,domain,givenName,guid_lookup,initials,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,admonEventType,lockoutTime,logonCount,logonHours,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,physicalDeliveryOfficeName,postalCode,primaryGroupID,pwdLastSet,sAMAccountName,sAMAccountType,servicePrincipalName,showInAdvancedViewOnly,sid_lookup,sn,st,streetAddress,title,uSNChanged,uSNCreated,userAccountControl,userPrincipalName,userWorkstations,whenChanged,whenCreated \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),lastKnownParent=lower(lastKnownParent),user_type="user",objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),OU=lower(OU),sAMAccountName=lower(sAMAccountName),userPrincipalName=lower(userPrincipalName),orig_evt_dn=lower(orig_evt_dn) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(?<dn_path>(cn|ou|dc)\=[^$]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0) \
| lookup cs_ad_obj_uac userAccountControl OUTPUT uac_bin_map, uac_details \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),"") \
| fillnull value=0 adminCount,badPwdCount,lastLogonTimestamp,logonCount,primaryGroupID,pwdLastSet,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| fillnull value="" OU,accountExpires,badPasswordTime,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,department,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,givenName,guid_lookup,initials,instanceType,l,lastKnownParent,last_evt_flg,lockoutTime,logonHours,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,orig_evt_dn,physicalDeliveryOfficeName,postalCode,primaryGroupID,sAMAccountName,sAMAccountType,servicePrincipalName,sid_lookup,sn,st,streetAddress,title,uSNChanged,uSNCreated,uac_details,userPrincipalName,userWorkstations,uac_bin_map \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName=cn,"",lower(sAMAccountName)),d_princ=if(userPrincipalName=="","",userPrincipalName) \
| eval key_val=objectGUID."#".DomainDNSName,lookup_usr=lower(d_cn)."|".lower(d_dn)."|".d_sam."|".d_princ \
| makemv delim="|" lookup_usr \
| eventstats values(lookup_usr) AS lookup_usr by key_val \
| table key_val,DomainDNSName,OU,accountExpires,adminCount,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,deletedDate,department,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,givenName,guid_lookup,initials,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,last_evt_flg,lockoutTime,logonCount,logonHours,lookup_usr,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,orig_evt_dn,physicalDeliveryOfficeName,postalCode,primaryGroupID,pwdLastSet,sAMAccountName,sAMAccountType,servicePrincipalName,showInAdvancedViewOnly,sid_lookup,sn,st,streetAddress,title,uac_details,uSNChanged,uSNCreated,userAccountControl,userPrincipalName,userWorkstations,whenChanged,whenCreated,user_type,time \
| lookup cs_ad_obj_user domain,objectGUID OUTPUT lookup_usr AS p_lookup_usr \
| eval lookup_usr=if(isnull(p_lookup_usr),mvjoin(lookup_usr,"|"),mvjoin(lookup_usr,"|")."|".mvjoin(p_lookup_usr,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_usr \
| fields - p_lookup_usr \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_user append=true
action.cyences_notable_event_action.products = Windows AD


# Alerts
[Windows - Host is Missing Windows Updates]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 3 1 * *
description = This alert is for Windows hosts that haven't received the latest update. It automatically runs on the first of every month and checks for any updates that might have been released in the previous month.
dispatch.earliest_time = -31d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_system` EventCode=19 SourceName="Microsoft-Windows-WindowsUpdateClient" | stats count by host | eval updated="true" | append [| inputlookup all_windows_hosts.csv] | eval host=upper(host) \
| stats values(updated) as updated by host | search NOT updated="true" \
| append [| inputlookup cs_windows_decommissioned_hosts.csv | eval status="decommissioned" | eval host=upper(host)] \
| stats values(status) as status by host | search NOT status="decommissioned" \
| eval cyences_severity = "high" \
| table host cyences_severity \
| `cs_windows_host_missing_update_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_host_missing_update_filter
action.cyences_notable_event_action.system_compromised_search = | dedup host | table host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_wineventlog_system` EventCode=19 SourceName="Microsoft-Windows-WindowsUpdateClient" host=$row.host$
action.cyences_send_email_action = 1
action.cyences_send_email_action.param.cyences_severities = critical, high
action.cyences_notable_event_action.products = Windows
action.cyences_notable_event_action.teams = Compliance


[Windows - Firewall Disabled Event]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 6,16,26,36,46,56 * * * *
description = Windows Firewall Disabled Event from WinEventLog
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode=4950 SettingType="Enable Windows Defender Firewall" SettingValue=No \
| eval cyences_severity = "high" \
| table _time, cyences_severity, host, EventCode, ProfileChanged, SettingType, SettingValue \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_firewall_disabled_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_firewall_disabled_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode=4950 SettingType="Enable Windows Defender Firewall" SettingValue=No
action.cyences_notable_event_action.system_compromised_search = | stats count, values(ProfileChanged) as ProfileChanged by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_wineventlog_security` EventCode=4950 host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows
action.cyences_notable_event_action.teams = SOC


[Windows - Firewall is Disabled]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
# It will run every hour at minute 2 (savedsearch is scheduled 2 minutes delayed to capture the latest event which is generated every hour at minute 0).
cron_schedule = 2 * * * *
description = The alert will be triggered if the Windows Firewall has been disabled from its active state. The same alert will be suppressed if it triggers again on the same day.
# To Keep the current day as a suppression time, the earliest time is set to the current day's start time to generate the notable every day if the firewall is disabled.
dispatch.earliest_time = @d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
# The search captures the latest 2 events of every host and checks whether at least one Windows Firewall profile has been disabled from its active state. If this occurs, an alert will be triggered.
# Also, If an event with a firewall status disabled occurs for the first time in a day, an alert will be triggered.
search = `cs_windows_firewall_status_logs` \
| dedup 2 host \
| stats latest(Domain_Profile_Status) as Domain_Profile_Status latest(Private_Profile_Status) as Private_Profile_Status latest(Public_Profile_Status) as Public_Profile_Status earliest(Domain_Profile_Status) as Previous_Domain_Profile_Status earliest(Private_Profile_Status) as Previous_Private_Profile_Status earliest(Public_Profile_Status) as Previous_Public_Profile_Status count as event_count by host \
| eval changed = if((Previous_Domain_Profile_Status="ON" AND Domain_Profile_Status="OFF") OR (Previous_Private_Profile_Status="ON" AND Private_Profile_Status="OFF") OR (Previous_Public_Profile_Status="ON" AND Public_Profile_Status="OFF"), "Yes", "No") \
| search (changed = "Yes") OR ((event_count=1) AND (Domain_Profile_Status="OFF" OR Private_Profile_Status="OFF" OR Public_Profile_Status="OFF")) \
| eval cyences_severity = if(Public_Profile_Status="OFF" AND Private_Profile_Status="OFF" AND Domain_Profile_Status="OFF", "high", "medium") \
| table host Domain_Profile_Status Private_Profile_Status Public_Profile_Status cyences_severity \
| `cs_windows_firewall_is_disabled_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_firewall_is_disabled_filter
action.cyences_notable_event_action.contributing_events = `cs_windows_firewall_status_logs` 
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_windows_firewall_status_logs` host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows
action.cyences_notable_event_action.teams = SOC


[Windows - Certificate is Expiring Soon]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
# The alert will be triggered every 24 hours at midday using the data from the previous 24 hours.
cron_schedule = 10 12 * * *
description = The alert will be triggered if the certificate is expiring in 30 days.
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
# This search captures certificates that will expire within 30 days, and if they are expiring within seven day, the severity will be critical, otherwise, the severity will be high.
search = `cs_windows_cert_store_idx` sourcetype="windows:certstore:local" \
| dedup host SerialNumber \
| `cs_windows_cert_time_format(NotAfter)` \
| `cs_windows_cert_time_format(NotBefore)` \
| eval interval_seven_day=relative_time(now(),"+7d") \
| where (relative_time(now(),"-1m") < NotAfter AND NotAfter < relative_time(now(),"+1d")) OR (relative_time(now(),"+6d") < NotAfter AND NotAfter < relative_time(now(),"+7d")) OR (relative_time(now(),"+29d") < NotAfter AND NotAfter < relative_time(now(),"+30d")) \
| eval cyences_severity = if(NotAfter<=interval_seven_day, "critical", "high") \
| `cs_human_readable_time_format(NotAfter)` \
| `cs_human_readable_time_format(NotBefore)` \
| table host Subject DnsNameList Issuer NotBefore NotAfter FriendlyName SerialNumber PSPath PSParentPath PSParentPath_FriendlyName cyences_severity \
| fillnull value="-" PSParentPath_FriendlyName \
| append \
    [ | search `cs_windows_cert_store_idx` sourcetype="windows:certstore:ca:issued" \
    | dedup Issued_Request_ID \
    | `cs_windows_cert_time_format(Certificate_Expiration_Date)` \
    | `cs_windows_cert_time_format(Certificate_Effective_Date)` \
    | eval interval_seven_day=relative_time(now(),"+7d") \
    | where (relative_time(now(),"-1m") < Certificate_Expiration_Date AND Certificate_Expiration_Date < relative_time(now(),"+1d")) OR (relative_time(now(),"+6d") < Certificate_Expiration_Date AND Certificate_Expiration_Date < relative_time(now(),"+7d")) OR (relative_time(now(),"+29d") < Certificate_Expiration_Date AND Certificate_Expiration_Date < relative_time(now(),"+30d")) \
    | join type=left Certificate_Template \
        [| inputlookup cs_windows_cert_name_mapping.csv ] \
    | eval Certificate_Template=if(isnull(Certificate_Name),Certificate_Template,Certificate_Name."(".Certificate_Template.")") \
    | eval cyences_severity = if(Certificate_Expiration_Date<=interval_seven_day, "critical", "high") \
    | `cs_human_readable_time_format(Certificate_Expiration_Date)` \
    | `cs_human_readable_time_format(Certificate_Effective_Date)` \
    | table host Issued_Common_Name Issued_Request_ID Certificate_Effective_Date Certificate_Expiration_Date Certificate_Template Requester_Name Request_Disposition_Message Serial_Number cyences_severity] \
| `cs_windows_certification_is_expiring_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_certification_is_expiring_filter
action.cyences_notable_event_action.contributing_events = `cs_windows_cert_store_idx` sourcetype="windows:certstore:*"
action.cyences_notable_event_action.system_compromised_search = | fillnull value="-" SerialNumber Issued_Request_ID | stats count by host SerialNumber Issued_Request_ID
action.cyences_notable_event_action.system_compromised_drilldown = `cs_windows_cert_store_idx` sourcetype="windows:certstore:*" host=$row.host$ | fillnull value="-" SerialNumber Issued_Request_ID | search SerialNumber=$row.SerialNumber$ Issued_Request_ID=$row.Issued_Request_ID$ | dedup SerialNumber Issued_Request_ID
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows
action.cyences_notable_event_action.teams = Compliance


[Windows - Event Log Cleared]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert monitors for when WinEventLog events are cleared. \
\
A false positive may appear when an administrator might have intentionally cleared the events.
dispatch.earliest_time = 0
dispatch.latest_time = 
# timerange is provided within the query to reduce the false positive, see notes below
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (`cs_wineventlog_security` EventCode=1102) OR (`cs_wineventlog_system` EventCode=104) earliest=-62m@m latest=-2m@m \
| `cs_user_privilege_mapping(user)` \
| stats values(name) as Message, latest(_time) as event_time, values(EventCode) as EventCode, values(LogName) as LogName, values(user) as user, values(is_privileged_user) as is_privileged_user by dest \
| eval Message=if(isnull(Message), "The event log file was cleared", Message) \
| `cs_human_readable_time_format(event_time)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "high", "medium") \
| table cyences_severity, dest, Message, event_time, EventCode, LogName, user, is_privileged_user \
| `cs_windows_event_log_cleared_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_event_log_cleared_filter
action.cyences_notable_event_action.contributing_events = (`cs_wineventlog_security` EventCode=1102) OR (`cs_wineventlog_system` EventCode=104) 
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest, LogName
action.cyences_notable_event_action.system_compromised_drilldown = (`cs_wineventlog_security` EventCode=1102) OR (`cs_wineventlog_system` EventCode=104) dest=$row.dest$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by user
action.cyences_notable_event_action.attacker_drilldown = (`cs_wineventlog_security` EventCode=1102) OR (`cs_wineventlog_system` EventCode=104) user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows
action.cyences_notable_event_action.teams = SOC


[Windows - Event Logging Service Shut Down]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will trigger when the event Logging Service Shut Down.
dispatch.earliest_time = 0
dispatch.latest_time = 
# timerange is provided within the query to reduce the false positive, see notes below
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (`cs_wineventlog_security` EventCode=1100) OR (`cs_wineventlog_system` EventCode IN (6005, 1074)) earliest=-64m@m latest=now \
| sort 0 - _time \
| `cs_user_privilege_mapping(user)` \
| stats list(EventCode) as EventCode, list(_time) as all_timestamp values(eval(if(EventCode==1100, LogName, NULL()))) as LogName, values(eval(if(EventCode==1100, user, NULL()))) as user, latest(eval(if(EventCode==1100, _time, NULL()))) as event_time, values(is_privileged_user) as is_privileged_user by dest \
| search EventCode=1100 \
| eval index_of_1100=mvfind(EventCode, "^1100$") | eval prev_eventcode=mvindex(EventCode,index_of_1100-1) | eval next_eventcode=mvindex(EventCode,index_of_1100+1) \
| eval timestamp_1100=mvindex(all_timestamp, index_of_1100) | eval prev_timestamp=mvindex(all_timestamp,index_of_1100-1) | eval next_timestamp=mvindex(all_timestamp,index_of_1100+1) \
| eval prev_timediff=prev_timestamp-timestamp_1100, next_timediff=timestamp_1100-next_timestamp \
| search NOT (next_eventcode=1074 prev_eventcode=6005 next_timediff<800 prev_timediff<500) | where timestamp_1100<=relative_time(now(),"-2m@m") AND timestamp_1100>=relative_time(now(),"-62m@m") \
| eval Message="The event logging service has shut down.", EventCode=1100 \
| `cs_human_readable_time_format(event_time)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "medium", "low") \
| table cyences_severity, dest, Message, event_time, EventCode, LogName, user, is_privileged_user \
| `cs_windows_event_log_service_shutdown_filter`
# Excluding EventCode sequence 1074 (Windows Shutdown) → 1100 (Event logging shutdown) → 6005 (Event logging start)
# with time-gap 500 seconds for pre_timediff, 800 seconds for next_timediff
# Search query is is lagging behind by 2 minutes to avoid false positives where EventCode 6005 (logging started) comes after the alert has been triggred.
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_event_log_service_shutdown_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode=1100
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest, LogName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_wineventlog_security` EventCode=1100 dest=$row.dest$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by user
action.cyences_notable_event_action.attacker_drilldown = `cs_wineventlog_security` EventCode=1100 user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows
action.cyences_notable_event_action.teams = SOC


[AD - Group Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = Change in Active Directory Group.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("groupchanged")` \
| `ms_obj_group_change_out`\
| fields - member_obj_lkp\
| eval cyences_severity = case( in(group_obj_nm, `cs_ad_important_group`) or in(group_obj_nm, `cs_ad_important_group_internal`), "medium", true(), "low")  \
| rename adminuser as "Administrator",msad_action as "Action",group_obj_nm as "Group_Name",MSADGroupType as "Group_Type",MSADGroupClass AS "Group_Class",signature as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_group_changed_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_group_changed_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` [| inputlookup cs_ad_audit_change_event_codes WHERE change_category="Group" | stats values(EventCode) AS EventCode,values(obj_type) AS obj_type | format] src_user_type="user" NOT((EventCode=4723 OR EventCode=4738) AND src_user!=user)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC


[AD - Group Membership Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = Change in Active Directory Group Membership.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("groupmembershipchanged")`\
| `ms_obj_groupmembership_change_out`\
| eval cyences_severity = case( in(group_obj_nm, `cs_ad_important_group`) or in(group_obj_nm, `cs_ad_important_group_internal`), "medium", true(), "low")  \
| rename  group_obj_nm as "Target_Group",MSADGroupClass as "Class",msad_action AS "Action",member AS "Target Member",member_obj_lkp AS "Target Member Lookup",MSADGroupType as "Type",adminuser as "Admin User",MSADChanges as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_group_membership_changed_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_group_membership_changed_filter
action.cyences_notable_event_action.contributing_events = `ms_obj_changes_base_cat_customised("groupmembershipchanged")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC


[AD - Group Policy Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = Change in Active Directory Group Policy.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("grouppolicychanged")`\
| fields _time, session_id, src_nt_domain, src_user,Object_Name_Guid,displayName,dir_svcs_action,AttributeLDAPDisplayName,AttributeValue,MSADChangedAttributes,Correlation_ID,signature,msad_action,Old_DN,New_DN\
| fillnull value="" Correlation_ID,msad_action\
| eval adminuser=if(isnull(src_nt_domain),src_user,src_nt_domain."\\".src_user) \
| eval Object_Lookup_Name="{".lower(Object_Name_Guid)."}" \
| join type=left Object_Lookup_Name [| inputlookup cs_ad_obj_gpo | fields cn, displayName | rename cn AS Object_Lookup_Name | table Object_Lookup_Name, displayName]\
| eval displayName=if(isnull(displayName),"Warning: ".Object_Lookup_Name." GPO CN not found in the AD_Obj_GPO Lookup. If GPO is new wait 15 minutes and run report again, or check that ms_ad_obj_sched_sync_gpo scheduled search is running as scheduled.",displayName) \
| `ms_obj_msad-changed-attributes`\
| stats max(_time) AS last_time, min(_time) AS start_time,list(MSADChanges) AS MSADChanges,values(Correlation_ID) AS Correlation_IDs by session_id,Object_Lookup_Name,displayName,adminuser,signature,msad_action\
| eval MSADChanges=mvjoin(MSADChanges, "########")\
| eval MSADChanges=case(isnull(signature) AND isnull(MSADChanges),"Unknown Changes",isnull(signature),MSADChanges,isnotnull(MSADChanges),"Signature: ".signature."########".MSADChanges)\
| `cs_human_readable_time_format(start_time)` | `cs_human_readable_time_format(last_time)` \
| eval Session_Time="Session ID (".session_id.")|Start: ".start_time."|End: ".last_time \
| eval cyences_severity = case( in(displayName, `cs_ad_important_policy`) or in(displayName, `cs_ad_important_policy_internal`), "medium", true(), "low")  \
| table displayName,cyences_severity,adminuser,Session_Time,msad_action,Correlation_IDs,MSADChanges\
| makemv delim="########" MSADChanges\
| makemv delim="|" Session_Time\
| rename adminuser as "Administrator",msad_action as "Action",displayName as "GPO_Name",MSADChanges as "Changes" \
| `cs_ad_group_policy_changed_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_group_policy_changed_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` [| inputlookup cs_ad_audit_change_event_codes WHERE change_category="Group Policy" | stats values(EventCode) AS EventCode,values(obj_type) AS obj_type | format] src_user_type="user" NOT((EventCode=4723 OR EventCode=4738) AND src_user!=user)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC, Compliance


[AD - User Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = User Changed on Active Directory.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("userchanged")`\
| `ms_obj_user_change_out`\
| eval cyences_severity = case( in(dest_user_subject, `cs_ad_important_user`) or in(dest_user_subject, `cs_ad_important_user_internal`), "medium", true(), "low")  \
| rename adminuser as "Administrator",msad_action as "Action",dest_user_subject as "Target_User_ID",MSADChanges as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_user_changed_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_user_changed_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` [| inputlookup cs_ad_audit_change_event_codes WHERE change_category="User" | stats values(EventCode) AS EventCode,values(obj_type) AS obj_type | format] src_user_type="user" NOT((EventCode=4723 OR EventCode=4738) AND src_user!=user)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC, Compliance


[AD - User Locked Out]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = A user account was locked out on Active Directory.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` (EventCode=4740) \
| eval Account_Name=mvfilter(NOT match(Account_Name, "\$")) \
| fields ComputerName Account_Domain Account_Name Caller_Computer_Name \
| rename ComputerName as "Domain_Controller", Account_Domain as User_Domain ,Account_Name as "User_Name", Caller_Computer_Name as "Source_Computer_Name" \
| fillnull value="-" Source_Computer_Name \
| `cs_user_privilege_mapping(User_Name)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical", "medium") \
| table _time,cyences_severity,User_Name,User_Domain,Source_Computer_Name,Domain_Controller,is_privileged_user \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_user_locked_out_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_user_locked_out_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` (EventCode=4740)
action.cyences_notable_event_action.system_compromised_search = | stats count by Source_Computer_Name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_wineventlog_security` (EventCode=4740) Caller_Computer_Name=$row.Source_Computer_Name$
action.cyences_notable_event_action.attacker_search = | stats count by User_Name
action.cyences_notable_event_action.attacker_drilldown = `cs_wineventlog_security` (EventCode=4740) Account_Name=$row.User_Name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC, Compliance


[AD - Password Change Outside Working Hours]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 10 * * *
description = Password changed outside working hour.
dispatch.earliest_time = -1d@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (4624, 4768, 4769) src=* [| search `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) | dedup ComputerName Subject_Account_Name | table ComputerName Subject_Account_Name |  rename Subject_Account_Name as user] \
| bin span=1m _time \
| eval time = _time \
| `cs_generate_time_fields_for_filter(time)` \
| where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 \
| `cs_remove_time_fields_for_filter(time)` \
| table _time ComputerName user src EventCode \
| rename user as Subject_Account_Name \
| append \
    [| search `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) \
    | eval time = _time \
    | `cs_generate_time_fields_for_filter(time)` \
    | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 \
    | `cs_remove_time_fields_for_filter(time)` \
    | fillnull value="unknown" src ] \
| eventstats values(eval(if(in(EventCode, 4768, 4769), _time."###".src, null()))) as input by ComputerName, Subject_Account_Name \
| table input, _time, Target_Account_Name, Subject_Account_Name, cyences_severity, EventCode, msad_action, status, action, ComputerName, Target_Account_Domain, Subject_Account_Domain Caller_Workstation \
| search EventCode IN (627, 628, 4723, 4724, 4794) \
| timestampbasedcorrelation lookback=300 lookahead=300 \
| `cs_user_privilege_mapping(Target_Account_Name)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "high", "medium") \
| table _time, Target_Account_Name, Subject_Account_Name, output, cyences_severity, EventCode, msad_action, status, action, ComputerName, Target_Account_Domain, Subject_Account_Domain, Caller_Workstation, is_privileged_user \
| rename Target_Account_Name as Target_User, Target_Account_Domain as Target_User_Domain, Subject_Account_Name as Actor, Subject_Account_Domain as Actor_User_Domain, output as "Probable Sources" \
| sort - _time \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_password_change_outside_working_hour_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_password_change_outside_working_hour_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) | eval time = _time | `cs_generate_time_fields_for_filter(time)` | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 | `cs_remove_time_fields_for_filter(time)` 
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC


[AD - Multiple Password Changes in a Short Period of Time]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show if user made multiple password changes in the last hours.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (4624, 4768, 4769) src=* [| search `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) | dedup ComputerName Subject_Account_Name | table ComputerName Subject_Account_Name |  rename Subject_Account_Name as user] \
| bin span=1m _time \
| table _time ComputerName user src EventCode \
| rename user as Subject_Account_Name \
| append \
    [| search `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) \
    | fields _time, ComputerName, Target_Account_Name, Target_Account_Domain, Subject_Account_Name, Subject_Account_Domain, Caller_Workstation, msad_action, action, status, EventCode \
    | fillnull status, src, msad_action value="-" \
    | eval msad_action="EventCode=".EventCode." -> ".msad_action] \
| eventstats values(eval(if(in(EventCode, 4768, 4769), _time."###".src, null()))) as input by ComputerName, Subject_Account_Name \
| search EventCode IN (627, 628, 4723, 4724, 4794) \
| timestampbasedcorrelation lookback=300 lookahead=300 \
| stats count, min(_time) as firstTime, max(_time) as lastTime, values(*) as * by Target_Account_Name, ComputerName, Subject_Account_Name, status, msad_action \
| appendpipe \
    [| stats sum(count) as count by Target_Account_Name, ComputerName \
    | eval new_ComputerName = ComputerName." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by Target_Account_Name, status \
    | eval new_status = status." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by Target_Account_Name, msad_action \
    | eval new_msad_action = msad_action." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by Target_Account_Name, Subject_Account_Name \
    | eval new_Subject_Account_Name = Subject_Account_Name." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(action) as action, values(Target_Account_Domain) as Target_Account_Domain, values(Subject_Account_Name) as Subject_Account_Name, values(Subject_Account_Domain) as Subject_Account_Domain, values(Caller_Workstation) as Caller_Workstation, values(output) as output, values(new_*) as * by Target_Account_Name \
| where count>=`cs_ad_multiple_password_changes_count_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_user_privilege_mapping(Target_Account_Name)` \
| eval cyences_severity = if(is_privileged_user=="Yes", case(count>3*`cs_ad_multiple_password_changes_count_limit`, "critical", true(), "high"), case(count>5*`cs_ad_multiple_password_changes_count_limit`, "critical", count>3*`cs_ad_multiple_password_changes_count_limit`, "high", true(), "medium")) \
| table Target_Account_Name, output, count, firstTime, lastTime, cyences_severity, msad_action, Subject_Account_Name, action, status, ComputerName, Target_Account_Domain, Subject_Account_Domain, Caller_Workstation, is_privileged_user \
| rename output as "Probable Sources", Target_Account_Name as Target_User, Target_Account_Domain as Target_User_Domain, Subject_Account_Name as Actor, Subject_Account_Domain as Actor_User_Domain \
| `cs_ad_multiple_password_changes_filter` \
| sort - count
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_multiple_password_changes_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC, Compliance


[AD - Bulk User Creation or Deletion]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show if users being created or deleted in bulk.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (4720, 4726) \
| rename Subject_Account_Domain as Admin_Domain, Subject_Account_Name as Admin_Account_Name \
| eval User_Domain = coalesce(New_Account_Domain, Target_Account_Domain), User_Account_Name = coalesce(New_Account_Account_Name, Target_Account_Name) \
| fields _time ComputerName User_Account_Name User_Domain action Admin_Account_Name Admin_Domain \
| `cs_user_privilege_mapping(User_Account_Name)` \
| stats count as total_actions list(eval(if(action=="created", User_Account_Name, null()))) as users_created, count(eval(action=="created")) as no_users_created, list(eval(if(action=="deleted", User_Account_Name, null()))) as users_deleted, count(eval(action=="deleted")) as no_users_deleted, values(is_privileged_user) as is_privileged_user by Admin_Account_Name \
| where total_actions>=`cs_ad_bulk_user_creation_deletion_count_limit` \
| eval cyences_severity = if(is_privileged_user=="Yes", case(total_actions>3*`cs_ad_bulk_user_creation_deletion_count_limit`, "critical", true(), "high"), case(total_actions>5*`cs_ad_bulk_user_creation_deletion_count_limit`, "critical", total_actions>3*`cs_ad_bulk_user_creation_deletion_count_limit`, "high", true(), "medium")) \
| `cs_ad_bulk_user_creation_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_bulk_user_creation_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode IN (4720, 4726)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC, Compliance


[AD - Login Failure Due To Password Expired]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 55 * * * *
description = This alert will be triggered if login failure due to password expiration.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (4768, 4771) (Result_Code="0x17" OR Failure_Code="0x17") \
| dedup ComputerName Account_Name \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time ComputerName Account_Name src_ip user_type status \
| `cs_user_privilege_mapping(Account_Name)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "high", "medium") \
| `cs_ad_login_failure_due_to_password_expire_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_login_failure_due_to_password_expire_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode IN (4768, 4771) (Result_Code="0x17" OR Failure_Code="0x17")
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC


[AD - Login Failure Due To Credential Revoked]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 55 * * * *
description = This alert will be triggered if login failure due to credential revoked.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (4768, 4771) (Result_Code="0x12" OR Failure_Code="0x12") \
| dedup ComputerName Account_Name \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time ComputerName Account_Name src_ip user_type status \
| `cs_user_privilege_mapping(Account_Name)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "high", "medium") \
| `cs_ad_login_failure_due_to_credential_revoked_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_login_failure_due_to_credential_revoked_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode IN (4768, 4771) (Result_Code="0x12" OR Failure_Code="0x12")
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows AD
action.cyences_notable_event_action.teams = SOC, Compliance


[Windows - Fake Windows Process]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 1,11,21,31,41,51 * * * *
description = This alert identifies processes which try to disguise themselves as a Windows process.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.process_path !="C:\\Windows\\System32*" Processes.process_path !="C:\\Windows\\SysWOW64*" by Processes.user Processes.dest Processes.process_name Processes.process_id Processes.process_path Processes.parent_process_name Processes.parent_process_path Processes.process_hash \
| `cs_drop_dm_object_name("Processes")` \
|  `cs_system_processes_run_from_unexpected_locations_internal_filter` \
| lookup cs_fake_windows_processes_filter process_name, process_hash OUTPUT need_to_filtered | search NOT need_to_filtered=1 \
| `is_windows_system_file_macro` \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "medium", "low") \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_system_processes_run_from_unexpected_locations_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_system_processes_run_from_unexpected_locations_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_path!="C:\\Windows\\System32*" Processes.process_path!="C:\\Windows\\SysWOW64*" | `cs_drop_dm_object_name(Processes)` | lookup update=true is_windows_system_file filename as process_name OUTPUT systemFile | search systemFile=true | lookup cs_fake_windows_processes_filter process_name, process_hash OUTPUT need_to_filtered | search NOT need_to_filtered=1
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.dest=$row.dest$ Processes.process_path!="C:\\Windows\\System32*" Processes.process_path!="C:\\Windows\\SysWOW64*" | `cs_drop_dm_object_name(Processes)` | lookup update=true is_windows_system_file filename as process_name OUTPUT systemFile | search systemFile=true | lookup cs_fake_windows_processes_filter process_name, process_hash OUTPUT need_to_filtered | search NOT need_to_filtered=1
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by process_name, parent_process_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=$row.process_name$ Processes.parent_process_name=$row.parent_process_name$ | `cs_drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


[Windows - Process Tampering Detected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 5,15,25,35,45,55 * * * *
description = Windows process tampering detected by sysmon.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=1 [| search `cs_sysmon` EventCode=11 [| search `cs_sysmon` EventCode=25 | `cs_windows_process_tampering_filter_internal` | dedup Image, Computer | rename Image as TargetFilename | table TargetFilename, Computer] | table Image Computer] \
| fields Computer TargetFilename EventCode Image CommandLine ParentImage ParentCommandLine ParentUser User \
| `cs_user_privilege_mapping(User)` \
| append [| search `cs_sysmon` EventCode=11 [| search `cs_sysmon` EventCode=25 | `cs_windows_process_tampering_filter_internal` | dedup Image, Computer | rename Image as TargetFilename | table TargetFilename, Computer] | table EventCode TargetFilename Image Computer] \
| stats count, values(*) as * by Image, Computer \
| append [| search `cs_sysmon` EventCode=25 | `cs_windows_process_tampering_filter_internal` | rename Image as TargetFilename | `cs_user_privilege_mapping(User)` | table _time is_privileged_user EventCode TargetFilename Computer User Type] \
| stats count, latest(_time) as _time, values(*) as * by TargetFilename, Computer \
| search EventCode=25 \
| `cs_human_readable_time_format(_time, event_time)` \
| eval cyences_severity = case(Type=="Image is replaced" AND is_privileged_user=="No", "low", true(), "high") \
| table event_time count Computer TargetFilename Type cyences_severity EventCode Image CommandLine ParentImage ParentCommandLine ParentUser User is_privileged_user \
| `cs_windows_process_tampering_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_process_tampering_filter
action.cyences_notable_event_action.contributing_events = `cs_sysmon` EventCode=25
action.cyences_notable_event_action.system_compromised_search = | stats count by Computer
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sysmon` EventCode=25 Computer=$row.Computer$
action.cyences_notable_event_action.attacker_search = | stats count by TargetFilename
action.cyences_notable_event_action.attacker_drilldown = `cs_sysmon` EventCode=25 Image=$row.TargetFilename$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


# ============
# Ransomware
# ============
# Reports
[Ransomware - Calculate UpperBound for Spike in File Writes]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for Ransomware - Spike in File Writes alert (Runs everyday at 1 AM) - Generates the upperBound value of file writes for each host \
For more information refer to Ransomware - Spike in File Writes alert. \
Warning - Do not run enable this search without enabling data-model acceleration on Endpoint data-model as this search will reduce the system performance without acceleration.
dispatch.earliest_time = -7d@d
dispatch.latest_time = @d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count FROM datamodel=Endpoint.Filesystem where Filesystem.action=created `cs_spike_in_the_file_writes_internal_filter` by _time span=1h, Filesystem.dest | `cs_drop_dm_object_name(Filesystem)` \
| stats avg(count) as avg stdev(count) as stdev by "dest" \
| eval upperBound=(avg+stdev*4) \
| outputlookup cs_ransomware_file_writes_upperbound.csv
action.cyences_notable_event_action.products = Sysmon


# Alerts
[Ransomware - Spike in File Writes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert identifies a spike in file writes that may result in ransomware writing encrypted files. \
Warning: Enable the following report, Ransomware - Calculate UpperBound for Spike in File Writes, before enabling this alert. Users should have a good understanding of false positives before enabling this alert. \
\
A false positive may appear from new application installations or by copying a large number of files.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=created `cs_spike_in_the_file_writes_internal_filter` by Filesystem.dest, Filesystem.file_path | `cs_drop_dm_object_name(Filesystem)` \
| rex field=file_path "^(?<file_location>.*)[\\\\|\\/].*?(?:\.(?<file_extension>[^.]+))?$" \
| eval raw_event=1 \
| appendpipe \
    [| stats sum(count) as count by dest, file_location \
    | sort - count \
    | eval file_location_mix=file_location." (".count.")" \
    | fields - count] \
| appendpipe \
    [| where raw_event=1 \
    | stats sum(count) as count by dest, file_extension \
    | sort - count \
    | eval file_extension_mix=file_extension." (".count.")" \
    | fields - count ] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, list(file_location_mix) as file_location_mix, list(file_extension_mix) as file_extension_mix by dest \
| eval top5_file_location=mvindex(file_location_mix,0,4), top5_file_extension=mvindex(file_extension_mix,0,4) | fields - file_location_mix, file_extension_mix \
| where count>=`cs_ransomware_min_file_writes` \
| lookup cs_ransomware_file_writes_upperbound.csv dest OUTPUT upperBound, avg, stdev | where count>upperBound \
| eval avg=round(avg, 2), stdev=round(stdev, 2), upperBound=round(upperBound, 2) \
| eval cyences_severity = case(count>upperBound*3 AND count>100000, "critical", count>upperBound*2 AND count>10000, "high", true(), "medium") \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_spike_in_file_writes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_spike_in_file_writes_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.action=created | `cs_drop_dm_object_name(Filesystem)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.action=created Filesystem.dest=$row.dest$ | `cs_drop_dm_object_name(Filesystem)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


[Ransomware - Common Ransomware File Extensions]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4,14,24,34,44,54 * * * *
description = This alert is based on a lookup from the ES Content Update app. It will inspect for common ransomware file extensions.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem by Filesystem.dest, Filesystem.file_name, Filesystem.file_path \
| `cs_drop_dm_object_name(Filesystem)` \
| rex field=file_path "(?<file_location>.*)[\\\\|\\/]" | rex field=file_name "(?<file_extension>\.[^\.]+)$" \
| stats sum(count) as count, min(firstTime) as firstTime max(lastTime) as lastTime, values(file_name) as sample_file_names by dest, file_extension, file_location \
| `cs_ransomware_extensions` \
| eval sample_file_names=mvindex(sample_file_names,0,2) \
| sort - count | eval file_location=file_location." (".count.")" \
| stats sum(count) as total_files_with_extension, min(firstTime) as firstTime max(lastTime) as lastTime, list(file_location) as file_location, values(sample_file_names) as sample_file_names by dest, file_extension \
| eval sample_file_names=mvindex(sample_file_names,0,9) | fields - file_name \
| eval top10_file_location=mvindex(file_location,0,9) | fields - file_location \
| where total_files_with_extension>=`cs_ransomware_min_file_extension_count` \
| eval cyences_severity = "medium" \
| `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(firstTime)` \
| `cs_common_ransomware_extensions_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_common_ransomware_extensions_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Filesystem search strict_fields=false | `cs_drop_dm_object_name(Filesystem)` | rex field=file_name "(?<file_extension>\.[^\.]+)$" | `cs_ransomware_extensions`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.dest=$row.dest$ | `cs_drop_dm_object_name(Filesystem)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by file_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.file_name=$row.file_name$ | `cs_drop_dm_object_name(Filesystem)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


[Ransomware - Scheduled Tasks Used in BadRabbit Ransomware]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 6,16,26,36,46,56 * * * *
description = This alert identifies BadRabbit ransomware based on processed data. It examines data from the schtasks.exe process.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process= "*create*"  OR Processes.process= "*delete*") by Processes.dest Processes.parent_process Processes.process_name Processes.user \
| `cs_drop_dm_object_name("Processes")` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| search (process=*rhaegal* OR process=*drogon* OR *viserion_*) \
| eval cyences_severity = "critical" \
| `cs_scheduled_tasks_used_in_badrabbit_ransomware_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_scheduled_tasks_used_in_badrabbit_ransomware_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=schtasks.exe (Processes.process="*create*" OR Processes.process="*delete*") (Processes.process=*rhaegal* OR Processes.process=*drogon* OR Processes.process=*viserion_*) | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest, user
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.dest=$row.dest$ | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(process) as process by process_name, parent_process_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=$row.process_name$ | `cs_drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


[Ransomware - Common Ransomware Notes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 8,18,28,38,48,58 * * * *
description = This alert is based on a lookup from the ES Content Update app. It will inspect for common ransomware notes.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name \
| `cs_drop_dm_object_name(Filesystem)` | `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(firstTime)` \
| rex field=file_name "(?<file_extension>\.[^\.]+)$" | `ransomware_notes` \
| eval cyences_severity = "critical" \
| `cs_common_ransomware_notes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_common_ransomware_notes_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Filesystem search strict_fields=false | `cs_drop_dm_object_name(Filesystem)` | rex field=file_name "(?<file_extension>\.[^\.]+)$" | `ransomware_notes`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.dest=$row.dest$ | `cs_drop_dm_object_name(Filesystem)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by file_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.file_name=$row.file_name$ | `cs_drop_dm_object_name(Filesystem)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


# ======================
# Windows - Sysmon Data Based Alerts
# ======================
[USN Journal Deletion on Windows]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 1,11,21,31,41,51 * * * *
description = The fsutil.exe application is a legitimate Windows utility used to perform tasks related to the file allocation table (FAT) and NTFS file systems. The update sequence number (USN) change journal provides a log of all changes made to the files on the disk. This search looks for fsutil.exe deleting the USN journal.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fsutil.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest \
| `cs_drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| search process="*deletejournal*" AND process="*usn*" \
| eval cyences_severity = "critical" \
| `cs_usn_journal_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_usn_journal_deletion_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=fsutil.exe Processes.process="*deletejournal*" Processes.process="*usn*" | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.dest=$row.dest$ | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(process) as process by process_name, parent_process_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=$row.process_name$ | `cs_drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


[Windows WMI Lateral Movement]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4,14,24,34,44,54 * * * *
description = This alert recognizes WMI lateral movement on Windows machines. These alerts may be due to ransomware activity on the host.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=1 Image=*wmic* CommandLine="*/node*" CommandLine="*process call create*" \
| `cs_user_privilege_mapping(User)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "medium", "low") \
| table _time, cyences_severity, TimeCreated, Computer, User, signature, direction, Image, CommandLine, is_privileged_user \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_wmi_lateral_movement_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_wmi_lateral_movement_filter
action.cyences_notable_event_action.contributing_events = `cs_sysmon` EventCode=1 Image=*wmic* CommandLine="*/node*" CommandLine="*process call create*"
action.cyences_notable_event_action.system_compromised_search = | stats count by Computer
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sysmon` EventCode=1 Image=*wmic* CommandLine="*/node*" CommandLine="*process call create*" Computer=$row.Computer$
action.cyences_notable_event_action.attacker_search = | stats count by CommandLine, Image, User
action.cyences_notable_event_action.attacker_drilldown = `cs_sysmon` EventCode=1 CommandLine=$row.CommandLine$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


# This alert has been removed and commented here for future reference as it contains a static list of malicious package names, which is not maintainable and causes false positives.
# [Ransomware - Endpoint Compromise - Malicious Package Found]


# ======================
# Windows - Credential Compromise
# ======================
[Windows - Credential Dumping through LSASS Access]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert points out credential dumping on Windows with LSASS Access.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe (GrantedAccess=0x1010 OR GrantedAccess=0x1410) \
| stats count min(_time) as firstTime max(_time) as lastTime by Computer, SourceImage, SourceProcessId, TargetImage, TargetProcessId, EventCode, GrantedAccess \
| rename Computer as dest | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = "critical" \
| `cs_detect_credential_dumping_through_lsass_access_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_detect_credential_dumping_through_lsass_access_filter
action.cyences_notable_event_action.contributing_events = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe (GrantedAccess=0x1010 OR GrantedAccess=0x1410)
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by Computer
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe Computer=$row.Computer$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by SourceImage
action.cyences_notable_event_action.attacker_drilldown = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe SourceImage=$row.SourceImage$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


[Windows - Credential Dumping via Symlink to Shadow Copy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert identifies credential dumping on Windows via symlink to the shadow copy.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=cmd.exe Processes.process=*mklink* Processes.process=*HarddiskVolumeShadowCopy* by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id \
| `cs_drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = "critical" \
| `cs_credential_dumping_via_symlink_to_shadow_copy_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_credential_dumping_via_symlink_to_shadow_copy_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name="cmd.exe" Processes.process=*mklink* Processes.process=*HarddiskVolumeShadowCopy* | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name="cmd.exe" Processes.dest=$row.dest$ | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by process, process_name, parent_process
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process="cmd.exe" Processes.process=$row.process$ | `cs_drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


[Windows - Credential Dumping via Copy Command from Shadow Copy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert recognizes credential dumping via copy command from a shadow copy. 
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=cmd.exe (Processes.process=*\\system32\\config\\sam* OR Processes.process=*\\system32\\config\\security* OR Processes.process=*\\system32\\config\\system* OR Processes.process=*\\windows\\ntds\\ntds.dit*) by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id \
| `cs_drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = "critical" \
| `cs_credential_dumping_via_copy_command_from_shadow_copy_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_credential_dumping_via_copy_command_from_shadow_copy_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=cmd.exe (Processes.process=*\\system32\\config\\sam* OR Processes.process=*\\system32\\config\\security* OR Processes.process=*\\system32\\config\\system* OR Processes.process=*\\windows\\ntds\\ntds.dit*) | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name="cmd.exe" dest=$row.dest$ | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by process, process_name, parent_process
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process="cmd.exe" Processes.process=$row.process$ | `cs_drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC


[Windows - Credential Dump From Registry via Reg exe]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert identifies credential dumping from registry via reg exe.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=reg.exe OR Processes.process_name=cmd.exe) Processes.process=*save* (Processes.process=*HKEY_LOCAL_MACHINE\\Security* OR Processes.process=*HKEY_LOCAL_MACHINE\\SAM* OR Processes.process=*HKEY_LOCAL_MACHINE\\System* OR Processes.process=*HKLM\\Security* OR Processes.process=*HKLM\\System* OR Processes.process=*HKLM\\SAM*) by Processes.user Processes.process_name Processes.process Processes.dest \
| `cs_drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = "critical" \
| `cs_attempted_credential_dump_from_registry_via_reg_exe_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_attempted_credential_dump_from_registry_via_reg_exe_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search (Processes.process_name=reg.exe OR Processes.process_name=cmd.exe) Processes.process=*save* (Processes.process=*HKEY_LOCAL_MACHINE\\Security* OR Processes.process=*HKEY_LOCAL_MACHINE\\SAM* OR Processes.process=*HKEY_LOCAL_MACHINE\\System* OR Processes.process=*HKLM\\Security* OR Processes.process=*HKLM\\System* OR Processes.process=*HKLM\\SAM*) | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process IN ("cmd.exe", "reg.exe") Processes.dest=$row.dest$ | `cs_drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by process, process_name, parent_process
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process IN ("cmd.exe", "reg.exe") Processes.process=$row.process$ | `cs_drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon
action.cyences_notable_event_action.teams = SOC



# ===============
# Authentication
# ===============
[Authentication - Bruteforce Attempt for a User]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A bruteforce attempt (more than 100 failures in an hour) for a perticular username. \
\
Data Collection - Any authentication data mapped with Authentication data model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.signature) as signature from datamodel=Cyences_Authentication where (`cs_o365_login_filter_source` OR `cs_aws_login_filter_source`) Authentication.app!=OktaIM2:log Authentication.user!="*$" Authentication.user!="Not Available" Authentication.action="failure" `cs_authentication_password_expire_event_filter` `cs_authentication_app_filter` `cs_bruteforce_from_user_additional_filter` by Authentication.app, Authentication.user, Authentication.src, Authentication.dest \
| `cs_drop_dm_object_name(Authentication)` \
| appendpipe \
    [| stats sum(count) as count by app, user, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by app, user, src \
    | eval new_src = src." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(signature) as signature, values(new_*) as * by app, user \
| where count > `cs_authentication_bruteforce_attempt_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval sources=mvjoin(src, ", ") | fields - src \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", case(count>100, "critical", count>50, "high", count>10, "medium", true(), "low"), case(count>200, "critical", count>100, "high", count>50, "medium", true(), "low")) \
| `cs_authentication_bruteforce_attempt_for_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_bruteforce_attempt_for_user_filter
action.cyences_notable_event_action.contributing_events = `cs_authentication_indexes` tag=authentication action="failure"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = `cs_authentication_indexes` tag=authentication action="failure" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by user
action.cyences_notable_event_action.attacker_drilldown = `cs_authentication_indexes` tag=authentication action="failure" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Authentication
action.cyences_notable_event_action.teams = SOC, Compliance


[Authentication - Bruteforce Attempt from a Source]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A bruteforce attempt (more than 100 failures in an hour) from a perticular source. \
\
Data Collection - Any authentication data mapped with Authentication data model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.signature) as signature from datamodel=Cyences_Authentication where `cs_o365_login_filter_source` Authentication.app!=OktaIM2:log Authentication.user!="*$" Authentication.action="failure" `cs_authentication_password_expire_event_filter` `cs_authentication_app_filter` `cs_bruteforce_from_source_additional_filter` by Authentication.app, Authentication.src, Authentication.user, Authentication.dest \
| `cs_drop_dm_object_name(Authentication)` \
| `cs_user_privilege_mapping(user)` \
| appendpipe \
    [| stats sum(count) as count by app, src, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by app, src, user \
    | eval new_user = user." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(signature) as signature, values(is_privileged_user) as is_privileged_user, values(new_*) as * by app, src \
| where count > `cs_authentication_bruteforce_attempt_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval users=mvjoin(user, ", ") | fields - user \
| eval cyences_severity = if(is_privileged_user=="Yes", case(count>500, "critical", count>100, "high"), case(count>1000, "critical", count>500, "high", count>100, "medium")) \
| eval cyences_severity = case(src!="unknown", cyences_severity, cyences_severity=="critical", "high", cyences_severity=="high", "medium", 1==1, "info") \
``` Reduce severity when src is unknown``` \
| `cs_authentication_bruteforce_attempt_from_source_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_bruteforce_attempt_from_source_filter
action.cyences_notable_event_action.contributing_events = `cs_authentication_indexes` tag=authentication action="failure"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = `cs_authentication_indexes` tag=authentication action="failure" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src
action.cyences_notable_event_action.attacker_drilldown = `cs_authentication_indexes` tag=authentication action="failure" src=$row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Authentication
action.cyences_notable_event_action.teams = SOC, Compliance


[Authentication - Excessive Failed VPN Logins for a User]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A excessive login failures (more than 20 failures in an hour) for VPN for a perticular username. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime from datamodel=Cyences_Authentication where Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` AND Authentication.action="failure" `cs_authentication_password_expire_event_filter` by index, Authentication.app, Authentication.user, Authentication.src, Authentication.dest \
| `cs_drop_dm_object_name(Authentication)` \
| appendpipe \
    [| stats sum(count) as count by index, app, user, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by index, app, user, src \
    | eval new_src = src." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(new_*) as * by index, app, user \
| where count > `cs_authentication_excessive_vpn_login_failure_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval sources=mvjoin(src, ", ") | fields - src \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", case(count>100, "critical", count>50, "high", count>10, "medium", true(), "low"), case(count>200, "critical", count>100, "high", count>50, "medium", true(), "low")) \
| eval cyences_severity = if(user=="unknown", "low", cyences_severity) \
| `cs_authentication_excessive_vpn_login_failure_for_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_excessive_vpn_login_failure_for_user_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN
action.cyences_notable_event_action.teams = SOC


[Authentication - Excessive Failed VPN Logins from a Source]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A excessive login failures (more than 20 failures in an hour) for VPN from a perticular source. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime from datamodel=Cyences_Authentication where Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` AND Authentication.action="failure" `cs_authentication_password_expire_event_filter` by index, Authentication.app, Authentication.src, Authentication.user, Authentication.dest \
| `cs_drop_dm_object_name(Authentication)` \
| `cs_user_privilege_mapping(user)` \
| appendpipe \
    [| stats sum(count) as count by index, app, src, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by index, app, src, user \
    | eval new_user = user." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(is_privileged_user) as is_privileged_user, values(new_*) as * by index, app, src \
| where count > `cs_authentication_excessive_vpn_login_failure_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval users=mvjoin(user, ", ") | fields - user \
| eval cyences_severity = if(is_privileged_user=="Yes", case(count>500, "critical", count>100, "high", true(), "medium"), case(count>1000, "critical", count>500, "high", count>100, "medium", true(), "low")) \
| `cs_authentication_excessive_vpn_login_failure_from_source_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_excessive_vpn_login_failure_from_source_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" src=$row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN
action.cyences_notable_event_action.teams = SOC


[Authentication - VPN Login Attempts Outside Working Hours]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A VPN Login Attempts Outside Working Hours. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count from datamodel=Cyences_Authentication WHERE Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` by Authentication.user, Authentication.src, Authentication.action, Authentication.dest, _time \
| rename Authentication.* as * \
| eval time = _time \
| `cs_generate_time_fields_for_filter(time)` \
| where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 \
| `cs_remove_time_fields_for_filter(time)` \
| iplocation src \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "medium", "info") \
| table time, cyences_severity, user, action, count, dest, src, City, Region, Country, is_privileged_user \
| `cs_human_readable_time_format(time)` \
| `cs_authentication_vpn_login_attempts_outside_working_hour_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_vpn_login_attempts_outside_working_hour_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication dest_category="vpn_auth" | eval time = _time | `cs_generate_time_fields_for_filter(time)` | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 | `cs_remove_time_fields_for_filter(time)`
action.cyences_notable_event_action.system_compromised_search = | stats count by dest
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` dest=$row.dest$ tag=authentication dest_category="vpn_auth" | eval time = _time | `cs_generate_time_fields_for_filter(time)` | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 | `cs_remove_time_fields_for_filter(time)`
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` user=$row.user$ tag=authentication dest_category="vpn_auth" | eval time = _time | `cs_generate_time_fields_for_filter(time)` | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 | `cs_remove_time_fields_for_filter(time)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN
action.cyences_notable_event_action.teams = SOC


[Authentication - Usual Login Location Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 1 * * 0
description = Generates the cs_authentication_usual_location.csv file with the Usual Login Location details for users. \
\
Data Collection - VPN data mapped with authentication data-model.
dispatch.earliest_time = -1w@w
dispatch.latest_time = @w
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats count, values(Authentication.org_country) as org_country from datamodel=Cyences_Authentication where Authentication.action="success" AND Authentication.user!="unknown" AND `cs_public_ips(Authentication.src)` by Authentication.app, Authentication.user, Authentication.src, _time span=1w \
| `cs_drop_dm_object_name(Authentication)` \
| iplocation src \
| eval user=lower(user) \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| stats sum(count) as count by user, app, Country, _time \
| table _time user app Country count \
| inputlookup cs_authentication_usual_location_intermediate.csv append=true \
| where _time > relative_time(now(), "-12w@w") \
| dedup user, app, Country, _time \
| outputlookup cs_authentication_usual_location_intermediate.csv \
| stats sum(count) as count by user, app, Country \
| table user app Country count \
| outputlookup cs_authentication_usual_location.csv
action.cyences_notable_event_action.products = Authentication
action.cyences_notable_event_action.teams = SOC


[Authentication - Successful Login for Multiple Users from Same IP]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Successful Login for Multiple Users from Same IP.
dispatch.earliest_time = -61m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` values(Authentication.signature) as signature values(Authentication.authentication_method) as authentication_method from datamodel=Cyences_Authentication where Authentication.user!="*$" Authentication.user!="Not Available" Authentication.action="success" NOT Authentication.src IN `cs_customer_own_public_ips` Authentication.src!="unknown" Authentication.app!="win:*" by sourcetype, Authentication.src, Authentication.user, Authentication.app \
| `cs_drop_dm_object_name(Authentication)` \
| eval user = lower(user) \
| stats values(*) as *, dc(user) as no_of_users by sourcetype src \
| where no_of_users > 3 \
| iplocation src \
| eval Country = if(isnotnull(org_country), org_country, Country) \
| eval Region = if(isnotnull(org_region), org_region, Region) \
| eval City = if(isnotnull(org_city), org_city, City) \
| fillnull Country, Region, City value="-" \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes" OR no_of_users > 10, "critical", "high") \
| table sourcetype, src, no_of_users, user, cyences_severity, Country, Region, City, app, authentication_method, signature, is_privileged_user \
| `cs_authentication_successful_login_by_multiple_users_from_same_ip_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_successful_login_by_multiple_users_from_same_ip_filter
action.cyences_notable_event_action.contributing_events = `cs_authentication_indexes` tag=authentication action="success" user!="Not Available" user!="*$" src!="unknown" app!="win:*"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_authentication_indexes` tag=authentication action="success" user!="Not Available" user!="*$" src!="unknown" app!="win:*" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Authentication
action.cyences_notable_event_action.teams = SOC


[Authentication - Successful VPN Login From Unusual Country]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 14,29,44,59 * * * *
description = A Successful VPN Login From Unusual Country. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count from datamodel=Cyences_Authentication where Authentication.dest_category="vpn_auth" AND Authentication.action="success" AND `cs_public_ips(Authentication.src)` by Authentication.app, Authentication.user, Authentication.src, Authentication.dest, _time \
| `cs_drop_dm_object_name(Authentication)` \
| eval user = lower(user) \
| iplocation src \
| `cs_current_week_login_count_vpn` \
| `cs_country_login_percentage` \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 and is_privileged_user=="Yes", "critical", true(), "high") \
| table _time cyences_severity user dest src app count City Region Country percentage_login_from_country reason usual_login_location is_privileged_user \
| `cs_authentication_successful_vpn_login_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_successful_vpn_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication action="success" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_notable_event_action.system_compromised_search = | stats count by dest
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` dest=$row.dest$ tag=authentication action="success" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` user=$row.user$ tag=authentication action="success" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN
action.cyences_notable_event_action.teams = SOC, Compliance


[Authentication - Failed VPN Login From Unusual Country]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Failed VPN Login From Unusual Country. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count from datamodel=Cyences_Authentication where Authentication.dest_category="vpn_auth" AND Authentication.action="failure" AND `cs_public_ips(Authentication.src)` `cs_authentication_password_expire_event_filter` by Authentication.app, Authentication.user, Authentication.src, Authentication.dest, _time \
| `cs_drop_dm_object_name(Authentication)` \
| eval user = lower(user) \
| iplocation src \
| `cs_current_week_login_count_vpn` \
| `cs_country_login_percentage` \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = case(percentage_login_from_country==0 and is_privileged_user=="Yes", "critical", true(), "high") \
| where count > 5 \
| table _time, cyences_severity, user, dest, src, app, count, City, Region, Country, percentage_login_from_country, reason, usual_login_location, is_privileged_user \
| `cs_authentication_failed_vpn_login_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_failed_vpn_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_notable_event_action.system_compromised_search = | stats count by dest
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` dest=$row.dest$ tag=authentication action="failure" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` user=$row.user$ tag=authentication action="failure" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN
action.cyences_notable_event_action.teams = SOC, Compliance


[Authentication - Long Running VPN Session Disconnected]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Long running VPN session disconnected detail. \
\
Data Collection - VPN logout events with eventtype cs_*_vpn_logout.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_vpn_indexes` eventtype="cs_*_vpn_logout" duration>=`cs_authentication_vpn_session_duration_limit` \
| eval SourceIP=coalesce(public_ip, src), PrivateIP=if(coalesce(private_ip, tunnelip)="0.0.0.0", null(), coalesce(private_ip, tunnelip)) \
| fillnull value="Unknown" SourceIP \
| dedup _time user SourceIP \
| iplocation SourceIP \
| eval duration = tostring(duration, "duration") \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", "high", "medium") \
| table _time cyences_severity user dest SourceIP PrivateIP duration City Country is_privileged_user \
| rename dest as Dest, user as User, duration as Duration \
| `cs_authentication_vpn_long_running_session_disconnected_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_vpn_long_running_session_disconnected_filter
action.cyences_notable_event_action.contributing_events = `cs_vpn_indexes` eventtype="cs_*_vpn_logout" duration>=`cs_authentication_vpn_session_duration_limit`
action.cyences_notable_event_action.system_compromised_search = | stats count by dest
action.cyences_notable_event_action.system_compromised_drilldown = `cs_vpn_indexes` dest=$row.dest$ eventtype="cs_*_vpn_logout" duration>=`cs_authentication_vpn_session_duration_limit`
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = `cs_vpn_indexes` user=$row.user$  eventtype="cs_*_vpn_logout" duration>=`cs_authentication_vpn_session_duration_limit`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN
action.cyences_notable_event_action.teams = SOC

[Authentication - DUO Locked Out]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4 * * * *
description = This alert will pinpoint when a user is locked out from Duo app. 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = index="duo" source="duo" _index_earliest=-61m@m _index_latest=-1m@m reason="Locked out" \
| eval cyences_severity = if(is_privileged_user=="Yes", "critical","high") \
| table _time, username, integration, reason, result 
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.contributing_events = index="duo" source="duo" _index_earliest=-61m@m _index_latest=-1m@m reason="Locked out"
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = DUO
action.cyences_notable_event_action.teams = SOC
# ===============
# Radius Authentication
# ===============
[Radius Authentication - Excessive Failed Logins for a User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A excessive login failures (more than 20 failures in an hour) for Radius for a perticular username. \
\
Data Collection - Radius Authentication events and has dest_category=radius_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.signature) as signature from datamodel=Cyences_Authentication where Authentication.dest_category="radius_auth" AND `cs_radius_authentication_indexes` AND Authentication.action="failure" `cs_authentication_password_expire_event_filter` by index, Authentication.app, Authentication.user, Authentication.src, Authentication.dest \
| `cs_drop_dm_object_name(Authentication)` \
| appendpipe \
    [| stats sum(count) as count by index, app, user, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by index, app, user, src \
    | eval new_src = src." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(new_*) as * by index, app, user \
| where count > `cs_radius_authentication_excessive_login_failure_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval sources=mvjoin(src, ", ") | fields - src \
| `cs_user_privilege_mapping(user)` \
| eval cyences_severity = if(is_privileged_user=="Yes", case(count>100, "critical", count>50, "high", true(), "medium"), case(count>200, "critical", count>100, "high", count>50, "medium", true(), "low")) \
| eval cyences_severity = case(user!="unknown", cyences_severity, cyences_severity=="critical", "high", cyences_severity=="high", "medium", 1==1, "info") \
| `cs_radius_authentication_excessive_login_failure_for_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_radius_authentication_excessive_login_failure_for_user_filter
action.cyences_notable_event_action.contributing_events = `cs_radius_authentication_indexes` tag=authentication action="failure" dest_category="radius_auth"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = `cs_radius_authentication_indexes` tag=authentication action="failure" dest_category="radius_auth" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by user
action.cyences_notable_event_action.attacker_drilldown = `cs_radius_authentication_indexes` tag=authentication action="failure" dest_category="radius_auth" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Radius Authentication
action.cyences_notable_event_action.teams = SOC


# ===============
# Linux/Unix
# ===============

[Linux - cs_linux_groups Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 7 * * * *
description = Generate cs_linux_groups lookup
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_linux_groups` \
| eval new_users=if(isnull(users) OR users="","NOUSERS",users) \
| stats latest(new_*) as new_* latest(_time) as new_time by host group_name \
| eval host_status = "reporting" \
| appendpipe \
    [| inputlookup cs_linux_groups \
    | eval old_users=users \
    | stats latest(old_*) as old_* latest(status) as status latest(_time) as old_time by host group_name \
    | search status!="group_removed" \
    | fields - status ] \
| stats values(*) as * by host group_name \
| eventstats values(host_status) as host_status , max(new_time) as host_latest by host \
| eval status=case(isnull(old_users) AND host_status=="reporting","group_added",isnull(new_users) AND host_status=="reporting","group_removed",(new_users!=old_users) AND host_status=="reporting","group_updated",1=1,"no change") \
| search status!="no change" \
| eval mv_old_users = split(old_users, ","), mv_new_users = split(new_users, ",") \
| cyencesmvdiff oldfield="mv_old_users" newfield="mv_new_users" ignore="NOUSERS" \
| eval changes1 = if(isnotnull(added), "USER_ADDED:: ". mvjoin(added, ","), "") \
| eval changes2 = if(isnotnull(removed), "USER_REMOVED:: ". mvjoin(removed, ","), "") \
| eval changes=mvappend(changes1, changes2) \
| eval _time=case(status=="group_added",new_time,status=="group_removed",host_latest,status=="group_updated",new_time) \
| eval users=case(status=="group_added",new_users,status=="group_removed",old_users,status=="group_updated",new_users) \
| table host group_name _time users status changes \
| outputlookup cs_linux_groups append=true
action.cyences_notable_event_action.products = Linux


[Linux - cs_linux_users Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 7 * * * *
description = Generate cs_linux_users lookup
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_linux_users` UID!=""\
| eval new_COMMAND_SHELL = COMMAND_SHELL, new_GID=GID, new_HOME_DIR=HOME_DIR,new_SUDOACCESS=SUDOACCESS,new_USER_INFO=USER_INFO,new_USERNAME=USERNAME\
| stats latest(new_*) as new_* latest(_time) as new_time by host UID \
| eval host_status = "reporting" \
| appendpipe \
    [| inputlookup cs_linux_users \
    | eval old_COMMAND_SHELL = COMMAND_SHELL, old_GID=GID, old_HOME_DIR=HOME_DIR,old_SUDOACCESS=SUDOACCESS,old_USER_INFO=USER_INFO,old_USERNAME=USERNAME\
    | stats latest(old_*) as old_* latest(status) as status latest(_time) as old_time by host UID \
    | search status!="user_removed" \
    | fields - status ] \
| stats values(*) as * by  host UID \
| eventstats values(host_status) as host_status , max(new_time) as host_latest by host \
| eval status=case(isnull(old_USERNAME) AND host_status=="reporting","user_added",isnull(new_USERNAME) AND host_status=="reporting","user_removed",(new_COMMAND_SHELL!=old_COMMAND_SHELL OR new_HOME_DIR!=old_HOME_DIR OR new_SUDOACCESS!=old_SUDOACCESS OR new_USER_INFO!=old_USER_INFO OR new_GID!=old_GID OR new_USERNAME!=old_USERNAME ) AND host_status=="reporting","user_updated",1=1,"no change") \
| search status!="no change" \
| eval changes1 = if(status="user_updated" and new_COMMAND_SHELL!=old_COMMAND_SHELL, "COMMAND_SHELL:: ".old_COMMAND_SHELL. " => ".new_COMMAND_SHELL, "")\
| eval changes2 = if(status="user_updated" and new_HOME_DIR!=old_HOME_DIR, "HOME_DIR:: ".old_HOME_DIR. " => ".new_HOME_DIR, "")\
| eval changes3 = if(status="user_updated" and new_SUDOACCESS!=old_SUDOACCESS, "SUDOACCESS:: ".old_SUDOACCESS. " => ".new_SUDOACCESS, "")\
| eval changes4 = if(status="user_updated" and new_USER_INFO!=old_USER_INFO, "USER_INFO:: ".old_USER_INFO. " => ".new_USER_INFO, "")\
| eval changes5 = if(status="user_updated" and new_GID!=old_GID, "GID:: ".old_GID. " => ".new_GID, "")\
| eval changes6 = if(status="user_updated" and new_USERNAME!=old_USERNAME, "USERNAME:: ".old_USERNAME. " => ".new_USERNAME, "")\
| eval changes=mvappend(changes1, changes2, changes3, changes4, changes5, changes6)\
| eval _time=case(status=="user_added",new_time,status=="user_removed",host_latest,status=="user_updated",new_time) \
| eval USERNAME=case(status=="user_added",new_USERNAME,status=="user_removed",old_USERNAME,status=="user_updated",new_USERNAME) \
| eval COMMAND_SHELL=case(status=="user_added",new_COMMAND_SHELL,status=="user_removed",old_COMMAND_SHELL,status=="user_updated",new_COMMAND_SHELL) \
| eval HOME_DIR=case(status=="user_added",new_HOME_DIR,status=="user_removed",old_HOME_DIR,status=="user_updated",new_HOME_DIR) \
| eval SUDOACCESS=case(status=="user_added",new_SUDOACCESS,status=="user_removed",old_SUDOACCESS,status=="user_updated",new_SUDOACCESS) \
| eval USER_INFO=case(status=="user_added",new_USER_INFO,status=="user_removed",old_USER_INFO,status=="user_updated",new_USER_INFO) \
| eval GID=case(status=="user_added",new_GID,status=="user_removed",old_GID,status=="user_updated",new_GID) \
| table host UID _time USERNAME COMMAND_SHELL HOME_DIR SUDOACCESS USER_INFO GID status changes \
| outputlookup cs_linux_users append=true
action.cyences_notable_event_action.products = Linux


[Linux - User Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 10 * * * *
description = A Linux User Added/Updated/Deleted 
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_linux_users \
| addinfo | where _time>=info_min_time and _time <info_max_time \
| table host UID _time USERNAME COMMAND_SHELL HOME_DIR SUDOACCESS USER_INFO GID status changes \
| `cs_user_privilege_mapping(USERNAME)` \
| eval cyences_severity = case(UID=0 or is_privileged_user=="Yes", "high",1=1, "medium") \
| `cs_change_in_user_linux_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_change_in_user_linux_filter
action.cyences_notable_event_action.contributing_events = `cs_linux_users` 
action.cyences_notable_event_action.system_compromised_search = | stats list(*) as * by host UID
action.cyences_notable_event_action.system_compromised_drilldown = `cs_linux_users` host=$row.host$ UID=$row.UID$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Linux
action.cyences_notable_event_action.teams = SOC


[Linux - Group Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 10 * * * *
description = A Linux Group Added/Updated/Deleted 
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_linux_groups \
| addinfo | where _time>=info_min_time and _time <info_max_time \
| table _time host group_name users status changes \
| eval cyences_severity = case(group_name="root", "high",1=1, "medium") \
| `cs_change_in_group_of_linux_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_change_in_group_of_linux_filter
action.cyences_notable_event_action.contributing_events = `cs_linux_groups` 
action.cyences_notable_event_action.system_compromised_search = | stats list(*) as * by host group_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_linux_groups` host=$row.host$ group_name=$row.group_name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Linux
action.cyences_notable_event_action.teams = SOC



# ================
# Database
# ================

# ================
# MSSQL
# ================
[MSSQL - User Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 33 * * * *
description = An alert for user changes
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc IN("SQL LOGIN","SQL USER")  _index_earliest=-60m@m _index_latest=now  | rename properties.* as *  \
| eval status = if(succeeded==1 or succeeded=="true", "success", "failure") \
| rename server_instance_name as db_host, server_principal_name as user, class_type_desc as object_type, client_ip as src, database_principal_name as db_user, application_name as client_app \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time cyences_severity host db_host user action_name schema_name database_name object_name object_type src db_user client_app statement status \
| eval cyences_severity="high" \
| `cs_mssql_user_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_mssql_user_changes_filter
action.cyences_notable_event_action.contributing_events = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc IN("SQL LOGIN","SQL USER") | rename properties.* as *
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc IN("SQL LOGIN","SQL USER") host=$row.host$ | rename properties.* as *
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc IN("SQL LOGIN","SQL USER") user=$row.user$ | rename properties.* as *
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = MSSQL
action.cyences_notable_event_action.teams = SOC


[MSSQL - Role Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 33 * * * *
description = An alert for role changes 
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc IN("SERVER ROLE", "ROLE")  _index_earliest=-60m@m _index_latest=now  | rename properties.* as *  \
| eval status = if(succeeded==1 or succeeded=="true", "success", "failure") \
| rename server_instance_name as db_host, server_principal_name as user, class_type_desc as object_type, client_ip as src, database_principal_name as db_user, application_name as client_app \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time cyences_severity host db_host user action_name schema_name database_name object_name object_type src db_user client_app statement status \
| eval cyences_severity="high" \
| `cs_mssql_role_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_mssql_role_changes_filter
action.cyences_notable_event_action.contributing_events = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc IN("SERVER ROLE", "ROLE") | rename properties.* as *
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc IN("SERVER ROLE", "ROLE") host=$row.host$ | rename properties.* as *
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc IN("SERVER ROLE", "ROLE") user=$row.user$ | rename properties.* as *
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = MSSQL
action.cyences_notable_event_action.teams = SOC


[MSSQL - Database Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 33 * * * *
description = An alert for database changes
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc=DATABASE action_name IN("CREATE","DROP") object_name=*  _index_earliest=-60m@m _index_latest=now  | rename properties.* as *  \
| eval status = if(succeeded==1 or succeeded=="true", "success", "failure") \
| rename server_instance_name as db_host, server_principal_name as user, class_type_desc as object_type, client_ip as src, database_principal_name as db_user, application_name as client_app \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time cyences_severity host db_host user action_name schema_name database_name object_name object_type src db_user client_app statement status \
| eval cyences_severity="high" \
| `cs_mssql_database_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_mssql_database_changes_filter
action.cyences_notable_event_action.contributing_events = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc=DATABASE action_name IN("CREATE","DROP") object_name=* | rename properties.* as *
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc=DATABASE action_name IN("CREATE","DROP") object_name=* host=$row.host$ | rename properties.* as *
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = (`cs_mssql` (sourcetype="mssql:audit" OR sourcetype="mssql:audit:json")) OR (`cs_windows_idx` source="WinEventLog:Application" EventCode=33205 ) class_type_desc=DATABASE action_name IN("CREATE","DROP") object_name=* user=$row.user$ | rename properties.* as *
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = MSSQL
action.cyences_notable_event_action.teams = SOC


# ================
# Oracle
# ================
[Oracle - User Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 37 * * * *
description = An alert for the user changes.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_oracle` (sourcetype="oracle:audit:xml" OR  sourcetype="oracle:audit:unified") (vendor_action IN ("CREATE USER", "ALTER USER", "DROP USER") OR ACTION_NAME IN ("CREATE USER", "ALTER USER", "DROP USER")) \
| eval action_name = coalesce(vendor_action, ACTION_NAME), database_name = coalesce(DB_UNIQUE_NAME, database_name), schema_name = coalesce(OBJECT_SCHEMA, schema_name), object_name = coalesce(object, OBJECT_NAME), object_type = coalesce(object_category, AUDIT_TYPE), db_user = coalesce(DB_User, DBUSERNAME), client_app = coalesce(CLIENT_PROGRAM_NAME, client_app), statement = coalesce(command, SQL_TEXT), status = if(RETURNCODE==0 or RETURN_CODE==0, "success", "failure"), db_host = host \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time host db_host user action_name schema_name database_name object_name object_type src db_user client_app statement status \
| eval cyences_severity="high" \
| `cs_oracle_user_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_oracle_user_changes_filter
action.cyences_notable_event_action.contributing_events = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("CREATE USER", "ALTER USER", "DROP USER") OR ACTION_NAME IN ("CREATE USER", "ALTER USER", "DROP USER"))
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("CREATE USER", "ALTER USER", "DROP USER") OR ACTION_NAME IN ("CREATE USER", "ALTER USER", "DROP USER")) host=$row.host$
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("CREATE USER", "ALTER USER", "DROP USER") OR ACTION_NAME IN ("CREATE USER", "ALTER USER", "DROP USER")) user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Oracle
action.cyences_notable_event_action.teams = SOC


[Oracle - Role Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 37 * * * *
description = An alert for the role changes.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_oracle` (sourcetype="oracle:audit:xml" OR  sourcetype="oracle:audit:unified") (vendor_action IN ("GRANT", "REVOKE") OR ACTION_NAME IN ("GRANT", "REVOKE")) \
| eval action_name = coalesce(vendor_action, ACTION_NAME), database_name = coalesce(DB_UNIQUE_NAME, database_name), schema_name = coalesce(OBJECT_SCHEMA, schema_name), object_name = coalesce(object, OBJECT_NAME), object_type = coalesce(object_category, AUDIT_TYPE), db_user = coalesce(DB_User, DBUSERNAME), client_app = coalesce(CLIENT_PROGRAM_NAME, client_app), statement = coalesce(command, SQL_TEXT), status = if(RETURNCODE==0 or RETURN_CODE==0, "success", "failure"), db_host = host \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time host db_host user action_name schema_name database_name object_name object_type src db_user client_app statement status \
| eval cyences_severity="high" \
| `cs_oracle_role_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_oracle_role_changes_filter
action.cyences_notable_event_action.contributing_events = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("GRANT", "REVOKE") OR ACTION_NAME IN ("GRANT", "REVOKE"))
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("GRANT", "REVOKE") OR ACTION_NAME IN ("GRANT", "REVOKE")) host=$row.host$
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("GRANT", "REVOKE") OR ACTION_NAME IN ("GRANT", "REVOKE")) user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Oracle
action.cyences_notable_event_action.teams = SOC


#TODO: Need to verify with real sample event
[Oracle - Database Changes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 37 * * * *
description = An alert for the database changes.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_oracle` (sourcetype="oracle:audit:xml" OR  sourcetype="oracle:audit:unified") (vendor_action IN ("CREATE DATABASE", "DROP DATABASE") OR ACTION_NAME IN ("CREATE DATABASE", "DROP DATABASE")) \
| eval action_name = coalesce(vendor_action, ACTION_NAME), database_name = coalesce(DB_UNIQUE_NAME, database_name), schema_name = coalesce(OBJECT_SCHEMA, schema_name), object_name = coalesce(object, OBJECT_NAME), object_type = coalesce(object_category, AUDIT_TYPE), db_user = coalesce(DB_User, DBUSERNAME), client_app = coalesce(CLIENT_PROGRAM_NAME, client_app), statement = coalesce(command, SQL_TEXT), status = if(RETURNCODE==0 or RETURN_CODE==0, "success", "failure"), db_host = host \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time host db_host user action_name schema_name database_name object_name object_type src db_user client_app statement status \
| eval cyences_severity="high" \
| `cs_oracle_database_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_oracle_database_changes_filter
action.cyences_notable_event_action.contributing_events = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("CREATE DATABASE", "DROP DATABASE") OR ACTION_NAME IN ("CREATE DATABASE", "DROP DATABASE"))
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("CREATE DATABASE", "DROP DATABASE") OR ACTION_NAME IN ("CREATE DATABASE", "DROP DATABASE")) host=$row.host$
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = `cs_oracle` (sourcetype="oracle:audit:xml" OR sourcetype="oracle:audit:xml") (vendor_action IN ("CREATE DATABASE", "DROP DATABASE") OR ACTION_NAME IN ("CREATE DATABASE", "DROP DATABASE")) user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Oracle
action.cyences_notable_event_action.teams = SOC



# =======================
# Asset Inventory
# =======================
[Asset Inventory - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule =  0 0 * * *
description = This savedsearch update the asset inventory every day and generates lookup for all assets data. \
\
Data Collection - Qualys, Tenable, Nessus Assets data 
dispatch.earliest_time = -1d@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_cyences_assets` count, latest(Assets.asset_hostname) as asset_hostname, latest(Assets.asset_ip) as asset_ip, latest(Assets.asset_mac_address) as asset_mac_address, latest(host) as host, latest(Assets.last_scan_time) as last_scan_time, latest(Assets.os) as os, latest(Assets.state) as state, latest(_time) as time FROM datamodel=Cyences_Assets by Assets.asset_id, Assets.vendor_product \
| `cs_drop_dm_object_name(Assets)` \
| inputlookup cs_all_assets append=t \
| dedup asset_id, vendor_product \
| eval asset_hostname=mvjoin(mvdedup(split(lower(asset_hostname), "~~")), "~~"), asset_ip=mvjoin(mvdedup(split(lower(asset_ip), "~~")), "~~"), asset_mac_address=mvjoin(mvdedup(split(lower(asset_mac_address), "~~")), "~~") \
| table asset_hostname, asset_id, asset_ip, asset_mac_address, host, last_scan_time, os, state, time, vendor_product \
| outputlookup cs_all_assets


[Asset Inventory - Lookup CleanUp]
disabled = 0
enableSched = 0
alert.track = 0
cron_schedule = 0 0 1 * *
description = This report cleans up cs_all_assets lookup.
dispatch.earliest_time = -2y
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_all_assets \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_all_assets


[Asset Inventory - Vulnerability Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule =  0 */4 * * *
description = This savedsearch update the vulnerability inventory every 4 hours and generates lookup for all vulnerability data. \
\
Data Collection - Qualys, Tenable, Nessus vulnerability data 
dispatch.earliest_time = -1d@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_cyences_vulnerabilities` count, latest(Vulnerabilities.category) as category, latest(Vulnerabilities.cpe) as cpe, latest(Vulnerabilities.cve) as cve, latest(Vulnerabilities.cvss) as cvss, latest(Vulnerabilities.description) as description, latest(Vulnerabilities.dest_ip) as dest_ip, latest(Vulnerabilities.dest_name) as dest_name, latest(Vulnerabilities.dvc) as dvc, latest(Vulnerabilities.first_found) as first_found, latest(Vulnerabilities.has_patch) as has_patch, latest(host) as host, latest(Vulnerabilities.in_the_news) as in_the_news, latest(Vulnerabilities.last_found) as last_found, latest(Vulnerabilities.last_scan_time) as last_scan_time, latest(Vulnerabilities.os) as os, latest(Vulnerabilities.port) as port, latest(Vulnerabilities.protocol) as protocol, latest(Vulnerabilities.published_time) as published_time, latest(Vulnerabilities.severity) as severity, latest(Vulnerabilities.signature) as signature, latest(Vulnerabilities.signature_id) as signature_id, latest(Vulnerabilities.solution) as solution, latest(Vulnerabilities.status) as status, latest(_time) as time, latest(Vulnerabilities.indextime) as indextime, latest(Vulnerabilities.tracking_method) as tracking_method, latest(Vulnerabilities.type) as type, latest(Vulnerabilities.user) as user FROM datamodel=Cyences_Vulnerabilities where NOT ((Vulnerabilities.vendor_product="Tenable.io" OR Vulnerabilities.vendor_product="Tenable.sc") AND Vulnerabilities.vul_id>=1000000) by Vulnerabilities.dest_id, Vulnerabilities.vul_id, Vulnerabilities.vendor_product \
``` NOTE - vul_id over 1 million is for custom compliance reason, not actual vulnerabilities for Tenable products ``` \
| `cs_drop_dm_object_name(Vulnerabilities)` \
| inputlookup cs_all_vuln append=t \
| dedup dest_id, vul_id, vendor_product \
| table category, cpe, cve, cvss, description, dest_id, dest_ip, dest_name, dvc, first_found, has_patch, host, in_the_news, last_found, last_scan_time, os, port, protocol, published_time, severity, signature, signature_id, solution, status, time, indextime, tracking_method, type, user, vendor_product, vul_id \
| outputlookup cs_all_vuln


[Asset Inventory - Vulnerability Lookup CleanUp]
disabled = 0
enableSched = 0
alert.track = 0
cron_schedule = 0 0 1 * *
description = This report cleans up cs_all_vuln lookup.
dispatch.earliest_time = -2y
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_all_vuln \
| addinfo | where time>=info_min_time and time<=info_max_time \
| search NOT ((vendor_product="Tenable.io" OR vendor_product="Tenable.sc") AND vul_id>=1000000) \
``` NOTE - vul_id over 1 million is for custom compliance reason, not actual vulnerabilities for Tenable products ``` \
| outputlookup cs_all_vuln



# ================
# Device Inventory
# ================
[Device Inventory - Lansweeper]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 * * * *
description = This report update the device inventory every hour and generates lookup for lansweeper data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
# This time-range does not apply in the search as it is given as part of search-query
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_lansweeper` `cs_lansweeper_timerange` \
| dedup AssetID \
| eval product_name="Lansweeper", product_uuid=AssetID, hostname=lower(mvdedup(mvappend(AssetName, FQDN))), ip=lower(IPAddress), mac_address=lower(Mac), antivirus=mvzip(antivirus_name, antivirus_enabled, "#"), user=Username, unique_host = lower(coalesce(FQDN,AssetName)) \
| rename _time as time, _indextime as indextime, AssetID as lansweeper_id, host as lansweeper_collected_by, site_name as Site, AssetTypename as AssetType, Statename as lansweeper_state, Userdomain as Domain, AssetGroup as GroupName, OScode as OSVersion, Username as lansweeper_user, version as AssetVersion, OS as lansweeper_os, FQDN as lansweeper_fqdn, Firstseen as FirstSeen, Lastseen as LastSeen \
| fillnull value="" unique_host hostname mac_address ip \
| dedup unique_host mac_address ip ```In order to avoid the duplicate entries of the similar devices which has diff AssetID``` \
| table time, indextime, product_name, product_uuid, ip, mac_address, lansweeper_id, hostname, user, lansweeper_collected_by, Site, AssetType, lansweeper_state, Domain, GroupName, OSVersion, BuildNumber, AssetVersion, lansweeper_user, lansweeper_os, Description, IPLocation, lansweeper_fqdn, antivirus, AssetDomain, FirstSeen, LastSeen, AssetName, Serialnumber, Processor, Model, Manufacturer, OSRelease, OSname, SystemVersion, Memory, LsAgentVersion, LastLsAgent, LastChanged, DNSName \
| cyencesdevicemanager operation="addentries" \
| stats values(GroupName) as GroupName, values(antivirus) as antivirus, values(Processor) as Processor, first(*) as * by lansweeper_id \
| eval _key=lansweeper_id \
| outputlookup cs_lansweeper_inventory \
``` Note - We are not appending previous lookup in case of Lansweeper as Lansweeper Add-on always fetch full asset list.```
action.cyences_notable_event_action.products = Lansweeper


[Device Inventory - Tenable]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 2 * * * *
description = This report update the device inventory every hour and generates lookup for tenable data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_tenable_assets` | dedup tenable_uuid \
| eval tenable_fqdn=mvjoin(mvdedup(mvappend(fqdns, dnsName)), ", "), tenable_netbios=mvjoin(mvdedup(mvappend(netbios_names, netbiosNames, netbiosName, biosGUID)), ", "), tenable_os=mvjoin(mvdedup(mvappend(operating_systems, operatingSystem, operatingSystems)), ", "), time=_time, product_name="Tenable", product_uuid=tenable_uuid, ip=mvdedup(mvappend(ip, ipv4s, ipv6s)), mac_address=mvdedup(mvappend(mac_address, mac_addresses, macAddress)), hostname=mvdedup(mvappend(hostnames, fqdns, dnsName, dns_name)), indextime=_indextime, user="" \
| rename host as tenable_collected_by, network_name as tenable_network_name, state as tenable_state \
| fillnull value="-" tenable_network_name \
| table time, indextime, product_name, product_uuid, ip, mac_address, hostname, user, tenable_collected_by, tenable_fqdn, tenable_netbios, tenable_os, tenable_state, tenable_network_name, created_at, first_scan_time, first_seen, has_agent, has_plugin_results, last_authenticated_scan_date, last_licensed_scan_date, last_seen, tenable_uuid \
| cyencesdevicemanager operation="addentries" \
| append [| inputlookup cs_tenable_inventory] \
| stats latest(time) as time, latest(*) as * by tenable_uuid \
| eval _key=tenable_uuid | outputlookup cs_tenable_inventory
action.cyences_notable_event_action.products = Tenable


[Device Inventory - Tenable Vuln]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 59 * * * *
description = This report generate tenable vulnerabilities lookup. 
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_tenable_vuln` vul_id<1000000 | dedup tenable_uuid, vul_id \
| eval time=_time, indextime=_indextime, product_name="Tenable", product_uuid=tenable_uuid \
| fillnull ip, hostname, mac_address, user value="" \
| table time, indextime, _time, product_name, product_uuid, hostname, user, ip, mac_address, tenable_uuid, vul_id, vul_name, vul_description, vul_severity, vul_severity_id, vul_state, last_fixed, last_found, vul_cve, vul_solution, vul_cpe, vul_family, vul_has_patch, vul_in_the_news, vul_risk_factor, vul_synopsis, vul_type, vul_version, vul_protocol, vul_port \
| cyencesdevicemanager operation="addentries" \
| fields - time \
| append [| inputlookup cs_tenable_vuln] \
| dedup tenable_uuid, vul_id sortby -_time \
| where vul_id<1000000 \
``` NOTE - vul_id over 1 million is for custom compliance reason, not actual vulnerabilities for Tenable products ``` \
| outputlookup cs_tenable_vuln
action.cyences_notable_event_action.products = Tenable


[Device Inventory - Nessus]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 2 * * * *
description = This report update the device inventory every hour and generates lookup for nessus data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_nessus_assets` | dedup nessus_uuid \
| eval nessus_fqdn=mvjoin(mvdedup(mvappend(fqdns, dnsName)), ", "), nessus_netbios=mvjoin(mvdedup(mvappend(netbios_names, netbiosNames, netbiosName, biosGUID)), ", "), nessus_os=mvjoin(mvdedup(mvappend(operating_systems, operatingSystem, operatingSystems)), ", "), time=_time, product_name="Nessus", product_uuid=nessus_uuid, ip=mvdedup(mvappend(ip, ipv4s, ipv6s)), mac_address=mvdedup(mvappend(mac_address, mac_addresses, macAddress)), hostname=mvdedup(mvappend(hostnames, fqdns, dnsName, dns_name)), indextime=_indextime, user="" \
| rename host as nessus_collected_by, network_name as nessus_network_name, state as nessus_state \
| fillnull value="-" nessus_network_name \
| table time, indextime, product_name, product_uuid, ip, mac_address, hostname, user, nessus_collected_by, nessus_fqdn, nessus_netbios, nessus_os, nessus_state, nessus_network_name, created_at, first_scan_time, first_seen, has_agent, has_plugin_results, last_authenticated_scan_date, last_licensed_scan_date, last_seen, nessus_uuid \
| cyencesdevicemanager operation="addentries" \
| append [| inputlookup cs_nessus_inventory] \
| stats latest(time) as time, latest(*) as * by nessus_uuid \
| eval _key=nessus_uuid | outputlookup cs_nessus_inventory
action.cyences_notable_event_action.products = Nessus


[Device Inventory - Nessus Vuln]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 59 * * * *
description = This report generate nessus vulnerabilities lookup.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_nessus_vuln` | dedup nessus_uuid, vul_id \
| eval time=_time, indextime=_indextime, product_name="nessus", product_uuid=nessus_uuid \
| fillnull ip, hostname, mac_address, user value="" \
| table time, indextime, _time, product_name, product_uuid, hostname, user, ip, mac_address, nessus_uuid, vul_id, vul_name, vul_description, vul_severity, vul_severity_id, vul_state, last_fixed, last_found, vul_cve, vul_solution, vul_cpe, vul_family, vul_has_patch, vul_in_the_news, vul_risk_factor, vul_synopsis, vul_type, vul_version, vul_protocol, vul_port \
| cyencesdevicemanager operation="addentries" \
| fields - time \
| append [| inputlookup cs_nessus_vuln] \
| dedup nessus_uuid, vul_id sortby -_time \
| outputlookup cs_nessus_vuln
action.cyences_notable_event_action.products = Nessus


[Device Inventory - Qualys]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 4 * * * *
description = This report update the device inventory every hour and generates lookup for qualys data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_qualys_hostsummary` | dedup HOST_ID \
| eval time=_time, indextime=_indextime, product_name="Qualys", product_uuid=HOST_ID, ip=lower(IP), hostname=lower(DNS), mac_address="" \
| fillnull hostname, user value="" \
| rename HOST_ID as qualys_id, host as qualys_collected_by, OS as QUALYS_OS, DNS as qualys_dns \
| table time, indextime, product_name, product_uuid, ip, mac_address, hostname, user, qualys_collected_by, qualys_id, qualys_dns, QUALYS_OS, NETWORK_ID, TRACKING_METHOD, ACTIVE*, CONFIRMED*, FIXED*, INFO*, LAST_*, NEW*, POTENTIAL*, RE_OPENED*, SEVERITY_*, TOTAL_VULNS \
| cyencesdevicemanager operation="addentries" \
| append [| inputlookup cs_qualys_inventory] \
| stats latest(time) as time, latest(*) as * by qualys_id \
| eval _key=qualys_id | outputlookup cs_qualys_inventory
action.cyences_notable_event_action.products = Qualys


# To simplify the configuration, removed the sophosinstancedetails custom command and using sophos_endpoints source to collect sophos endpoints events.
[Device Inventory - Sophos Endpoint Protection]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 6 12 * * *
description = This report update the device inventory every day and generates lookup for Sophos endpoint data.
dispatch.earliest_time = -24h@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` sourcetype=sophos_endpoints  | dedup id \
| rename id as sophos_uuid, "tenant.id" as sophos_customer_id, type as sophos_type, "health.overall" as sophos_health, "health.threats.status" as sophos_threats_status, "health.services.status" as sophos_services_status, "associatedPerson.name" as sophos_user, "associatedPerson.viaLogin" as sophos_login_via, "os.name" as sophos_os \
| fillnull "os.build", "os.isServer", "os.majorVersion", "os.minorVersion", "os.platform" value="-" \
| eval sophos_os_details = mvappend("Platform:".'os.platform', "Build No.: ".'os.build', "ServerOS:".'os.isServer', "OS MajorVersion:".'os.majorVersion', "OS MinorVersion:".'os.minorVersion') \
| eval service_status=mvzip('health.services.serviceDetails{}.name', 'health.services.serviceDetails{}.status') \
| eval time=strptime(lastSeenAt, "%FT%T.%3QZ"), indextime=now(), product_name="Sophos Endpoint Protection", product_uuid=sophos_uuid, ip=lower(mvdedup(mvappend('ipv4Addresses{}','ipv6Addresses{}'))), hostname=lower(hostname), mac_address=lower('macAddresses{}'), user=sophos_user \
| table time, indextime, product_name, product_uuid, sophos_customer_id, sophos_uuid, ip, hostname, user, mac_address, sophos_os, sophos_os_details, sophos_user, sophos_login_via, tamperProtectionEnabled, service_status, sophos_health, sophos_services_status, sophos_threats_status, sophos_type \
| cyencesdevicemanager operation="addentries" \
| eval _key=sophos_uuid | outputlookup cs_sophos_inventory \
``` Note - We are not appending previous lookup in case of Sophos as Sophos endpoint data fetch always complete asset list.```
action.cyences_notable_event_action.products = Sophos Endpoint Protection


[Device Inventory - Windows Defender]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 8 * * * *
description = This report update the device inventory every hour and generates lookup for windows defender data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode=1151 | `cs_windows_defender_inventory_fill_search`
action.cyences_notable_event_action.products = Windows Defender


[Device Inventory - CrowdStrike]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 10 * * * *
description = This report update the device inventory every hour and generates lookup for crowdstrike data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_crowdstrike_devices` | dedup falcon_device.device_id \
| eval time=_time, indextime=_indextime, crowdstrike_id='falcon_device.device_id', product_name="CrowdStrike" \
| rename falcon_device.* as * \
| rename device_id as product_uuid, local_ip as ip, host as crowdstrike_collected_by \
| fillnull ip, hostname, mac_address, user value="" \
| table _time, time, indextime,  product_name, product_uuid, hostname, user, ip, mac_address, crowdstrike_id, crowdstrike_collected_by, external_ip, agent_version, site_name, status, first_seen, last_seen, last_login_timestamp, last_login_user, last_reboot, os_product_name, os_version, os_build, platform_name, product_type_desc \
| cyencesdevicemanager operation="addentries" \
| eval _key=product_uuid | outputlookup cs_crowdstrike_inventory \
``` Note - We are not appending previous lookup in case of CrowdStrike as CrowdStrike Add-on always fetches full asset list.```
action.cyences_notable_event_action.products = CrowdStrike Devices


[Device Inventory - Kaspersky]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 12 * * * *
description = This report update the device inventory every hour and generates lookup for Kaspersky data. 
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_kaspersky` ProductName=KES*  \
| rename dest_ip as ip , dest as hostname,  ProductName as kaspersky_collected_by , ProductVersion as kaspersky_version, macaddress as mac_address  \
| eval hostname=lower(hostname) \
| table _time, _indextime, ip, hostname, mac_address, kaspersky_collected_by, kaspersky_version   \
| fillnull ip, hostname, mac_address value=""  \
| stats latest(_time) as _time latest(_indextime) as indextime latest(*) as * by hostname \
| join type=left [| search `cs_kaspersky`  log_type=KLSRV_HOST_STATUS_CRITICAL "Protection is disabled" \
    | rex field=_raw "Status of device \'(?<critical_device>[^\']*)" \
    | stats latest(_time) as time  by critical_device \
    | rename critical_device as hostname \
    |  eval hostname=lower(hostname) ]  \
| eval kaspersky_status=if(_time<time AND isnotnull(time),"Disabled","Present")  | fields - time \
| eval product_name="Kaspersky", product_uuid=hostname, time=_time, user="" \
| cyencesdevicemanager operation="addentries" \
| append [|inputlookup cs_kaspersky_inventory ] \
| stats latest(*) as * latest(time) as time by hostname \
| eval _key=hostname \
| eval kaspersky_host=hostname \
| outputlookup cs_kaspersky_inventory
action.cyences_notable_event_action.products = Kaspersky


[Device Inventory - Splunk Internal]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 14 * * * *
description = This report update the device inventory every hour with the available forwarders in splunk environment. \
\
Data Collection - It uses the index=_internal and do not require specific data collection.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (index=_internal sourcetype=splunkd (connectionType=cooked OR connectionType=cookedSSL) fwdType=* group=tcpin_connections) \
| stats latest(sourceIp) as ip, latest(fwdType) as splunk_forwarder_type, latest(version) as splunk_version, latest(arch) as splunk_arch, latest(os) as splunk_os, max(_time) as time, max(_indextime) as indextime by hostname \
| eval product_name="Splunk Internal", product_uuid=hostname."-".ip, mac_address="", user="" \
| cyencesdevicemanager operation="addentries" \
| append [|inputlookup cs_splunk_inventory ] \
| stats latest(*) as * latest(time) as time by hostname \
| eval _key=hostname \
| eval splunk_host=hostname \
| outputlookup cs_splunk_inventory
action.cyences_notable_event_action.products = Splunk Internal


# Backfill
[Device Inventory Backfill]
disabled = 0
enableSched = 0
alert.track = 0
run_on_startup = true
description = This report backfills the all device inventory lookups. (Default timerange: last 30 days). \
The report executes on Splunk start to make sure we do not miss data as well as this make sure user do not have make manually tasks.
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | cyencesinventorybackfill search_prefix="Device Inventory -" earliest_time="-30d@m" latest_time="now"


[Device Inventory Lookup CleanUp]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 5 * * 0
description = This report cleans up device inventory lookup every week (sunday early morning) and removes the devices from the inventories which did not showup in last 60 days.
dispatch.earliest_time = -60d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_tenable_inventory \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_tenable_inventory | where SEARCHNOTHING="SEARCHNOTHING" \
| append [| inputlookup cs_nessus_inventory \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_nessus_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_qualys_inventory \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_qualys_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_windows_defender_inventory \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_windows_defender_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_kaspersky_inventory \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_kaspersky_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_splunk_inventory \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_splunk_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [ | makeresults count=1 | addinfo | eval days_ago=relative_time(now(), "-2d@h") \
| map search="| cyencesdevicemanager operation=\"cleanup\" products_to_cleanup=\"CrowdStrike,Lansweeper,Sophos Endpoint Protection,Splunk Internal\" minindextime=$days_ago$ maxindextime=$info_max_time$" \
| where SEARCHNOTHING="SEARCHNOTHING"] \
| append [ | makeresults count=1 | addinfo \
| map search="| cyencesdevicemanager operation=\"cleanup\" minindextime=$info_min_time$ maxindextime=$info_max_time$" \
| where SEARCHNOTHING="SEARCHNOTHING"] \
| appendpipe [| inputlookup cs_tenable_vuln | eval product_uuids=tenable_uuid \
| join product_uuids [| cyencesdevicemanager operation="getdevices" | search product_uuids=* | mvexpand product_uuids | table product_uuids, uuid] \
| search uuid=* | fields - uuid, product_uuids \
| outputlookup cs_tenable_vuln | where SEARCHNOTHING="SEARCHNOTHING"] \
| appendpipe [| inputlookup cs_nessus_vuln | eval product_uuids=nessus_uuid \
| join product_uuids [| cyencesdevicemanager operation="getdevices" | search product_uuids=* | mvexpand product_uuids | table product_uuids, uuid] \
| search uuid=* | fields - uuid, product_uuids \
| outputlookup cs_nessus_vuln | where SEARCHNOTHING="SEARCHNOTHING"] \
```Note - Sophos Endpoint Protection, CrowdStrike, Lansweeper and Splunk Internal Cleanup are not required as those lookups are always overridden completely so it will cleans up devices ingested older than 2 days. For all other products, device inventory lookup will cleans up devices older than 60 days.```


# Merging
[Device Inventory Merge Similar Devices]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 15 0 * * *
description = This report merges the similar devices every day (at early midnight)
dispatch.earliest_time = -60d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | cyencesdevicemanager operation="merge" | table *



# ===============
# User Inventory
# ===============
[User Inventory - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 30 * * * *
description = This report update the user inventory every hour and generates user inventory lookup.\
\
Data Collection - This report depends on data collected in the splunk environment which contains the user related metadata.
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search =  index=* NOT sourcetype IN ("meraki", "fortigate_utm", "WindowsUpdateLog", "WinRegistry", "Script:ListeningPorts", "Script:InstalledApps", "sophos:xg:idp", "sophos:xg:firewall", "cisco:ios", "MSAD:NT6:DNS", "Perfmon:*") NOT (sourcetype="WinEventLog" user_type="computer") NOT (sourcetype="meraki:accesspoints" (NOT eventData.identity="*")) NOT (action=fail*) (user=* OR User=* OR UserName=* OR Username=* OR userName=* OR username=* OR user_name=* OR src_user=*) \
| `cs_user_inventory_data_filter` \
| eval user=mvdedup(mvappend(coalesce(src_user, user, user_name, username,Username, User, UserName, userName), if(mail="null" or mail="",null(),mail))), user_type=coalesce(user_type, user_role, user_category, "n/a") \
| search NOT user IN ("$*", "-", "' or '1=1", ".{jndi", "") \
| nomv user \
| stats latest(user_type) as user_type values(index) as index values(sourcetype) as sourcetype latest(_indextime) as indextime by user vendor_product \
| makemv delim="\
" user \
| cyencesusermanager operation="addentries" 


# CleanUp
[User Inventory - Lookup CleanUp]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 7 * * 0
description = This report cleans up user inventory lookup every week (sunday early morning) and removes the users from the inventories which did not showup in last 60 days.
dispatch.earliest_time = -60d@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | makeresults count=1 | addinfo \
| map search="| cyencesusermanager operation=\"cleanup\" minindextime=$info_min_time$ maxindextime=$info_max_time$ | table *"


# Merging
[User Inventory - Merge Similar Users]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 30 0 * * *
description = This report merges the similar users every day (at early midnight)
dispatch.earliest_time = -60d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | cyencesusermanager operation="merge" | table *


# Backfill
[User Inventory - Lookup Backfill]
disabled = 0
enableSched = 0
alert.track = 0
run_on_startup = true
description = This report backfills the user inventory lookup. (Default timerange: last 24 hours). \
The report executes on Splunk start to make sure we do not miss data.
dispatch.earliest_time = -24h@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | cyencesinventorybackfill search_prefix="User Inventory - Lookup Gen" earliest_time="-24h@m" latest_time="now"


