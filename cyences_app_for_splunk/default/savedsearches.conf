# Categaries #
# 1. Ransomware
# 2. Endpoint Compromise
# 3. Network Compromise
# 4. Palo Alto Firewall
# 5. Active Directoy and Windows
# 6. O365
# 7. Email
# 8. Credential Comprimise
# 9. Sophos Central (Antivirus)
# 10. Windows Defender (Antivirus)
# 11. CrowdStrike (Antivirus)
# 12. Authentication
# 13. Linux/Unix
# 14. AWS
# 15. O365 Defender ATP
# 16. Cisco IOS
# 17. GSuite


# Cron Details
# -------------------
# Every 10 minutes
#   - 1, 3, 4, 5, 6 and 8 's multiples
# Every 15 minutes
#   - 2, 17, 32, 47 th minutes
#   - 7, 22, 37, 52 th minutes
# Every 30 minutes
#   - 9, 39th minutes or 19, 49th minutes
# Hourly
#   - 29, 59th minutes
# Daily, Weekly, Monthly, Yearly
#   - At 0th Minute

# Severity Chart
# -----------------
# 5 - Critical
# 4 - High
# 3 - Medium
# 2 - Low
# 1 - Info


[default]
display.visualizations.custom.network_telemetry_map.network_telemetry_map.defaultWeight = 3
display.visualizations.custom.network_telemetry_map.network_telemetry_map.defaultColor = #0000FF
display.visualizations.custom.network_telemetry_map.network_telemetry_map.mapLatitude = 30
display.visualizations.custom.network_telemetry_map.network_telemetry_map.mapLongitude = 0
display.visualizations.custom.network_telemetry_map.network_telemetry_map.mapZoom = 2
display.visualizations.custom.network_telemetry_map.network_telemetry_map.drilldownTimeRangeToken = 
display.visualizations.custom.network_telemetry_map.network_telemetry_map.drilldownQuery = 
display.visualizations.custom.network_telemetry_map.network_telemetry_map.drilldownTokenName = 
display.visualizations.custom.network_telemetry_map.network_telemetry_map.drilldownTokenValue = 


[Sync Filter Macros]
disabled = 0
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = */5 * * * *
description = This report is used for syncing the filter macro param value from savedsearch to the macro.
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | syncfiltermacros

[Cyences Upgrade]
disabled = 0
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 53 * * * *
description = This report is used for doing cyences app upgrade steps if required.
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | cyencesupgrade


[Cyences Fill Users Lookup]
disabled = 0
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = */15 * * * *
description = This report is used to populate the lookup with users created on the Splunk.
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | rest /services/authentication/users splunk_server=local \
| table title, email, realname, roles, type, tz \
| rename title as username, email as user_email, realname as user_fullname, roles as user_roles, type as user_type, tz as user_tz \
| eval user_roles=mvjoin(user_roles, " | ") \
| outputlookup cyences_splunk_user_list.csv


[Cyences Notable Events Lookup Cleanup]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 4 * * 0
description = This report cleans up Cyences notable events lookup every week (sunday early morning) and remove older entries than 1 year.
dispatch.earliest_time = -365d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cyences_notable_event \
| addinfo | where update_time>=info_min_time and update_time<=info_max_time \
| fields - info_* \
| outputlookup cyences_notable_event


[Cyences Digest Email]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
relation = greater than
quantity = 0
cron_schedule = 1 19 * * *
description = Sends All Non-Critical Cyences Alert Notables as Daily Digest Email
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
search = `cs_cyences_index`\
| fields - _raw, alert_name, category, info_min_time, info_max_time, info_search_time, search_now, timestartpos, timeendpos, eventtype, linecount, splunk_server, splunk_server_group, tag, "tag::*", date_*, host, index, source, sourcetype\
| rename * AS X_*_NEW \
| foreach * [ eval newFieldName=replace("<<FIELD>>", "\s+", "_"), {newFieldName}='<<FIELD>>' ] | fields - "* *", newFieldName \
| foreach X_*_NEW [ eval <<MATCHSTR>>=<<FIELD>> ]\
| fields - X_*_NEW \
| rename orig_* as * \
| `cs_human_readable_time_format(_time, alert_time)` \
| table search_name, alert_time, event_tim*, *
action.cyences_send_digest_email_action = 1


# ============
# Ransomware
# ============
# Reports
[Ransomware - Calculate UpperBound for Spike in File Writes]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for Ransomware - Spike in File Writes alert (Runs everyday at 4 AM) - Generates the upperBound value of file writes for each host \
For more information refer to Ransomware - Spike in File Writes alert. \
Warning - Do not run enable this search without enabling data-model acceleration on Endpoint data-model as this search will reduce the system performance without acceleration.
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count FROM datamodel=Endpoint.Filesystem where Filesystem.action=created `cs_spike_in_the_file_writes_internal_filter` by _time span=1h, Filesystem.dest | `drop_dm_object_name(Filesystem)` \
| eventstats max(_time) as maxtime \
| stats avg(eval(if(_time<relative_time(maxtime, "-1d@d"), count,null))) as avg stdev(eval(if(_time<relative_time(maxtime, "-1d@d"), count, null))) as stdev by "dest" \
| eval upperBound=(avg+stdev*4) \
| outputlookup cs_ransomware_file_writes_upperbound.csv
action.cyences_notable_event_action.products = Sysmon


# Alerts
[Ransomware - Spike in File Writes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert identifies a spike in file writes that may result in ransomware writing encrypted files. \
Warning: Enable the following report, Ransomware - Calculate UpperBound for Spike in File Writes, before enabling this alert. Users should have a good understanding of false positives before enabling this alert. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza \
\
A false positive may appear from new application installations or by copying a large number of files.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=created `cs_spike_in_the_file_writes_internal_filter` by Filesystem.dest, Filesystem.file_path | `drop_dm_object_name(Filesystem)` \
| rex field=file_path "^(?<file_location>.*)[\\\\|\\/].*?(?:\.(?<file_extension>[^.]+))?$" \
| eval raw_event=1 \
| appendpipe \
    [| stats sum(count) as count by dest, file_location \
    | sort - count \
    | eval file_location_mix=file_location." (".count.")" \
    | fields - count] \
| appendpipe \
    [| where raw_event=1 \
    | stats sum(count) as count by dest, file_extension \
    | sort - count \
    | eval file_extension_mix=file_extension." (".count.")" \
    | fields - count ] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, list(file_location_mix) as file_location_mix, list(file_extension_mix) as file_extension_mix by dest \
| eval top5_file_location=mvindex(file_location_mix,0,4), top5_file_extension=mvindex(file_extension_mix,0,4) | fields - file_location_mix, file_extension_mix \
| where count>=`cs_ransomware_min_file_writes` \
| lookup cs_ransomware_file_writes_upperbound.csv dest OUTPUT upperBound, avg, stdev | where count>upperBound \
| eval avg=round(avg, 2), stdev=round(stdev, 2), upperBound=round(upperBound, 2) \
| eval cyences_severity = case(count>1000000, "critical", count>100000, "high", true(), "medium") \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_spike_in_file_writes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_spike_in_file_writes_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.action=created | `drop_dm_object_name(Filesystem)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.action=created Filesystem.dest=$row.dest$ | `drop_dm_object_name(Filesystem)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon



[Ransomware - Endpoint Compromise - Fake Windows Processes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 1,11,21,31,41,51 * * * *
description = This alert identifies processes which try to disguise themselves as a Windows process.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.process_path !="C:\\Windows\\System32*" Processes.process_path !="C:\\Windows\\SysWOW64*" by Processes.user Processes.dest Processes.process_name Processes.process_id Processes.process_path Processes.parent_process_name Processes.parent_process_path Processes.process_hash \
| `drop_dm_object_name("Processes")` \
|  `cs_system_processes_run_from_unexpected_locations_internal_filter` \
| lookup cs_fake_windows_processes_filter process_name, process_hash OUTPUT need_to_filtered | search NOT need_to_filtered=1 \
| `is_windows_system_file` \
| eval cyences_severity = "low" \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_system_processes_run_from_unexpected_locations_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_system_processes_run_from_unexpected_locations_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_path!="C:\\Windows\\System32*" Processes.process_path!="C:\\Windows\\SysWOW64*" | `drop_dm_object_name(Processes)` | lookup update=true is_windows_system_file filename as process_name OUTPUT systemFile | search systemFile=true | lookup cs_fake_windows_processes_filter process_name, process_hash OUTPUT need_to_filtered | search NOT need_to_filtered=1
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.dest=$row.dest$ Processes.process_path!="C:\\Windows\\System32*" Processes.process_path!="C:\\Windows\\SysWOW64*" | `drop_dm_object_name(Processes)` | lookup update=true is_windows_system_file filename as process_name OUTPUT systemFile | search systemFile=true | lookup cs_fake_windows_processes_filter process_name, process_hash OUTPUT need_to_filtered | search NOT need_to_filtered=1
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by process_name, parent_process_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=$row.process_name$ Processes.parent_process_name=$row.parent_process_name$ | `drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon



[Ransomware - Endpoint Compromise - Network Compromise - TOR Traffic]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 3,13,23,33,43,53 * * * *
description = This alert will focus on firewall data (Network_Traffic datamodel) to detect TOR traffic. \
\
Data Collection - Any firewall data that complies with the CIM definition. The alert will look for app=tor value.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.app=tor AND All_Traffic.action=allowed by All_Traffic.src_ip All_Traffic.dest_ip All_Traffic.dest_port All_Traffic.action \
| `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` | `drop_dm_object_name("All_Traffic")` \
| eval cyences_severity = "critical" \
| `cs_tor_traffic_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_tor_traffic_filter
action.cyences_notable_event_action.contributing_events = | datamodel Network_Traffic search strict_fields=false | search All_Traffic.app=tor | `drop_dm_object_name(All_Traffic)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest_ip, dest_port
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Network_Traffic search strict_fields=false | search All_Traffic.app=tor All_Traffic.dest_ip=$row.dest_ip$ | `drop_dm_object_name(All_Traffic)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src_ip
action.cyences_notable_event_action.attacker_drilldown = | datamodel Network_Traffic search strict_fields=false | search All_Traffic.app=tor All_Traffic.src_ip=$row.src_ip$ | `drop_dm_object_name(All_Traffic)`
action.cyences_send_email_action = 1


[Ransomware - Common Ransomware File Extensions]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4,14,24,34,44,54 * * * *
description = This alert is based on a lookup from the ES Content Update app. It will inspect for common ransomware file extensions. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem by Filesystem.dest, Filesystem.file_name, Filesystem.file_path \
| `drop_dm_object_name(Filesystem)` \
| rex field=file_path "(?<file_location>.*)[\\\\|\\/]" | rex field=file_name "(?<file_extension>\.[^\.]+)$" \
| stats sum(count) as count, min(firstTime) as firstTime max(lastTime) as lastTime, values(file_name) as sample_file_names by dest, file_extension, file_location \
| `cs_ransomware_extensions` \
| eval sample_file_names=mvindex(sample_file_names,0,2) \
| sort - count | eval file_location=file_location." (".count.")" \
| stats sum(count) as total_files_with_extension, min(firstTime) as firstTime max(lastTime) as lastTime, list(file_location) as file_location, values(sample_file_names) as sample_file_names by dest, file_extension \
| eval sample_file_names=mvindex(sample_file_names,0,9) | fields - file_name \
| eval top10_file_location=mvindex(file_location,0,9) | fields - file_location \
| where total_files_with_extension>=`cs_ransomware_min_file_extension_count` \
| eval cyences_severity = "medium" \
| `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(firstTime)` \
| `cs_common_ransomware_extensions_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_common_ransomware_extensions_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Filesystem search strict_fields=false | `drop_dm_object_name(Filesystem)` | rex field=file_name "(?<file_extension>\.[^\.]+)$" | `cs_ransomware_extensions`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.dest=$row.dest$ | `drop_dm_object_name(Filesystem)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by file_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.file_name=$row.file_name$ | `drop_dm_object_name(Filesystem)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon



[Ransomware - Scheduled tasks used in BadRabbit ransomware]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 6,16,26,36,46,56 * * * *
description = This alert identifies BadRabbit ransomware based on processed data. It examines data from the schtasks.exe process.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (uses data-model query)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process= "*create*"  OR Processes.process= "*delete*") by Processes.dest Processes.parent_process Processes.process_name Processes.user \
| `drop_dm_object_name("Processes")` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| search (process=*rhaegal* OR process=*drogon* OR *viserion_*) \
| eval cyences_severity = "critical" \
| `cs_scheduled_tasks_used_in_badrabbit_ransomware_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_scheduled_tasks_used_in_badrabbit_ransomware_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=schtasks.exe (Processes.process="*create*" OR Processes.process="*delete*") (Processes.process=*rhaegal* OR Processes.process=*drogon* OR Processes.process=*viserion_*) | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest, user
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.dest=$row.dest$ | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(process) as process by process_name, parent_process_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=$row.process_name$ | `drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon


[Ransomware - Common Ransomware Notes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 8,18,28,38,48,58 * * * *
description = This alert is based on a lookup from the ES Content Update app. It will inspect for common ransomware notes. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name \
| `drop_dm_object_name(Filesystem)` | `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(firstTime)` \
| rex field=file_name "(?<file_extension>\.[^\.]+)$" | `ransomware_notes` \
| eval cyences_severity = "critical" \
| `cs_common_ransomware_notes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_common_ransomware_notes_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Filesystem search strict_fields=false | `drop_dm_object_name(Filesystem)` | rex field=file_name "(?<file_extension>\.[^\.]+)$" | `ransomware_notes`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.dest=$row.dest$ | `drop_dm_object_name(Filesystem)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by file_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Filesystem search strict_fields=false | search Filesystem.file_name=$row.file_name$ | `drop_dm_object_name(Filesystem)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon


[Ransomware - Endpoint Compromise - USN Journal Deletion on Windows]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 1,11,21,31,41,51 * * * *
description = The fsutil.exe application is a legitimate Windows utility used to perform tasks related to the file allocation table (FAT) and NTFS file systems. The update sequence number (USN) change journal provides a log of all changes made to the files on the disk. This search looks for fsutil.exe deleting the USN journal.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (uses data-model query)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fsutil.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest \
| `drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| search process="*deletejournal*" AND process="*usn*" \
| eval cyences_severity = "critical" \
| `cs_usn_journal_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_usn_journal_deletion_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=fsutil.exe Processes.process="*deletejournal*" Processes.process="*usn*" | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.dest=$row.dest$ | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(process) as process by process_name, parent_process_name
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=$row.process_name$ | `drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon


[Ransomware - Windows - Windows Event Log Cleared]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 3,13,23,33,43,53 * * * *
description = This alert monitors for when WinEventLog events are cleared. \
\
Data Collection - Splunk_TA_Windows - WinEventLog://Security stanza and WinEventLog://System stanza\
\
A false positive may appear when an administrator might have intentionally cleared the events.
dispatch.earliest_time = 0
dispatch.latest_time = 
# timerange is provided within the query to reduce the false positive, see notes below
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (`cs_wineventlog_security` EventCode=1100) OR (`cs_wineventlog_system` EventCode IN (6005, 1074)) earliest=-14m@m latest=now \
| sort 0 - _time \
| stats list(EventCode) as EventCode, list(_time) as all_timestamp values(eval(if(EventCode==1100, LogName, NULL()))) as LogName, values(eval(if(EventCode==1100, user, NULL()))) as user, latest(eval(if(EventCode==1100, _time, NULL()))) as event_time by dest \
| search EventCode=1100 \
| eval index_of_1100=mvfind(EventCode, "^1100$") | eval prev_eventcode=mvindex(EventCode,index_of_1100-1) | eval next_eventcode=mvindex(EventCode,index_of_1100+1) \
| eval timestamp_1100=mvindex(all_timestamp, index_of_1100) | eval prev_timestamp=mvindex(all_timestamp,index_of_1100-1) | eval next_timestamp=mvindex(all_timestamp,index_of_1100+1) \
| eval prev_timediff=prev_timestamp-timestamp_1100, next_timediff=timestamp_1100-next_timestamp \
| search NOT (next_eventcode=1074 prev_eventcode=6005 next_timediff<800 prev_timediff<500) | where timestamp_1100<=relative_time(now(),"-2m@m") AND timestamp_1100>=relative_time(now(),"-12m@m") \
| eval Message="The event logging service has shut down.", EventCode=1100 \
| append [| search (`cs_wineventlog_security` EventCode=1102) OR (`cs_wineventlog_system` EventCode=104) earliest=-12m@m latest=-2m@m \
| stats values(name) as Message, latest(_time) as event_time, values(EventCode) as EventCode, values(LogName) as LogName, values(user) as user by dest \
| eval Message=if(isnull(Message), "The event log file was cleared", Message)] \
| `cs_human_readable_time_format(event_time)` \
| eval cyences_severity = "low" \
| table cyences_severity, dest, Message, event_time, EventCode, LogName, user \
| `cs_windows_event_log_cleared_filter`
# Excluding EventCode sequence 1074 (Windows Shutdown) → 1100 (Event logging shutdown) → 6005 (Event logging start)
# with time-gap 500 seconds for pre_timediff, 800 seconds for next_timediff
# Search query is is lagging behind by 2 minutes to avoid false positives where EventCode 6005 (logging started) comes after the alert has been triggred.
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_event_log_cleared_filter
action.cyences_notable_event_action.contributing_events = ((`cs_wineventlog_security` (EventCode=1102 OR EventCode=1100)) OR (`cs_wineventlog_system` EventCode=104))
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest, LogName
action.cyences_notable_event_action.system_compromised_drilldown = ((`cs_wineventlog_security` (EventCode=1102 OR EventCode=1100)) OR (`cs_wineventlog_system` EventCode=104)) dest=$row.dest$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by user
action.cyences_notable_event_action.attacker_drilldown = ((`cs_wineventlog_security`) OR (`cs_wineventlog_system`)) user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows


[Ransomware - Endpoint Compromise - Windows - WMI Lateral Movement]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4,14,24,34,44,54 * * * *
description = This alert recognizes WMI lateral movement on Windows machines. These alerts may be due to ransomware activity on the host. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process create information)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=1 Image=*wmic* CommandLine="*/node*" CommandLine="*process call create*" \
| eval cyences_severity = "high" \
| table _time, cyences_severity, TimeCreated, Computer, User, signature, direction, Image, CommandLine \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_wmi_lateral_movement_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_wmi_lateral_movement_filter
action.cyences_notable_event_action.contributing_events = `cs_sysmon` EventCode=1 Image=*wmic* CommandLine="*/node*" CommandLine="*process call create*"
action.cyences_notable_event_action.system_compromised_search = | stats count by Computer
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sysmon` EventCode=1 Image=*wmic* CommandLine="*/node*" CommandLine="*process call create*" Computer=$row.Computer$
action.cyences_notable_event_action.attacker_search = | stats count by CommandLine, Image, User
action.cyences_notable_event_action.attacker_drilldown = `cs_sysmon` EventCode=1 CommandLine=$row.CommandLine$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon



# ================
# Windows / AD
# ================
# Reports
[Windows - Hosts Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 2 * * 0
description = Supporting Report for Windows update check alert (Runs every Sunday at 3 AM) - Generates the host list in the lookup
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats count where `cs_wineventlog_system` by host | append [| inputlookup all_windows_hosts.csv] \
| append [| inputlookup cs_windows_decommissioned_hosts.csv | eval status="decommissioned"] \
| stats values(status) as status by host \
| search NOT status="decommissioned" \
| table host \
| outputlookup all_windows_hosts.csv
action.cyences_notable_event_action.products = Windows

[AD - cs_ad_obj_domain - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every day @1AM)\
\
Data collection - Splunk_TA_windows - MSAD Health Logs (sourcetype=*Health)
dispatch.earliest_time = -24h@h
dispatch.latest_time = @h
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_health_logs` \
| fields host, DomainNetBIOSName,DomainDNSName,ForestName,Site \
| stats count by host, DomainNetBIOSName,DomainDNSName,ForestName,Site \
| eval DomainDNSName=lower(DomainDNSName),ForestName=lower(ForestName),Site=lower(Site),host=lower(host),DomainNetBIOSName=lower(DomainNetBIOSName) \
| eval domain=DomainNetBIOSName \
| table host,domain,DomainNetBIOSName,DomainDNSName,ForestName,Site \
| sort ForestName,Site,DomainDNSName,host \
| eval _key = host \
| outputlookup cs_ad_obj_domain append=true
action.cyences_notable_event_action.products = Windows


[AD - cs_ad_obj_group - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour) \
\
Data collection - Splunk_TA_windows - admon stanza (sourcetype=ActiveDirectory)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|group" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields DomainDNSName, OU, admonEventType, adminCount, c, cn, orig_cn, dSCorePropagationData, dcName, deletedDate, description, displayName, distinguishedName, dn, dn_hist, dn_path, domain, groupType, groupType_Name, guid_lookup, instanceType, isCriticalSystemObject, isDeleted, isRecycled, l, lastKnownParent, managedBy, member, name, objectCategory, objectClass, objectGUID, objectSid, primaryGroupToken, sAMAccountName, sAMAccountType, showInAdvancedViewOnly, sid_lookup, st, systemFlags, uSNChanged, uSNCreated, whenChanged, whenCreated \
| rex field=distinguishedName max_match=0 "\\,DC\\=(?<DomainDNSName>[^(\\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\\-\\s,\\$(.+\\x5C{1}.+)[^\\sDEL:]+)\\sDEL:" \
| rex field=objectSid "\\d+\\-(?<primaryGroupToken>\\d+)$" \
| eval distinguishedName=lower(distinguishedName), displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName), dn=lower(distinguishedName), last_evt_flg=admonEventType, cn=lower(cn), lastKnownParent=lower(lastKnownParent), objectGUID=lower(objectGUID), DomainDNSName=lower(DomainDNSName), OU=lower(OU), sAMAccountName=lower(sAMAccountName), dNSHostName=if(isnull(dNSHostName),if(isnull(orig_cn),((displayName . ".") . DomainDNSName),((orig_cn . ".") . DomainDNSName)),dNSHostName), orig_evt_dn=lower(orig_evt_dn), member=lower(member), adminCount=if(isnull(adminCount),0,adminCount) \
| rex field=distinguishedName "(?i)(?:\\,(?<!\\x5C{1}))(?<dn_path>(cn|ou|dc)\\=[^$]+)" \
| rex field=distinguishedName "(?i)(?:\\,(?<!\\x5C{1}))(cn|ou|dc)\\=(?<orig_ou>[^\\,]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if((match(lower(last_evt_flg),"deleted") OR match(lower(isDeleted),"true")),strptime(whenChanged,"%I:%M.%S %p, %a %m/%d/%Y"),0), OU=if(isnull(OU),orig_ou,OU) \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName, domain] \
| lookup cs_ad_audit_group_details groupType,sAMAccountType OUTPUT groupType_Name,MSADGroupType,MSADGroupClass \
| eval isDistributionList=if((sAMAccountType == "268435457"),"TRUE","FALSE") \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if((dn_hist_cnt > 1),lower(dn_hist_hold),""), src_nt_domain=domain \
| fillnull value=0 uSNChanged,uSNCreated,whenChanged,whenCreated \
| fillnull value="" OU,c,orig_cn,dSCorePropagationData,dcName,description,displayName,distinguishedName,dn,dn_path,groupType,groupType_Name,MSADGroupType,MSADGroupClass,guid_lookup,instanceType,l,lastKnownParent,last_evt_flg,managedBy,member,name,objectCategory,objectSid,primaryGroupToken,sAMAccountName,sAMAccountType,sid_lookup,st,systemFlags,uSNChanged,uSNCreated \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName==cn,"",sAMAccountName) \
| eval lookup_grp=lower(d_cn)."|".lower(d_dn)."|".lower(d_sam) \
| makemv delim="|" lookup_grp \
| makemv delim="|" member \
| eval membercount=if((member == ""),0,mvcount(member)) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| table key_val, DomainDNSName, OU, adminCount, c, cn, orig_cn, dSCorePropagationData, dcName, deletedDate, description, displayName, distinguishedName, dn, dn_hist, dn_path, domain, groupType, groupType_Name, guid_lookup, instanceType, isCriticalSystemObject, isDeleted, isDistributionList, isRecycled, l, lastKnownParent, last_evt_flg, lookup_grp, managedBy, member, membercount, MSADGroupType, MSADGroupClass, name, objectCategory, objectClass, objectGUID, objectSid, orig_evt_dn, primaryGroupToken, sAMAccountName, sAMAccountType, showInAdvancedViewOnly, sid_lookup, src_nt_domain, st, systemFlags, uSNChanged, uSNCreated, whenChanged, whenCreated, time \
| lookup cs_ad_obj_group domain,objectGUID OUTPUT lookup_grp AS p_lookup_grp \
| eval lookup_grp=if(isnull(p_lookup_grp),mvjoin(lookup_grp,"|"),mvjoin(lookup_grp,"|")."|".mvjoin(p_lookup_grp,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_grp \
| fields - p_lookup_grp \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_group append=true
action.cyences_notable_event_action.products = Windows


[AD - cs_ad_obj_computer - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour) \
\
Data collection - Splunk_TA_windows - admon stanza (sourcetype=ActiveDirectory)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|person|organizationalPerson|user|computer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields DomainDNSName,OU,admonEventType,accountExpires,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,deletedDate,description,displayName,distinguishedName,dn,dn_path,domain,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,localPolicyFlags,logonCount,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,primaryGroupID,pwdLastSet,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,st,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),lastKnownParent=lower(lastKnownParent),objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),OU=lower(OU),sAMAccountName=lower(sAMAccountName),dNSHostName=if(isnull(dNSHostName),if(isnull(orig_cn),displayName.".".DomainDNSName,orig_cn.".".DomainDNSName),dNSHostName),orig_evt_dn=lower(orig_evt_dn) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(?<dn_path>(cn|ou|dc)\=[^$]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0) \
| lookup cs_ad_obj_uac userAccountControl OUTPUT uac_bin_map, uac_details \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),""),src_nt_domain=domain \
| fillnull value=0 badPwdCount,lastLogonTimestamp,logonCount,primaryGroupID,pwdLastSet,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| fillnull value="" OU,accountExpires,badPasswordTime,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,instanceType,isCriticalSystemObject,l,lastKnownParent,lastLogon,last_evt_flg,localPolicyFlags,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,orig_evt_dn,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,src_nt_domain,st \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName=cn,"",lower(sAMAccountName)) \
| eval key_val=objectGUID."#".DomainDNSName,lookup_cmp=lower(d_cn)."|".lower(d_dn)."|".d_sam \
| makemv delim="|" lookup_cmp \
| eventstats values(lookup_cmp) AS lookup_cmp by key_val \
| table key_val,DomainDNSName,OU,accountExpires,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,deletedDate,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,last_evt_flg,localPolicyFlags,logonCount,lookup_cmp,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,orig_evt_dn,primaryGroupID,pwdLastSet,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,src_nt_domain,st,uac_details,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated,time \
| lookup cs_ad_obj_computer domain objectGUID OUTPUT lookup_cmp AS p_lookup_cmp \
| eval lookup_cmp=if(isnull(p_lookup_cmp),mvjoin(lookup_cmp,"|"),mvjoin(lookup_cmp,"|")."|".mvjoin(p_lookup_cmp,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_cmp \
| fields - p_lookup_cmp \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_computer append=true
action.cyences_notable_event_action.products = Windows


[AD - cs_ad_obj_gpo - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour) \
\
Data collection - Splunk_TA_windows - admon stanza (sourcetype=ActiveDirectory)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|container|groupPolicyContainer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields admonEventType,cn,deletedDate,displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,isCriticalSystemObject,isRecycled,isDeleted,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,showInAdvancedViewOnly,systemFlags,uSNChanged,uSNCreated,versionNumber,whenChanged,whenCreated,_time \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(DomainDNSName,".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| rex field=distinguishedName "(?msi)(?:CN\=\{)(?<gpo_link>[^\}]+)\}\,CN\=Policies" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),orig_cn=lower(orig_cn),lastKnownParent=lower(lastKnownParent),objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),orig_evt_dn=lower(orig_evt_dn),gpo_link=lower(gpo_link) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(cn|ou|dc)\=(?<orig_ou>[^\,]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0),OU=if(isnull(OU),orig_ou,OU) \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),"") \
| fillnull value=0 uSNChanged,uSNCreated,whenChanged,whenCreated \
| fillnull value="" displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,systemFlags,uSNChanged,uSNCreated,versionNumber \
| eval key_val=objectGUID."#".DomainDNSName \
| table key_val,cn,deletedDate,displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,isCriticalSystemObject,isRecycled,isDeleted,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,showInAdvancedViewOnly,systemFlags,uSNChanged,uSNCreated,versionNumber,whenChanged,whenCreated,time \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_gpo append=true
action.cyences_notable_event_action.products = Windows


[AD - cs_ad_obj_user - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour) \
\
Data collection - Splunk_TA_windows - admon stanza (sourcetype=ActiveDirectory)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=*|person|organizationalPerson|user" NOT "objectClass=top|person|organizationalPerson|user|computer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields _time,DomainDNSName,OU,accountExpires,adminCount,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,deletedDate,department,description,displayName,distinguishedName,dn,dn_path,domain,givenName,guid_lookup,initials,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,admonEventType,lockoutTime,logonCount,logonHours,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,physicalDeliveryOfficeName,postalCode,primaryGroupID,pwdLastSet,sAMAccountName,sAMAccountType,servicePrincipalName,showInAdvancedViewOnly,sid_lookup,sn,st,streetAddress,title,uSNChanged,uSNCreated,userAccountControl,userPrincipalName,userWorkstations,whenChanged,whenCreated \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),lastKnownParent=lower(lastKnownParent),user_type="user",objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),OU=lower(OU),sAMAccountName=lower(sAMAccountName),userPrincipalName=lower(userPrincipalName),orig_evt_dn=lower(orig_evt_dn) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(?<dn_path>(cn|ou|dc)\=[^$]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0) \
| lookup cs_ad_obj_uac userAccountControl OUTPUT uac_bin_map, uac_details \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),"") \
| fillnull value=0 adminCount,badPwdCount,lastLogonTimestamp,logonCount,primaryGroupID,pwdLastSet,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| fillnull value="" OU,accountExpires,badPasswordTime,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,department,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,givenName,guid_lookup,initials,instanceType,l,lastKnownParent,last_evt_flg,lockoutTime,logonHours,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,orig_evt_dn,physicalDeliveryOfficeName,postalCode,primaryGroupID,sAMAccountName,sAMAccountType,servicePrincipalName,sid_lookup,sn,st,streetAddress,title,uSNChanged,uSNCreated,uac_details,userPrincipalName,userWorkstations,uac_bin_map \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName=cn,"",lower(sAMAccountName)),d_princ=if(userPrincipalName=="","",userPrincipalName) \
| eval key_val=objectGUID."#".DomainDNSName,lookup_usr=lower(d_cn)."|".lower(d_dn)."|".d_sam."|".d_princ \
| makemv delim="|" lookup_usr \
| eventstats values(lookup_usr) AS lookup_usr by key_val \
| table key_val,DomainDNSName,OU,accountExpires,adminCount,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,deletedDate,department,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,givenName,guid_lookup,initials,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,last_evt_flg,lockoutTime,logonCount,logonHours,lookup_usr,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,orig_evt_dn,physicalDeliveryOfficeName,postalCode,primaryGroupID,pwdLastSet,sAMAccountName,sAMAccountType,servicePrincipalName,showInAdvancedViewOnly,sid_lookup,sn,st,streetAddress,title,uac_details,uSNChanged,uSNCreated,userAccountControl,userPrincipalName,userWorkstations,whenChanged,whenCreated,user_type,time \
| lookup cs_ad_obj_user domain,objectGUID OUTPUT lookup_usr AS p_lookup_usr \
| eval lookup_usr=if(isnull(p_lookup_usr),mvjoin(lookup_usr,"|"),mvjoin(lookup_usr,"|")."|".mvjoin(p_lookup_usr,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_usr \
| fields - p_lookup_usr \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_user append=true
action.cyences_notable_event_action.products = Windows


# Alerts
[Windows - Hosts Missing Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 3 1 * *
description = This alert is for Windows hosts that haven't received the latest update. It automatically runs on the first of every month and checks for any updates that might have been released in the previous month. \
\
Data collection - WinEventLog System events (EventCode=19) SourceName=Microsoft-Windows-WindowsUpdateClient
dispatch.earliest_time = -31d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_system` EventCode=19 SourceName="Microsoft-Windows-WindowsUpdateClient" | stats count by host | eval updated="true" | append [| inputlookup all_windows_hosts.csv] | eval host=upper(host) \
| stats values(updated) as updated by host | search NOT updated="true" \
| append [| inputlookup cs_windows_decommissioned_hosts.csv | eval status="decommissioned" | eval host=upper(host)] \
| stats values(status) as status by host | search NOT status="decommissioned" \
| eval cyences_severity = "high" \
| table host cyences_severity \
| `cs_windows_host_missing_update_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_host_missing_update_filter
action.cyences_notable_event_action.system_compromised_search = | dedup host | table host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_wineventlog_system` EventCode=19 SourceName="Microsoft-Windows-WindowsUpdateClient" host=$row.host$
action.cyences_send_email_action = 1
action.cyences_send_email_action.param.cyences_severities = critical, high
action.cyences_notable_event_action.products = Windows

[Windows - Endpoint Compromise - Windows Firewall Disabled Event]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 6,16,26,36,46,56 * * * *
description = Windows Firewall Disabled Event from WinEventLog\
\
Data Collection - WinEventLog Security Events (EventCode=4950)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode=4950 SettingType="Enable Windows Defender Firewall" SettingValue=No \
| eval cyences_severity = "high" \
| table _time, cyences_severity, host, EventCode, ProfileChanged, SettingType, SettingValue \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_firewall_disabled_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_firewall_disabled_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode=4950 SettingType="Enable Windows Defender Firewall" SettingValue=No
action.cyences_notable_event_action.system_compromised_search = | stats count, values(ProfileChanged) as ProfileChanged by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_wineventlog_security` EventCode=4950 host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows


[Windows - Windows Process Tampering Detected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 5,15,25,35,45,55 * * * *
description = Windows process tampering detected by sysmon.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=25
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=1 [| search `cs_sysmon` EventCode=11 [| search `cs_sysmon` EventCode=25 | `cs_windows_process_tampering_filter_internal` | dedup Image, Computer | rename Image as TargetFilename | table TargetFilename, Computer] | table Image Computer] \
| fields Computer TargetFilename EventCode Image CommandLine ParentImage ParentCommandLine ParentUser User \
| append [| search `cs_sysmon` EventCode=11 [| search `cs_sysmon` EventCode=25 | `cs_windows_process_tampering_filter_internal` | dedup Image, Computer | rename Image as TargetFilename | table TargetFilename, Computer] | table EventCode TargetFilename Image Computer] \
| stats count, values(*) as * by Image, Computer \
| append [| search `cs_sysmon` EventCode=25 | `cs_windows_process_tampering_filter_internal` | rename Image as TargetFilename | table _time EventCode TargetFilename Computer User Type] \
| stats count, latest(_time) as _time, values(*) as * by TargetFilename, Computer \
| search EventCode=25 \
| `cs_human_readable_time_format(_time, event_time)` \
| eval cyences_severity = case(Type=="Image is replaced", "low", true(), "high") \
| table event_time count Computer TargetFilename Type cyences_severity EventCode Image CommandLine ParentImage ParentCommandLine ParentUser User \
| `cs_windows_process_tampering_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_process_tampering_filter
action.cyences_notable_event_action.contributing_events = `cs_sysmon` EventCode=25
action.cyences_notable_event_action.system_compromised_search = | stats count by Computer
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sysmon` EventCode=25 Computer=$row.Computer$
action.cyences_notable_event_action.attacker_search = | stats count, values(ProcessId) as Processes by Image
action.cyences_notable_event_action.attacker_drilldown = `cs_sysmon` EventCode=25 ProcessId=$row.ProcessId$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon


[AD - Group Changed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = Change in Active Directory Group.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("groupchanged")` \
| `ms_obj_group_change_out`\
| fields - member_obj_lkp\
| eval cyences_severity = case( in(group_obj_nm, `cs_ad_important_group`) or in(group_obj_nm, `cs_ad_important_group_internal`), "medium", true(), "low")  \
| rename adminuser as "Administrator",msad_action as "Action",group_obj_nm as "Group_Name",MSADGroupType as "Group_Type",MSADGroupClass AS "Group_Class",signature as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_group_changed_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_group_changed_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` [| inputlookup cs_ad_audit_change_event_codes WHERE change_category="Group" | stats values(EventCode) AS EventCode,values(obj_type) AS obj_type | format] src_user_type="user" NOT((EventCode=4723 OR EventCode=4738) AND src_user!=user)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows


[AD - Group Membership Changed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = Change in Active Directory Group Membership.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("groupmembershipchanged")`\
| `ms_obj_groupmembership_change_out`\
| eval cyences_severity = case( in(group_obj_nm, `cs_ad_important_group`) or in(group_obj_nm, `cs_ad_important_group_internal`), "medium", true(), "low")  \
| rename  group_obj_nm as "Target_Group",MSADGroupClass as "Class",msad_action AS "Action",member AS "Target Member",member_obj_lkp AS "Target Member Lookup",MSADGroupType as "Type",adminuser as "Admin User",MSADChanges as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_group_membership_changed_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_group_membership_changed_filter
action.cyences_notable_event_action.contributing_events = `ms_obj_changes_base_cat_customised("groupmembershipchanged")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows

[AD - Group Policy Changed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = Change in Active Directory Group Policy.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("grouppolicychanged")`\
| fields _time, session_id, src_nt_domain, src_user,Object_Name_Guid,displayName,dir_svcs_action,AttributeLDAPDisplayName,AttributeValue,MSADChangedAttributes,Correlation_ID,signature,msad_action,Old_DN,New_DN\
| fillnull value="" Correlation_ID,msad_action\
| eval adminuser=if(isnull(src_nt_domain),src_user,src_nt_domain."\\".src_user) \
| eval Object_Lookup_Name="{".lower(Object_Name_Guid)."}" \
| join type=left Object_Lookup_Name [| inputlookup cs_ad_obj_gpo | fields cn, displayName | rename cn AS Object_Lookup_Name | table Object_Lookup_Name, displayName]\
| eval displayName=if(isnull(displayName),"Warning: ".Object_Lookup_Name." GPO CN not found in the AD_Obj_GPO Lookup. If GPO is new wait 15 minutes and run report again, or check that ms_ad_obj_sched_sync_gpo scheduled search is running as scheduled.",displayName) \
| `ms_obj_msad-changed-attributes`\
| stats max(_time) AS last_time, min(_time) AS start_time,list(MSADChanges) AS MSADChanges,values(Correlation_ID) AS Correlation_IDs by session_id,Object_Lookup_Name,displayName,adminuser,signature,msad_action\
| eval MSADChanges=mvjoin(MSADChanges, "########")\
| eval MSADChanges=case(isnull(signature) AND isnull(MSADChanges),"Unknown Changes",isnull(signature),MSADChanges,isnotnull(MSADChanges),"Signature: ".signature."########".MSADChanges)\
| `cs_human_readable_time_format(start_time)` | `cs_human_readable_time_format(last_time)` \
| eval Session_Time="Session ID (".session_id.")|Start: ".start_time."|End: ".last_time \
| eval cyences_severity = case( in(displayName, `cs_ad_important_policy`) or in(displayName, `cs_ad_important_policy_internal`), "medium", true(), "low")  \
| table displayName,cyences_severity,adminuser,Session_Time,msad_action,Correlation_IDs,MSADChanges\
| makemv delim="########" MSADChanges\
| makemv delim="|" Session_Time\
| rename adminuser as "Administrator",msad_action as "Action",displayName as "GPO_Name",MSADChanges as "Changes" \
| `cs_ad_group_policy_changed_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_group_policy_changed_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` [| inputlookup cs_ad_audit_change_event_codes WHERE change_category="Group Policy" | stats values(EventCode) AS EventCode,values(obj_type) AS obj_type | format] src_user_type="user" NOT((EventCode=4723 OR EventCode=4738) AND src_user!=user)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows


[AD - User Changed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = User Changed on Active Directory.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("userchanged")`\
| `ms_obj_user_change_out`\
| eval cyences_severity = case( in(dest_user_subject, `cs_ad_important_user`) or in(dest_user_subject, `cs_ad_important_user_internal`), "medium", true(), "low")  \
| rename adminuser as "Administrator",msad_action as "Action",dest_user_subject as "Target_User_ID",MSADChanges as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_user_changed_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_user_changed_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` [| inputlookup cs_ad_audit_change_event_codes WHERE change_category="User" | stats values(EventCode) AS EventCode,values(obj_type) AS obj_type | format] src_user_type="user" NOT((EventCode=4723 OR EventCode=4738) AND src_user!=user)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows


[AD - User Locked Out]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = A user account was locked out on Active Directory.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` (EventCode=4740) \
| eval Account_Name=mvfilter(NOT match(Account_Name, "\$")) \
| fields ComputerName Account_Domain Account_Name Caller_Computer_Name \
| rename ComputerName as "Domain_Controller", Account_Domain as User_Domain ,Account_Name as "User_Name", Caller_Computer_Name as "Source_Computer_Name" \
| fillnull value="-" Source_Computer_Name \
| eval cyences_severity = "medium" \
| table _time,cyences_severity,User_Name,User_Domain,Source_Computer_Name,Domain_Controller \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_user_locked_out_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_user_locked_out_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` (EventCode=4740)
action.cyences_notable_event_action.system_compromised_search = | stats count by Source_Computer_Name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_wineventlog_security` (EventCode=4740) Caller_Computer_Name=$row.Source_Computer_Name$
action.cyences_notable_event_action.attacker_search = | stats count by User_Name
action.cyences_notable_event_action.attacker_drilldown = `cs_wineventlog_security` (EventCode=4740) Account_Name=$row.User_Name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows

[AD - Password Change Outside Working Hour]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 10 * * *
description = Password changed outside working hour.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -1d@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (4624, 4768, 4769) src=* [| search `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) | dedup ComputerName Subject_Account_Name | table ComputerName Subject_Account_Name |  rename Subject_Account_Name as user] \
| bin span=1m _time \
| eval time = _time \
| `cs_generate_time_fields_for_filter(time)` \
| where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 \
| `cs_remove_time_fields_for_filter(time)` \
| table _time ComputerName user src EventCode \
| rename user as Subject_Account_Name \
| append \
    [| search `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) \
    | eval time = _time \
    | `cs_generate_time_fields_for_filter(time)` \
    | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 \
    | `cs_remove_time_fields_for_filter(time)` \
    | fillnull value="unknown" src ] \
| eventstats values(eval(if(in(EventCode, 4768, 4769), _time."###".src, null()))) as input by ComputerName, Subject_Account_Name \
| table input, _time, Target_Account_Name, Subject_Account_Name, cyences_severity, EventCode, msad_action, status, action, ComputerName, Target_Account_Domain, Subject_Account_Domain Caller_Workstation \
| search EventCode IN (627, 628, 4723, 4724, 4794) \
| timestampbasedcorrelation lookback=300 lookahead=300 \
| eval cyences_severity = "medium" \
| table _time, Target_Account_Name, Subject_Account_Name, output, cyences_severity, EventCode, msad_action, status, action, ComputerName, Target_Account_Domain, Subject_Account_Domain Caller_Workstation \
| rename Target_Account_Name as Target_User, Target_Account_Domain as Target_User_Domain, Subject_Account_Name as Actor, Subject_Account_Domain as Actor_User_Domain, output as "Probable Sources" \
| sort - _time \
| `cs_ad_password_change_outside_working_hour_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_password_change_outside_working_hour_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) | eval time = _time | `cs_generate_time_fields_for_filter(time)` | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 | `cs_remove_time_fields_for_filter(time)` 
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows


[AD - Multiple Password Changes in Short Time Period]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show if user made multiple password changes in the last hours. \
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (4624, 4768, 4769) src=* [| search `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) | dedup ComputerName Subject_Account_Name | table ComputerName Subject_Account_Name |  rename Subject_Account_Name as user] \
| bin span=1m _time \
| table _time ComputerName user src EventCode \
| rename user as Subject_Account_Name \
| append \
    [| search `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) \
    | fields _time, ComputerName, Target_Account_Name, Target_Account_Domain, Subject_Account_Name, Subject_Account_Domain, Caller_Workstation, msad_action, action, status, EventCode \
    | fillnull status, src, msad_action value="-" \
    | eval msad_action="EventCode=".EventCode." -> ".msad_action] \
| eventstats values(eval(if(in(EventCode, 4768, 4769), _time."###".src, null()))) as input by ComputerName, Subject_Account_Name \
| search EventCode IN (627, 628, 4723, 4724, 4794) \
| timestampbasedcorrelation lookback=300 lookahead=300 \
| stats count, min(_time) as firstTime, max(_time) as lastTime, values(*) as * by Target_Account_Name, ComputerName, Subject_Account_Name, status, msad_action \
| appendpipe \
    [| stats sum(count) as count by Target_Account_Name, ComputerName \
    | eval new_ComputerName = ComputerName." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by Target_Account_Name, status \
    | eval new_status = status." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by Target_Account_Name, msad_action \
    | eval new_msad_action = msad_action." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by Target_Account_Name, Subject_Account_Name \
    | eval new_Subject_Account_Name = Subject_Account_Name." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(action) as action, values(Target_Account_Domain) as Target_Account_Domain, values(Subject_Account_Name) as Subject_Account_Name, values(Subject_Account_Domain) as Subject_Account_Domain, values(Caller_Workstation) as Caller_Workstation, values(output) as output, values(new_*) as * by Target_Account_Name \
| where count>=`cs_ad_multiple_password_changes_count_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = case(count>5*`cs_ad_multiple_password_changes_count_limit`, "critical", count>3*`cs_ad_multiple_password_changes_count_limit`, "high", true(), "medium") \
| table Target_Account_Name, output, count, firstTime, lastTime, cyences_severity, msad_action, Subject_Account_Name, action, status, ComputerName, Target_Account_Domain, Subject_Account_Domain, Caller_Workstation \
| rename output as "Probable Sources", Target_Account_Name as Target_User, Target_Account_Domain as Target_User_Domain, Subject_Account_Name as Actor, Subject_Account_Domain as Actor_User_Domain \
| `cs_ad_multiple_password_changes_filter` \
| sort - count
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_multiple_password_changes_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows


[AD - Bulk User Creation or Deletion]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show if users being created or deleted in bulk. \
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (4720, 4726) \
| rename Subject_Account_Domain as Admin_Domain, Subject_Account_Name as Admin_Account_Name \
| eval User_Domain = coalesce(New_Account_Domain, Target_Account_Domain), User_Account_Name = coalesce(New_Account_Account_Name, Target_Account_Name) \
| fields _time ComputerName User_Account_Name User_Domain action Admin_Account_Name Admin_Domain \
| stats count as total_actions list(eval(if(action=="created", User_Account_Name, null()))) as users_created, count(eval(action=="created")) as no_users_created, list(eval(if(action=="deleted", User_Account_Name, null()))) as users_deleted, count(eval(action=="deleted")) as no_users_deleted by Admin_Account_Name \
| where total_actions>=`cs_ad_bulk_user_creation_deletion_count_limit` \
| eval cyences_severity = case(count>5*`cs_ad_bulk_user_creation_deletion_count_limit`, "critical", count>3*`cs_ad_bulk_user_creation_deletion_count_limit`, "high", true(), "medium") \
| `cs_ad_bulk_user_creation_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_ad_bulk_user_creation_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_wineventlog_security` EventCode IN (4720, 4726)
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows


# ==============
# Network Compromise
# ==============
[Network Compromise - Basic Scanning]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert scans for hosts that either reach out to 500 or more hosts or 100 ports in a short period of time.\
\
Data Collection - Palo Alto Networks firewalls, and with any other device that uses the Splunk common information model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa) \
| stats dc(dest_port) as num_dest_port dc(dest_ip) as num_dest_ip by sourcetype, src_ip\
| where num_dest_port > 100 OR num_dest_ip > 500\
| eval cyences_severity = case(num_dest_ip>1000 and num_dest_port>1000, "critical", num_dest_ip>1000 or num_dest_port>1000, "high", true(), "medium") \
| `cs_scanning_basic_scanning_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_scanning_basic_scanning_filter
action.cyences_notable_event_action.contributing_events = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa)
action.cyences_notable_event_action.system_compromised_search = | stats count by sourcetype
action.cyences_notable_event_action.system_compromised_drilldown = index=* sourcetype=$row.sourcetype$
action.cyences_notable_event_action.attacker_search = | stats count by src_ip
action.cyences_notable_event_action.attacker_drilldown = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa) src_ip=$row.src_ip$
action.cyences_send_email_action = 1


[Network Compromise - Inbound Vulnerable Traffic]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert scans allowed inbound traffic on vulnerable ports.\
\
Data Collection - Palo Alto Networks firewalls, and with any other device that uses the Splunk common information model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` sum(All_Traffic.bytes) as total_bytes, sum(All_Traffic.packets) as total_packets from datamodel=Network_Traffic where `cs_private_ips(All_Traffic.dest_ip)` AND `cs_public_ips(All_Traffic.src_ip)` AND All_Traffic.action="allowed" by All_Traffic.src_ip, All_Traffic.dest_ip, All_Traffic.dest_port, All_Traffic.action \
| `drop_dm_object_name(All_Traffic)` \
| join dest_ip dest_port \
    [| inputlookup cs_all_vuln where (status="open" OR status="reopened") AND port!="0" AND (severity="critical" OR severity="high" OR severity="medium" OR severity="low") \
    | lookup cs_all_assets asset_id as dest_id output asset_ip as ip \
    | makemv ip delim="~~" \
    | stats values(severity) as severity by ip port \
    | rename ip as dest_ip, port as dest_port] \
| eval cyences_severity = case(match(severity,"critical"), "critical", match(severity,"high"), "high", match(severity,"medium"), "medium", match(severity,"low"), "low", match(severity,"info"), "info") \
| iplocation src_ip \
| fields - lat, lon, severity \
| rename Country as src_country, City as src_city, Region as src_region \
| `cs_inbound_vulnerable_traffic_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_inbound_vulnerable_traffic_filter
action.cyences_notable_event_action.contributing_events = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa)
action.cyences_notable_event_action.system_compromised_search = | stats count by sourcetype
action.cyences_notable_event_action.system_compromised_drilldown = index=* sourcetype=$row.sourcetype$
action.cyences_notable_event_action.attacker_search = | stats count by src_ip
action.cyences_notable_event_action.attacker_drilldown = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa) src_ip=$row.src_ip$
action.cyences_send_email_action = 1


# ==============
# Palo Alto Firewall
# ==============
[Palo Alto Firewall - Network Compromise - Palo Alto DNS Sinkhole]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Palo Alto Firewall DNS alert for when outbound traffic goes to 72.5.65.111. \
\
Data Collection - Palo Alto Networks firewalls traffic data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` (sourcetype="pan:traffic" OR sourcetype="pan:threat") dest_ip="72.5.65.111" \
| stats count, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(src_port) as dc_src_port, values(dest_port) as dest_port, values(url) as url, values(app) as app, values(rule) as rule, values(http_category) as http_category by src_ip \
| eval cyences_severity = "medium" \
| `cs_palo_dns_sinkhole_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_dns_sinkhole_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` (sourcetype="pan:traffic" OR sourcetype="pan:threat") dest_ip="72.5.65.111"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc_name, rule, app, http_category
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` (sourcetype="pan:traffic" OR sourcetype="pan:threat") dest_ip="72.5.65.111" dvc_name=$row.dvc_name$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src_ip
action.cyences_notable_event_action.attacker_drilldown = `cs_palo` (sourcetype="pan:traffic" OR sourcetype="pan:threat") dest_ip="72.5.65.111" src_ip=$row.src_ip$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto


[Palo Alto Firewall - Network Compromise - Palo Alto High Threats Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = A Palo Alto Firewall alerts for high or critical severity threats. \
\
Data Collection - Palo Alto Networks firewalls traffic data.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:threat" severity IN ("high" "critical") \
| eval cyences_severity = case( \
    (action=="blocked" or action=="dropped") and (severity=="critical" or severity=="high" or severity=="medium" or severity=="low"), "low", \
    (action=="blocked" or action=="dropped") and severity=="informational", "info", \
    action=="allowed" and severity=="informational", "info", \
    action=="allowed", severity) \
| table _time, log_subtype, threat_category, app, signature, severity, cyences_severity, action, threat, dvc, dvc_name, src, src_port, src_location, src_zone, dest, dest_port, dest_translated_ip, dest_translated_port, url \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_high_threats_alert_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_high_threats_alert_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` sourcetype="pan:threat" severity IN ("high" "critical")
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc, dvc_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` sourcetype="pan:threat" severity IN ("high" "critical") dvc=$row.dvc$ dvc_name=$row.dvc_name$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(src_location) as src_location by src
action.cyences_notable_event_action.attacker_drilldown = `cs_palo` sourcetype="pan:threat" src=$row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto


[Palo Alto Firewall - Network Compromise - Palo Alto High System Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = A Palo Alto Firewall alerts for high or critical severity system events. Anything license-related is excluded from this alert as generally it's not that high severity. You can view them on the Palo Alto dashboard.\
\
Data Collection - Palo Alto Networks firewalls system data.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:system" severity IN ("critical", "high") NOT "license for" \
| eval cyences_severity = case(severity=="informational", "info", true(), severity) \
| table _time, log_subtype, signature, cyences_severity, action, description, dvc, dvc_name \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_high_system_alerts_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_high_system_alerts_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` sourcetype="pan:system" severity IN ("high" "critical")
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc, dvc_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` sourcetype="pan:system" severity IN ("high" "critical") dvc=$row.dvc$ dvc_name=$row.dvc_name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto


[Palo Alto Firewall - Network Compromise - Palo Alto WildFire Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A Palo Alto Firewall WildFire events Alert \
\
Data Collection - Palo Alto Networks firewalls traffic data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:threat" log_subtype="wildfire" \
| eval cyences_severity = "high" \
| table _time, cyences_severity, app, signature, severity, action, threat, dvc, dvc_name, src, src_port, src_location, src_zone, dest, dest_port, dest_translated_ip, dest_translated_port, url \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_wildfire_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_wildfire_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` sourcetype="pan:threat"  log_subtype="wildfire"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dvc, dvc_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` sourcetype="pan:threat"  log_subtype="wildfire" dvc=$row.dvc$ dvc_name=$row.dvc_name$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count, values(src_location) as src_location by src
action.cyences_notable_event_action.attacker_drilldown = `cs_palo` sourcetype="pan:threat" log_subtype="wildfire" src=$row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto


# Reports
[Palo Alto Firewall - Network Compromise - DDoS Attack Prevented]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Palo Alto Firewall prevented DDoS attack events. It searches for log_subtype=packet.\
\
Data Collection - Palo Alto Networks firewalls threat data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:threat" log_subtype=packet \
| stats count, latest(_time) as last_seen, dc(src_port) as dc_src_port, dc(dest_ip) as dc_dest_ip, values(signature) as signature, values(dvc) as dvc, values(dvc_name) as dvc_name, values(src_location) as src_location, dc(dest) as dc_dest, values(action) as action by src | sort - count \
| `cs_palo_ddos_prevented_filter`
action.cyences_notable_event_action.products = Palo Alto


[Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Network traffic coming from blocked IPs. The ip_blocked_list lookup is being used to identify the blocked IPs.\
\
Data Collection: Palo Alto pan:traffic sourcetype data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:traffic" action="allowed" `cs_filter_private_ips` packets_in>0 \
| stats count, latest(_time) as last_seen, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(dvc_name) as dc_dvc_name, dc(src_port) as dc_src_port, values(src_location) as src_location, sum(packets_in) as packets_in, sum(packets_out) as packets_out, dc(dest_ip) as dc_dest_ip, values(dest_port) as dest_port, dc(dest_location) as dc_dest_location, values(app) as app, values(http_category) as http_category, values(rule) as firewall_rule by src_ip \
| `cs_palo_search_blocked_ip("src_ip")` | sort -count \
| `cs_palo_blocked_ip_inbound_filter`
action.cyences_notable_event_action.products = Palo Alto


[Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Network traffic going to blocked IPs. The ip_blocked_list lookup is being used to identify the blocked IPs.\
\
Data Collection: Palo Alto pan:traffic sourcetype data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:traffic" action="allowed" `cs_filter_private_ips` packets_out>0 \
| stats count, latest(_time) as last_seen, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(dvc_name) as dc_dvc_name, dc(dest_port) as dc_dest_port, values(dest_location) as dest_location, sum(packets_in) as packets_in, sum(packets_out) as packets_out, dc(src_ip) as dc_src_ip, dc(src_port) as dc_src_port, dc(src_location) as dc_src_location, values(app) as app, values(http_category) as http_category, values(rule) as firewall_rule by dest_ip \
| `cs_palo_search_blocked_ip("dest_ip")` | sort -count \
| `cs_palo_blocked_ip_outbound_filter`
action.cyences_notable_event_action.products = Palo Alto

[Palo Alto Firewall - Commits]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = A Palo Alto Firewall alerts for commit events. \
\
Data Collection - Palo Alto Networks firewalls system data.
dispatch.earliest_time = -20m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:system" "Commit job succeeded" \
| eval cyences_severity = "low" \
| table _time cyences_severity serial_number dvc dvc_name description \
| `cs_palo_commit_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_palo_commit_filter
action.cyences_notable_event_action.contributing_events = `cs_palo` sourcetype="pan:system" "Commit job succeeded"
action.cyences_notable_event_action.system_compromised_search = | stats count by dvc, dvc_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_palo` sourcetype="pan:system" "Commit job succeeded" dvc=$row.dvc$ dvc_name=$row.dvc_name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Palo Alto


[Dynamically Update Blocked IPs with HoneyDB]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 29 */8 * * *
description = Runs every 8 hours and update the blocked IP lookup (ip_blocked_list.csv) with HoneyDB.\
Enable this report to dynamically update the lookup.
dispatch.earliest_time = 0
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | honeydblookupgen update_lookup=true generate_events=false


[Palo Alto Firewall - Malicious IP List Gen]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 2,17,32,47 * * * *
description = Based on various firewall activities like DDoS attack or it is an already blocked IP address and connecting through multiple firewalls this report will create a list of bad IP addresses.\
The report runs every 15 minutes for last 4 hours. (To cover blocked IPs that is trying to connect to more than 2 firewall devices.) \
\
Note - Enable below three reports to make use of this report.\
1. Palo Alto Firewall - Network Compromise - DDoS Attack Prevented\
2. Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs\
3. Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs
dispatch.earliest_time = -4h@m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | savedsearch "Palo Alto Firewall - Network Compromise - DDoS Attack Prevented" | rename src as ip, src_location as ip_location, dc_src_port as no_of_ports_used, dc_dest_ip as no_of_victims | eval description="Involved in DDoS Attack" | eval ip_category="ddos" \
| append [| savedsearch "Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs" | rename src_ip as ip, dc_src_port as no_of_ports_used, src_location as ip_location, dc_dest_ip as no_of_victims  | eval description="Incoming traffic into multiple firewalls from this blocked IP" | eval ip_category="inbound"] \
| append [| savedsearch "Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs" | rename dest_ip as ip, dc_dest_port as no_of_ports_used, dest_location as ip_location, dc_src_ip as no_of_victims | eval description="Outgoing traffic through multiple firewalls to this blocked IP", last_seen=now() | eval ip_category="outbound"] \
| maliciousipupload \
| appendpipe [| maliciousiplookupgen ]
# TODO - malicioudiplookupgen command should be executed sequencially. Currently it is being executed before the maliciousipupload command.
action.cyences_notable_event_action.products = Palo Alto



# ==============
# Office 365 (O365)
# ==============
[O365 - DLP event in Exchange]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 0,6,12,18 * * *
description = This alert will pinpoint when there's an Office 365 data loss prevention event in Microsoft Exchange. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). The user has to enable the DLP rules on the Office 365 (https://docs.microsoft.com/en-us/microsoft-365/compliance/create-test-tune-dlp-policy?view=o365-worldwide).\
\
A false positive could be generated when the query itself lacks a false positive, but the DLP rules for Office 365 might contain some. 
dispatch.earliest_time = -1d@h
dispatch.latest_time = +1d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` _index_earliest=-361m@m _index_latest=-1m@m Workload=Exchange UserId=DlpAgent \
| rename "ExchangeMetaData.From" as From, "ExchangeMetaData.To{}" as To, "ExchangeMetaData.CC{}" as CC, "ExchangeMetaData.BCC{}" as BCC, "ExchangeMetaData.Subject" as Subject, "PolicyDetails{}.PolicyName" as PolicyName, "PolicyDetails{}.Rules{}.RuleName" as RuleName, "PolicyDetails{}.Rules{}.Actions{}" as RuleActions, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.Location" as SensitiveInformationLocation, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.SensitiveInformationTypeName" as SensitiveInformationType, "ExchangeMetaData.FileSize" as fs \
| convert auto(fs) | eval EmailSizeInKB=round(tonumber(fs)/1024, 2) \
| eval cyences_severity = "medium" \
| table _time, cyences_severity, host, Subject, From, To, CC, BCC, EmailSizeInKB, PolicyName, RuleName, RuleActions, SensitiveInformationType, SensitiveInformationLocation \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_dlp_exchange_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_dlp_exchange_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` Workload=Exchange UserId=DlpAgent
action.cyences_notable_event_action.system_compromised_search = | eval Email_To=mvappend(mvappend(To, CC), BCC) | mvexpand Email_To | stats count by Email_To
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` Workload=Exchange UserId=DlpAgent | rename "ExchangeMetaData.From" as From, "ExchangeMetaData.To{}" as To, "ExchangeMetaData.CC{}" as CC, "ExchangeMetaData.BCC{}" as BCC | search (To=$row.Email_To$ OR CC=$row.Email_To$ OR BCC=$row.Email_To$)
action.cyences_notable_event_action.attacker_search = | stats count by From
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` Workload=Exchange UserId=DlpAgent | rename "ExchangeMetaData.From" as From, "ExchangeMetaData.To{}" as To, "ExchangeMetaData.CC{}" as CC, "ExchangeMetaData.BCC{}" as BCC | search From=$row.From$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - DLP event in SharePoint]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 0,6,12,18 * * *
description = This alert will pinpoint when there's an Office 365 data loss prevention event in Microsoft SharePoint. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). The user has to enable the DLP rules on the Office 365 (https://docs.microsoft.com/en-us/microsoft-365/compliance/create-test-tune-dlp-policy?view=o365-worldwide).\
\
A false positive could be generated when the query itself lacks a false positive, but the DLP rules for SharePoint might contain some.
dispatch.earliest_time = -1d@h
dispatch.latest_time = +1d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` _index_earliest=-361m@m _index_latest=-1m@m Workload=SharePoint UserId=DlpAgent \
| rename "SharePointMetaData.From" as From, "SharePointMetaData.FileName" as FileName, "SharePointMetaData.FileOwner" as FileOwner, "SharePointMetaData.DocumentLastModifier" as User, "SharePointMetaData.FilePathUrl" as FilePathUrl, "PolicyDetails{}.PolicyName" as PolicyName, "PolicyDetails{}.Rules{}.RuleName" as RuleName, "PolicyDetails{}.Rules{}.Actions{}" as RuleActions, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.Location" as SensitiveInformationLocation, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.SensitiveInformationTypeName" as SensitiveInformationType \
| eval cyences_severity = "medium" \
| table _time, cyences_severity, host, FileName, From, User, FileOwner, FilePathUrl, PolicyName, RuleName, RuleActions, SensitiveInformationType, SensitiveInformationLocation \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_dlp_sharepoint_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_dlp_sharepoint_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` Workload=SharePoint UserId=DlpAgent
action.cyences_notable_event_action.system_compromised_search = | stats count by FileName, FilePathUrl
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` Workload=SharePoint UserId=DlpAgent | rename "SharePointMetaData.From" as From, "SharePointMetaData.FileName" as FileName, "SharePointMetaData.FilePathUrl" as FilePathUrl | search FileName=$row.FileName$
action.cyences_notable_event_action.attacker_search = | stats count by From
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` Workload=SharePoint UserId=DlpAgent | rename "SharePointMetaData.From" as From, "SharePointMetaData.FileName" as FileName, "SharePointMetaData.FilePathUrl" as FilePathUrl | search From=$row.From$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - O365 Service is not Operational]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will trigger when O365 service is not in operational state.\
\
Data Collection - Office 365 service status data (Splunk Add-on for Office 365).
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` _index_earliest=-61m@m _index_latest=-1m@m (sourcetype="o365:service:healthIssue" OR (sourcetype="o365:service:status" source="*CurrentStatus")) \
| eval Status = coalesce(status, Status), Service = coalesce(service, WorkloadDisplayName) \
| stats latest(Status) as Status latest(_time) as _time by Service host \
| search Status IN ("ExtendedRecovery","InformationUnavailable","Investigating*","RestoringService","ServiceDegradation","ServiceInterruption") \
| `cs_human_readable_time_format(_time, LastUpdatedTime)` \
| eval cyences_severity = "medium" \
| table LastUpdatedTime cyences_severity host Service Status \
| sort host Status | `cs_o365_service_not_operational_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_service_not_operational_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` (sourcetype="o365:service:healthIssue" OR (sourcetype="o365:service:status" source="*CurrentStatus")) | eval Status = coalesce(status, Status), Service = coalesce(service, WorkloadDisplayName)
action.cyences_notable_event_action.system_compromised_search = | stats count by Service
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` (sourcetype="o365:service:healthIssue" OR (sourcetype="o365:service:status" source="*CurrentStatus")) | eval Status = coalesce(status, Status), Service = coalesce(service, WorkloadDisplayName) | search Service=$row.Service$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365



[O365 - External User Added to Microsoft Teams]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will pinpoint when external user added to teams. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2d@h
dispatch.latest_time = +2d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-25h@m _index_latest=-1h@m Workload=MicrosoftTeams Operation=MemberAdded Members{}.UPN=*\#ext\#* \
| rename Members{}.UPN AS memberUpn \
| eval UserId =lower(UserId)  | rex field=UserId "@(?<src_domain>.*)" \
| eval memberUpn =lower(memberUpn)  | rex field=memberUpn "(?<email>.*)\#ext\#" | rex mode=sed field=email "s/_(?!.*_)/@/g" | rex field=email "@(?<target_domain>.*)" \
| where target_domain != src_domain \
| stats values(email) as email, values(target_domain) as target_domain, values(ClientIP) as ClientIP by CreationTime, CommunicationType, ItemName, UserId, src_domain \
| fields CreationTime, email, CommunicationType, ItemName, ClientIP, UserId, target_domain \
| rename CreationTime AS "Timestamp" ItemName AS "Item Name" UserId AS "Added By" email AS "External User" CommunicationType AS "Added To" target_domain AS "External Domain" \
| eval cyences_severity = "low" \
| `cs_o365_external_users_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_external_users_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=MicrosoftTeams Operation=MemberAdded Members{}.UPN=*\#ext\#*
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - Azure Active Directory - AuthorizationPolicy Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the change/update in AuthorizationPolicy. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("AuthorizationPolicy")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_authorizationpolicy_change_internal_filter` \
| `cs_o365_authorizationpolicy_change_filter`  \
| eval cyences_severity = "medium" \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_authorizationpolicy_change_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_managementactivity_change("AuthorizationPolicy")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - Azure Active Directory - Policy Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show the change/update in Policy. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("Policy")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_policy_change_internal_filter` \
| eval cyences_severity = case( in(Target_DisplayName, `cs_ad_important_policy`) or in(Target_DisplayName, `cs_ad_important_policy_internal`), "medium", true(), "low")  \
| `cs_o365_policy_change_filter`  \
| table event_time, cyences_severity, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_policy_change_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_managementactivity_change("Policy")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - Azure Active Directory - Role Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the change/update in Role. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("Role")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_role_change_internal_filter` \
| `cs_o365_role_change_filter`   \
| eval cyences_severity = case( in(Target_DisplayName, `cs_ad_important_role`) or in(Target_DisplayName, `cs_ad_important_role_internal`), "medium", true(), "low")  \
| table event_time, cyences_severity, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_role_change_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_managementactivity_change("Role")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - Azure Active Directory - Group Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show the change/update in Group. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("Group")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_group_change_internal_filter` \
| `cs_o365_group_change_filter`  \
| eval cyences_severity = case( in(Target_DisplayName, `cs_ad_important_group`) or in(Target_DisplayName, `cs_ad_important_group_internal`), "medium", true(), "low")  \
| table event_time, cyences_severity, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_group_change_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_managementactivity_change("Group")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - Azure Active Directory - GroupMembership Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show the change/update in Group members. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("GroupMembership")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_group_membership_change_internal_filter` \
| `cs_o365_group_membership_change_filter`  \
| eval cyences_severity = case( in(Target_DisplayName, `cs_ad_important_group`) or in(Target_DisplayName, `cs_ad_important_group_internal`), "medium", true(), "low")  \
| table event_time, cyences_severity, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_group_membership_change_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_managementactivity_change("GroupMembership")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - Azure Active Directory - User Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the change/update in User. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("User")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_user_change_internal_filter` \
| `cs_o365_user_change_filter`  \
| eval cyences_severity = case( in(Target_DisplayName, `cs_ad_important_user`) or in(Target_DisplayName, `cs_ad_important_user_internal`), "medium", true(), "low")  \
| table event_time, cyences_severity, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_user_change_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_managementactivity_change("User")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - Azure Active Directory - ServicePrincipal Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the change/update in ServicePrincipal. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("ServicePrincipal")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_serviceprincipal_change_internal_filter` \
| eval cyences_severity = "medium" \
| `cs_o365_serviceprincipal_change_filter`  \
| table event_time, cyences_severity, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_serviceprincipal_change_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_managementactivity_change("ServicePrincipal")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


[O365 - Azure Active Directory - Application Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show the change/update in Application. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("Application")` _index_earliest=-61m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_application_change_internal_filter` \
| `cs_o365_application_change_filter`  \
| eval cyences_severity = "info" \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_application_change_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_managementactivity_change("Application")`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365

# Possible user_type field values for the O365 management activity
# https://learn.microsoft.com/en-us/office/office-365-management-api/office-365-management-activity-api-schema#user-type

[O365 - Login Failure Due To Multi Factor Authentication]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the login failure due to multi factor authentication. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Failed_Login, values(LogonError) as LogonError, values(ApplicationId) as ApplicationId, values(ExtendedProperties) as ExtendedProperties by user, ClientIP \
| iplocation ClientIP \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(Last_Failed_Login) as Last_Failed_Login, list(Location) as Location, values(LogonError) as LogonError, values(ApplicationId) as ApplicationId, values(ExtendedProperties) as ExtendedProperties by user \
| eval cyences_severity = case(user_type=="Admin" or user_type=="DcAdmin", "medium", true(), "low") \
| sort - count \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_mfs_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_failed_login_due_to_mfs_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt")
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user=$row.user$
action.cyences_notable_event_action.attacker_search = | stats count by LogonError
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError=$row.LogonError$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365

[O365 - Login Failure Outside Home Country Due To Multi Factor Authentication]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the login failure outside home country due to multi factor authentication. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Failed_Login, values(LogonError) as LogonError, values(ApplicationId) as ApplicationId, values(ExtendedProperties) as ExtendedProperties by user, ClientIP \
| iplocation ClientIP \
| where Country!=`cs_home_country` \
| `cs_confirmiplocation` \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(Last_Failed_Login) as Last_Failed_Login, list(Location) as Location, values(LogonError) as LogonError, values(ApplicationId) as ApplicationId, values(ExtendedProperties) as ExtendedProperties by user \
| eval cyences_severity = case(user_type=="Admin" or user_type=="DcAdmin", "medium", true(), "low") \
| sort - count \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_mfs_outside_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_failed_login_due_to_mfs_outside_country_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt")
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") user=$row.user$
action.cyences_notable_event_action.attacker_search = | stats count by LogonError
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError=$row.LogonError$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.deprecated = 1
action.cyences_notable_event_action.deprecated_from_version = 4.0.0
action.cyences_notable_event_action.deprecated_replacement = O365 - Login Failure From Unusual Country Due To Multi Factor Authentication

[O365 - Login Failure From Unusual Country Due To Multi Factor Authentication]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the login failure from Unusual Country due to multi factor authentication. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") `cs_public_ips(ClientIP)` \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Failed_Login, values(LogonError) as LogonError, values(ApplicationId) as ApplicationId, values(ExtendedProperties) as ExtendedProperties by user, ClientIP, app \
| iplocation ClientIP \
| `cs_current_week_login_count(o365:management:activity)` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| eval cyences_severity = case(percentage_login_from_country==0, "high", user_type=="Admin" or user_type=="DcAdmin", "medium", true(), "low") \
| fields - lat lon \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_mfs_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_failed_login_due_to_mfs_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt")  `cs_public_ips(ClientIP)` | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt")  `cs_public_ips(ClientIP)`  user=$row.user$ | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_notable_event_action.attacker_search = | stats count by LogonError
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed  `cs_public_ips(ClientIP)` LogonError=$row.LogonError$ | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365

[O365 - Login From Unknown User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the Login from unknown user. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoggedIn (UserId=Unknown OR UserId="Not Available" ) \
| stats count, values(UserId) as UserId, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Success_Login, values(ApplicationId) as ApplicationId by ClientIP \
| iplocation ClientIP \
| fields - lat lon \
| sort - count \
| `cs_human_readable_time_format(Last_Success_Login)` \
| eval cyences_severity = "low" \
| `cs_o365_login_by_unknown_userid_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_login_by_unknown_userid_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoggedIn (UserId=Unknown OR UserId="Not Available" )
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365

[O365 - Successful Login Outside Home Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the successful login outside home country. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoggedIn NOT LogonError=* \
| stats count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Success_Login, values(ApplicationId) as ApplicationId by user, ClientIP \
| iplocation ClientIP \
| where Country!=`cs_home_country` \
| `cs_confirmiplocation` \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(Last_Success_Login) as Last_Success_Login, list(Location) as Location, values(ApplicationId) as ApplicationId by user \
| eval cyences_severity = case(user_type=="Admin" or user_type=="DcAdmin", "medium", true(), "low") \
| sort - count \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_o365_success_login_outside_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_success_login_outside_country_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoggedIn NOT LogonError=* | iplocation ClientIP | where Country!=`cs_home_country` | `cs_confirmiplocation`
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoggedIn NOT LogonError=* user=$row.user$ | iplocation ClientIP | where Country!=`cs_home_country` | `cs_confirmiplocation`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365
action.cyences_notable_event_action.deprecated = 1
action.cyences_notable_event_action.deprecated_from_version = 4.0.0
action.cyences_notable_event_action.deprecated_replacement = O365 - Successful Login From Unusual Country

[O365 - Successful Login From Unusual Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Successful O365 Login From Unusual Country. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoggedIn  `cs_public_ips(ClientIP)`  NOT LogonError=* \
| stats count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Success_Login, values(ApplicationId) as ApplicationId by user, ClientIP, app \
| iplocation ClientIP \
| `cs_current_week_login_count(o365:management:activity)` \
| `cs_country_login_percentage` \
| fillnull Country, Region, City value="-" \
| eval cyences_severity = case(percentage_login_from_country==0, "high", user_type=="Admin" or user_type=="DcAdmin", "high", true(), "medium") \
| fields - lat lon \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_o365_successful_login_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_successful_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoggedIn  `cs_public_ips(ClientIP)` NOT LogonError=* | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoggedIn  `cs_public_ips(ClientIP)` NOT LogonError=* user=$row.user$ | iplocation ClientIP | `cs_country_login_percentage`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365

[O365 - Authentication Blocked By Conditional Access Policy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the authentication blocked by conditional access policy. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError="BlockedByConditionalAccess" \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Failed_Login, values(ApplicationId) as ApplicationId, values(ExtendedProperties) as ExtendedProperties by user, ClientIP \
| iplocation ClientIP \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(Last_Failed_Login) as Last_Failed_Login, list(Location) as Location, values(ApplicationId) as ApplicationId, values(ExtendedProperties) as ExtendedProperties by user \
| eval cyences_severity = case(user_type=="Admin" or user_type=="DcAdmin", "high", true(), "medium") \
| sort - count \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_conditional_access_policy_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_failed_login_due_to_conditional_access_policy_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError="BlockedByConditionalAccess"
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity"  Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError="BlockedByConditionalAccess" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365

[O365 - Daily Login Failure]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will show the daily Login failure. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2d@h
dispatch.latest_time = +2d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-25h@m _index_latest=-1h@m Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError!=TriggerBrowserCapabilitiesInterrupt \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, values(user_type) as user_type, values(authentication_method) as authentication_method, max(_time) as Last_Failed_Login, values(LogonError) as LogonError, values(ApplicationId) as ApplicationId, values(ExtendedProperties) as ExtendedProperties by user, ClientIP \
| iplocation ClientIP \
| fillnull Country, Region, City value="-" \
| eventstats sum(count) as total_count_by_user by user \
| eval cyences_severity = "info" \
| sort - total_count_by_user, user, count \
| table user, total_count_by_user, ClientIP, count, cyences_severity, Country, Region, City, Last_Failed_Login, user_type, authentication_method, LogonError, ApplicationId, ExtendedProperties \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_daily_login_failure_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_daily_login_failure_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError!=TriggerBrowserCapabilitiesInterrupt 
action.cyences_notable_event_action.system_compromised_search = | stats count by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError!=TriggerBrowserCapabilitiesInterrupt user=$row.user$
action.cyences_notable_event_action.attacker_search = | stats count by LogonError
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError=$row.LogonError$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365

[O365 - Security Compliance Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show Security compliance alert. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=SecurityComplianceCenter Operation=AlertTriggered \
| eval cyences_severity = case(Severity=="Critical", "critical", Severity=="High", "high", Severity=="Medium", "medium", Severity=="Low", "low", Severity=="Informational", "info") \
| dedup AlertId \
| spath input=Data \
| table _time Name Severity cyences_severity AlertType Category f3u lon wl ad \
| `cs_o365_security_compliance_alert_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_security_compliance_alert_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` sourcetype="o365:management:activity" Workload=SecurityComplianceCenter Operation=AlertTriggered
action.cyences_notable_event_action.attacker_search = | stats count by Name
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` sourcetype="o365:management:activity" Workload=SecurityComplianceCenter Operation=AlertTriggered Name=$row.Name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


# ======================
# Email
# ======================
[Email - Calculate UpperBound for Spike In Emails]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for Email - Hourly Increase In Emails Over Baseline - Generates the upperBound value of email sent for each user \
Data Collection - Office 365 reporting messagetrace data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -8d@d
dispatch.latest_time = -1d@d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` (sourcetype="ms:o365:reporting:messagetrace" OR sourcetype="o365:reporting:messagetrace") \
| bin span=1h _time \
| stats dc(MessageId) as count by SenderAddress, _time \
| stats avg(count) as avg, stdev(count) as stdev by SenderAddress \
| eval upperBound=(avg+stdev*3) \
| outputlookup cs_email_sent_upperbound.csv
action.cyences_notable_event_action.products = Office 365

[Email - Hourly Increase In Emails Over Baseline]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will show the hourly increase in emails over baseline. \
\
Data Collection - Office 365 reporting messagetrace data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2d@h
dispatch.latest_time = +2d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` (sourcetype="ms:o365:reporting:messagetrace" OR sourcetype="o365:reporting:messagetrace") _index_earliest=-61m@m _index_latest=-1m@m \
| stats dc(MessageId) as count, values(Subject) as Subject by SenderAddress \
| lookup cs_email_sent_upperbound.csv SenderAddress OUTPUT upperBound, avg, stdev \
| where count>upperBound AND count > `cs_email_increase_over_baseline_limit` \
| eval avg=round(avg, 2), stdev=round(stdev, 2), upperBound=round(upperBound, 2) \
| eval cyences_severity = case(count>6*upperBound, "critical", count>4*upperBound, "high", true(), "medium") \
| rename avg as avg_hourly_emails_in_last_7_days, upperBound as hourly_email_baseline \
| fields - stdev \
| `cs_email_increase_in_email_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_email_increase_in_email_filter
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365

[Email - Daily Spam Email]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will show the daily spam email. \
\
Data Collection - Office 365 reporting messagetrace data (Splunk Add-on for Office 365).
dispatch.earliest_time = -3d@h
dispatch.latest_time = +3d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` (sourcetype="ms:o365:reporting:messagetrace" OR sourcetype="o365:reporting:messagetrace") _index_earliest=-25h@m _index_latest=-1h@m Status=FilteredAsSpam \
| stats count, values(RecipientAddress) as RecipientAddress by SenderAddress, Subject \
| eval cyences_severity = "info" \
| sort - count \
| `cs_email_daily_spam_email_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_email_daily_spam_email_filter
action.cyences_notable_event_action.contributing_events = `cs_o365` (sourcetype="ms:o365:reporting:messagetrace" OR sourcetype="o365:reporting:messagetrace") Status=FilteredAsSpam 
action.cyences_notable_event_action.system_compromised_search = | stats count by SenderAddress
action.cyences_notable_event_action.system_compromised_drilldown =  `cs_o365` (sourcetype="ms:o365:reporting:messagetrace" OR sourcetype="o365:reporting:messagetrace") Status=FilteredAsSpam SenderAddress=$row.SenderAddress$
action.cyences_notable_event_action.attacker_search = | stats count by Subject
action.cyences_notable_event_action.attacker_drilldown = `cs_o365` (sourcetype="ms:o365:reporting:messagetrace" OR sourcetype="o365:reporting:messagetrace") Status=FilteredAsSpam Subject=$row.Subject$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365


# ======================
# Credential Compromise
# ======================
[Credential Compromise - Windows - Credential Dumping through LSASS Access]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert points out credential dumping on Windows with LSASS Access. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=10
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe (GrantedAccess=0x1010 OR GrantedAccess=0x1410) \
| stats count min(_time) as firstTime max(_time) as lastTime by Computer, SourceImage, SourceProcessId, TargetImage, TargetProcessId, EventCode, GrantedAccess \
| rename Computer as dest | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = "critical" \
| `cs_detect_credential_dumping_through_lsass_access_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_detect_credential_dumping_through_lsass_access_filter
action.cyences_notable_event_action.contributing_events = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe (GrantedAccess=0x1010 OR GrantedAccess=0x1410)
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by Computer
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe Computer=$row.Computer$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by SourceImage
action.cyences_notable_event_action.attacker_drilldown = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe SourceImage=$row.SourceImage$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon


[Credential Compromise - Windows - Credential Dumping via Symlink to Shadow Copy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert identifies credential dumping on Windows via symlink to the shadow copy. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=cmd.exe Processes.process=*mklink* Processes.process=*HarddiskVolumeShadowCopy* by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id \
| `drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = "critical" \
| `cs_credential_dumping_via_symlink_to_shadow_copy_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_credential_dumping_via_symlink_to_shadow_copy_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name="cmd.exe" Processes.process=*mklink* Processes.process=*HarddiskVolumeShadowCopy* | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name="cmd.exe" Processes.dest=$row.dest$ | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by process, process_name, parent_process
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process="cmd.exe" Processes.process=$row.process$ | `drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon


[Credential Compromise - Windows - Credential Dumping via Copy Command from Shadow Copy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert recognizes credential dumping via copy command from a shadow copy. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=cmd.exe (Processes.process=*\\system32\\config\\sam* OR Processes.process=*\\system32\\config\\security* OR Processes.process=*\\system32\\config\\system* OR Processes.process=*\\windows\\ntds\\ntds.dit*) by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id \
| `drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = "critical" \
| `cs_credential_dumping_via_copy_command_from_shadow_copy_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_credential_dumping_via_copy_command_from_shadow_copy_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name=cmd.exe (Processes.process=*\\system32\\config\\sam* OR Processes.process=*\\system32\\config\\security* OR Processes.process=*\\system32\\config\\system* OR Processes.process=*\\windows\\ntds\\ntds.dit*) | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process_name="cmd.exe" dest=$row.dest$ | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by process, process_name, parent_process
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process="cmd.exe" Processes.process=$row.process$ | `drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon


[Credential Compromise - Windows - Credential Dump From Registry via Reg exe]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert identifies credential dumping from registry via reg exe. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=reg.exe OR Processes.process_name=cmd.exe) Processes.process=*save* (Processes.process=*HKEY_LOCAL_MACHINE\\Security* OR Processes.process=*HKEY_LOCAL_MACHINE\\SAM* OR Processes.process=*HKEY_LOCAL_MACHINE\\System* OR Processes.process=*HKLM\\Security* OR Processes.process=*HKLM\\System* OR Processes.process=*HKLM\\SAM*) by Processes.user Processes.process_name Processes.process Processes.dest \
| `drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| eval cyences_severity = "critical" \
| `cs_attempted_credential_dump_from_registry_via_reg_exe_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_attempted_credential_dump_from_registry_via_reg_exe_filter
action.cyences_notable_event_action.contributing_events = | datamodel Endpoint Processes search strict_fields=false | search (Processes.process_name=reg.exe OR Processes.process_name=cmd.exe) Processes.process=*save* (Processes.process=*HKEY_LOCAL_MACHINE\\Security* OR Processes.process=*HKEY_LOCAL_MACHINE\\SAM* OR Processes.process=*HKEY_LOCAL_MACHINE\\System* OR Processes.process=*HKLM\\Security* OR Processes.process=*HKLM\\System* OR Processes.process=*HKLM\\SAM*) | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process IN ("cmd.exe", "reg.exe") Processes.dest=$row.dest$ | `drop_dm_object_name(Processes)`
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by process, process_name, parent_process
action.cyences_notable_event_action.attacker_drilldown = | datamodel Endpoint Processes search strict_fields=false | search Processes.process IN ("cmd.exe", "reg.exe") Processes.process=$row.process$ | `drop_dm_object_name(Processes)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sysmon



# ======================
# Sophos Central
# ======================
[Sophos - Endpoint Not Protected by Sophos]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alert will trigger when a Sophos endpoint is unprotected. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/)
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::NotProtected" \
| stats count, latest(_time) as _time, values(src_ip) as src_ip, values(suser) as user by host, dhost \
| search NOT ( \
    [| inputlookup cs_lansweeper_inventory \
    | search antivirus="Sophos Anti-Virus#0" OR antivirus="Sophos Intercept X#0" \
    | mvexpand antivirus \
    | rex field=antivirus max_match=0 "(?<active_antivirus>[^#]+)#(?<antivirus_enabled>[^n]+)" \
    | search active_antivirus!="Sophos Anti-Virus" active_antivirus!="Sophos Intercept X" antivirus_enabled="1" \
    | dedup AssetName \
    | rename AssetName as dhost \
    | append \
        [| makeresults \
        | eval dhost="HOST_TO_RETURN_AT_LEAST_ONE_EVENT" ] \
    | table dhost \
    | return 10000 dhost]) \
| eval cyences_severity = "high" \
| sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_endpoint_not_protected_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_endpoint_not_protected_filter
action.cyences_notable_event_action.contributing_events = `cs_sophos` type="Event::Endpoint::NotProtected"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dhost
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` dhost=$row.dhost$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos


[Sophos - Sophos RealTime Protection Disabled]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert will trigger when RealTime Protection is disabled on a Sophos endpoint. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/) \
\
A false positive may appear when an administrator might have intentionally disabled RealTime Protection for Sophos. 
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::SavDisabled" \
| stats count, latest(_time) as _time, values(src_ip) as src_ip, values(suser) as user by host, dhost \
| eval cyences_severity = "high" \
| sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_realtime_protection_disabled_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_realtime_protection_disabled_filter
action.cyences_notable_event_action.contributing_events = `cs_sophos` type="Event::Endpoint::SavDisabled"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dhost
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` dhost=$row.dhost$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos


[Sophos - Sophos Service is not Running]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alet will trigger when a Sophos endpoint service is no longer running. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/) \
\
A false positive may appear when an administrator might have manually stopped Sophos on an endpoint.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::ServiceNotRunning" \
| stats count, latest(_time) as _time, values(src_ip) as src_ip, values(suser) as user by host, dhost \
| search NOT ( \
    [| inputlookup cs_lansweeper_inventory \
    | search antivirus="Sophos Anti-Virus#0" OR antivirus="Sophos Intercept X#0" \
    | mvexpand antivirus \
    | rex field=antivirus max_match=0 "(?<active_antivirus>[^#]+)#(?<antivirus_enabled>[^n]+)" \
    | search active_antivirus!="Sophos Anti-Virus" active_antivirus!="Sophos Intercept X" antivirus_enabled="1" \
    | dedup AssetName \
    | rename AssetName as dhost \
    | append \
        [| makeresults \
        | eval dhost="HOST_TO_RETURN_AT_LEAST_ONE_EVENT" ] \
    | table dhost \
    | return 10000 dhost]) \
| eval cyences_severity = "high" \
| sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_service_not_running_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_service_not_running_filter
action.cyences_notable_event_action.contributing_events = `cs_sophos` type="Event::Endpoint::ServiceNotRunning"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dhost
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` dhost=$row.dhost$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos


[Sophos - Failed to clean up threat by Sophos]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert will trigger when a Sophos endpoint fails to clean-up a known threat. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/)
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type IN ("Event::Endpoint::Threat::CleanupFailed", "Event::Endpoint::CoreCleanFailed", "Event::Endpoint::CoreHmpaCleanFailed", "Event::Endpoint::CoreSystemCleanFailed") \
| stats count, latest(_time) as _time, values(name) as threat, values(src_ip) as src_ip, values(suser) as user by host, dhost | sort -count \
| eval cyences_severity = "high" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_failed_to_cleanup_threat_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_sophos_failed_to_cleanup_threat_filter
action.cyences_notable_event_action.contributing_events = `cs_sophos` type IN ("Event::Endpoint::Threat::CleanupFailed", "Event::Endpoint::CoreCleanFailed", "Event::Endpoint::CoreHmpaCleanFailed", "Event::Endpoint::CoreSystemCleanFailed")
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dhost
action.cyences_notable_event_action.system_compromised_drilldown = `cs_sophos` dhost=$row.dhost$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Sophos



# ======================
# Windows Defender
# ======================
[Windows Defender - Endpoint Not Protected by Windows Defender]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alert notifies users when a Windows Defender endpoint is unprotected. \
\
Data Collection - Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/) - WinEventLog://Microsoft-Windows-Windows Defender/Operational stanza
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode IN (2042, 5008, 5012) | dedup host \
| eval EventCodeDescription=case(EventCode=2042, "The antimalware engine no longer supports this operating system, and is no longer protecting your system from malware.", EventCode=5012, "Scanning for viruses is disabled.", EventCode=5008, "The antimalware engine encountered an error and failed.") \
| eval cyences_severity = "high" \
| table _time, cyences_severity, host, EventCode, EventCodeDescription \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_defender_endpoint_not_protected`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_defender_endpoint_not_protected
action.cyences_notable_event_action.contributing_events = `cs_windows_defender` EventCode IN (2042, 5008, 5012)
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_windows_defender` host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows Defender


[Windows Defender - Windows Defender RealTime Protection Disabled or Failed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert notifies users when Windows Defender RealTime Protection has failed or been disabled. \
\
Data Collection - Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/) - WinEventLog://Microsoft-Windows-Windows Defender/Operational stanza
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode=3002 OR EventCode=3007 OR EventCode=5001 OR EventCode=5000 \
| eval EventCodeDescription=case(EventCode==3002 ,"3002 - Real-time protection encountered an error and failed.", EventCode==3007 ,"3007 - Real-time protection recovered from a failure.", EventCode==5001 ,"5001 - Real-time protection is disabled.", EventCode==5000 ,"5000 - Real-time protection is enabled.") \
| stats latest(EventCodeDescription) as latest_EventCodeDescription latest(eval(if(EventCode==3002 OR EventCode==5001,_time,null()))) as failed_time latest(eval(if(EventCode==3007 OR EventCode==5000,_time,null()))) as success_time latest(eval(if(EventCode==3002 OR EventCode==5001,EventCodeDescription,null()))) as failed_EventCode latest(eval(if(EventCode==3007 OR EventCode==5000,EventCodeDescription,null()))) as success_EventCode by host \
| where failed_time > success_time OR isnull(success_time) \
| table host latest_EventCodeDescription failed_time \
| search NOT ( \
    [| inputlookup cs_lansweeper_inventory \
    | search antivirus="Windows Defender#0" \
    | mvexpand antivirus \
    | rex field=antivirus max_match=0 "(?<active_antivirus>[^#]+)#(?<antivirus_enabled>[^n]+)" \
    | search active_antivirus!="Windows Defender" antivirus_enabled="1" \
    | dedup AssetName \
    | rename AssetName as host \
    | append \
        [| makeresults \
        | eval host="HOST_TO_RETURN_AT_LEAST_ONE_EVENT" ] \
    | table host \
    | return 10000 host]) \
| eval cyences_severity = "high" \
| `cs_human_readable_time_format(failed_time)` \
| `cs_human_readable_time_format(success_time)` \
| `cs_windows_defender_realtime_protection_disabled_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_defender_realtime_protection_disabled_filter
action.cyences_notable_event_action.contributing_events = `cs_windows_defender` (EventCode IN (5001, 3002) OR (EventCode=1151 AND RTP_state!="Enabled"))
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_windows_defender` host=$row.host$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows Defender


[Windows Defender - Malware Detected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert notifies users when Malware Detected by Windows Defender. \
\
Data Collection - Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/) - WinEventLog://Microsoft-Windows-Windows Defender/Operational stanza
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode IN(1006, 1007, 1008, 1015, 1116, 1117, 1118) \
| fields Detection_Time, Computer, EventCode, Threat_Name, severity, action, Category_Name, Detection_User, Additional_Actions_String, Threat_ID, Detection_ID, Process_Name, Path \
| eval EventCodeDescription=case(EventCode==1006 ,"1006 - Antimalware engine found malware or other potentially unwanted software.", EventCode==1007 ,"1007 - Antimalware platform performed an action to protect your system.", EventCode==1008 ,"1008 - Antimalware platform performed an action to protect your system, but the action failed.", EventCode==1015 ,"1015 - Antimalware platform detected suspicious behavior.", EventCode==1116 ,"1116 - Antimalware platform detected malware or other potentially unwanted software.", EventCode==1117 ,"1117 - Antimalware platform performed an action to protect your system.", EventCode==1118 ,"1118 - Antimalware platform performed an action to protect your system, but the action failed.") \
| stats values(*) as * by Detection_ID, Computer, Threat_ID \
| eval cyences_severity = if(in(action, "blocked", "deleted"), "info", severity) \
| eval action = if(mvcount(action)>1, mvfilter(!match(action,"deferred")), action) \
| table Detection_Time, Computer, EventCodeDescription, Threat_Name, severity, cyences_severity, action, Category_Name, Detection_User, Additional_Actions_String, Threat_ID, Detection_ID, Process_Name, Path \
| rename Additional_Actions_String as Additional_Action \
| `cs_windows_defender_malware_detected_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_windows_defender_malware_detected_filter
action.cyences_notable_event_action.contributing_events = `cs_windows_defender` EventCode IN (1006, 1015, 1116)
action.cyences_notable_event_action.system_compromised_search = | stats count by Computer
action.cyences_notable_event_action.system_compromised_drilldown = `cs_windows_defender` EventCode IN (1006, 1015, 1116) Computer=$row.Computer$
action.cyences_notable_event_action.attacker_search = | stats count by Threat_Name
action.cyences_notable_event_action.attacker_drilldown = `cs_windows_defender` EventCode IN (1006, 1015, 1116) Threat_Name=$row.Threat_Name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Windows Defender



# ======================
# Office365 Defender ATP
# ======================
[Defender ATP - Defender ATP Alerts]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert notifies users when there is alert from Microsoft Office 365 Defender ATP. \
\
Data Collection - Splunk Add-on for Microsoft Security (https://splunkbase.splunk.com/app/6207)
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_defender_atp_alerts`\
| stats count, earliest(_time) as firstTime, latest(_time) as lastTime, last(lastUpdateTime) as lastUpdateTime, last(resolvedTime) as resolvedTime, last(severity) as severity, last(status) as status, last(threatFamilyName) as threatFamilyName, last(threatName) as threatName, last(title) as title, last(investigationState) as investigationState, last(detectionSource) as detectionSource, last(assignedTo) as assignedTo, last(category) as category, last(classification) as classification, last(description) as description, last(incidentId) as incidentId, last(investigationId) as investigationId by detectorId, id, machineId, computerDnsName\
| eval lastUpdateTime=strptime(lastUpdateTime, "%FT%T.%7QZ"), resolvedTime=strptime(resolvedTime, "%FT%T.%7QZ")\
| `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(lastUpdateTime)` | `cs_human_readable_time_format(resolvedTime)`\
| eval cyences_severity = case(severity=="Critical", "critical", severity=="High", "high", severity=="Medium", "medium", severity=="Low", "low", severity=="Informational" or severity=="Info", "info") \
| table computerDnsName, count, firstTime, lastTime, lastUpdateTime, resolvedTime, incidentId, title, threatFamilyName, threatName, category, classification, severity, cyences_severity, status, investigationId, invenstigationState, assignedTo, detectionSource, detectorId, id, machineId\
| `cs_o365_defender_atp_alerts_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_o365_defender_atp_alerts_filter
action.cyences_notable_event_action.contributing_events = `cs_o365_defender_atp_alerts`
action.cyences_notable_event_action.system_compromised_search = | stats count by computerDnsName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_o365_defender_atp_alerts` computerDnsName=$row.computerDnsName$
action.cyences_notable_event_action.attacker_search = | stats count by title
action.cyences_notable_event_action.attacker_drilldown = `cs_o365_defender_atp_alerts` title=$row.title$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Office 365 Defender ATP



# ======================
# CrowdStrike
# ======================
[CrowdStrike - Suspicious Activity or Malware Detected by CrowdStrike]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert notifies users when CrowdStrike detects a suspicios activity or malware. \
\
Data Collection - CrowdStrike Event Stream Add-on (https://splunkbase.splunk.com/app/5082/)
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent \
| eval cyences_severity = case(action=="allowed", "info", 'event.SeverityName'=="Critical", "critical", 'event.SeverityName'=="High", "high", 'event.SeverityName'=="Medium", "medium", 'event.SeverityName'=="Low", "low", 'event.SeverityName'=="Informational" or 'event.SeverityName'=="Info", "info") \
| table _time, event.ComputerName, action, event.LocalIP, event.UserName, event.DetectDescription, event.DetectName, event.CommandLine, event.MD5String, event.SHA256String, event.ProcessId, event.PatternDispositionDescription, event.ParentCommandLine, event.Objective, event.DetectId, event.FalconHostLink, event.SeverityName, cyences_severity, event.Tactic, event.Technique, event.ProcessStartTime, event.ProcessEndTime \
| rename event.* as * | `cs_human_readable_time_format(ProcessStartTime)` | `cs_human_readable_time_format(ProcessEndTime)` \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_crowdstrike_malware_detected_alert_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_crowdstrike_malware_detected_alert_filter
action.cyences_notable_event_action.contributing_events = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent
action.cyences_notable_event_action.system_compromised_search = | stats count by ComputerName
action.cyences_notable_event_action.system_compromised_drilldown = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent "event.ComputerName"=$row.ComputerName$
action.cyences_notable_event_action.attacker_search = | stats count by UserName
action.cyences_notable_event_action.attacker_drilldown = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent "event.UserName"=$row.UserName$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = CrowdStrike EventStream


[Vulnerability - Detected Vulnerabilities]
disabled = 0
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =  0 */4 * * *
description = Newly detected Vulnerabilities from vulnerability data. \
\
Data Collection - Qualys, Tenable, CrowdStrike Spotlight vulnerability, etc.. 
dispatch.earliest_time = -4h@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_all_vuln where  (status="open" OR status="reopened") \
| dedup vul_id \
| eval _time=first_found \
| eval days_ago=relative_time(now(), "-4h@m") \
| where _time >= days_ago \
| fields - days_ago time _time \
| `cs_human_readable_time_format(first_found)` \
| `cs_human_readable_time_format(last_found)` \
| eval cyences_severity = if(severity="informational", "info", severity) \
| `cs_newly_detected_vuln_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_newly_detected_vuln_filter
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Qualys, Tenable, CrowdStrike Spotlight


# =======================
# Asset Inventory
# =======================
[Asset Inventory - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule =  0 0 * * *
description = This savedsearch update the asset inventory every day and generates lookup for all assets data. \
\
Data Collection - Qualys, Tenable Assets data 
dispatch.earliest_time = -1d@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_cyences_assets` count, latest(Assets.asset_hostname) as asset_hostname, latest(Assets.asset_ip) as asset_ip, latest(Assets.asset_mac_address) as asset_mac_address, latest(host) as host, latest(Assets.last_scan_time) as last_scan_time, latest(Assets.os) as os, latest(Assets.state) as state, latest(_time) as time FROM datamodel=Cyences_Assets by Assets.asset_id, Assets.vendor_product \
| `drop_dm_object_name(Assets)` \
| inputlookup cs_all_assets append=t \
| dedup asset_id, vendor_product \
| eval asset_hostname=mvjoin(mvdedup(split(lower(asset_hostname), "~~")), "~~"), asset_ip=mvjoin(mvdedup(split(lower(asset_ip), "~~")), "~~"), asset_mac_address=mvjoin(mvdedup(split(lower(asset_mac_address), "~~")), "~~") \
| table asset_hostname, asset_id, asset_ip, asset_mac_address, host, last_scan_time, os, state, time, vendor_product \
| outputlookup cs_all_assets


[Asset Inventory - Lookup CleanUp]
disabled = 0
enableSched = 0
alert.track = 0
cron_schedule = 0 0 1 * *
description = This report cleans up cs_all_assets lookup.
dispatch.earliest_time = -2y
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_all_assets \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_all_assets


[Asset Inventory - Vulnerability Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule =  0 0 * * *
description = This savedsearch update the vulnerability inventory every day and generates lookup for all vulnerability data. \
\
Data Collection - Qualys, Tenable vulnerability data 
dispatch.earliest_time = -1d@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_cyences_vulnerabilities` count, latest(Vulnerabilities.category) as category, latest(Vulnerabilities.cpe) as cpe, latest(Vulnerabilities.cve) as cve, latest(Vulnerabilities.cvss) as cvss, latest(Vulnerabilities.description) as description, latest(Vulnerabilities.dest_ip) as dest_ip, latest(Vulnerabilities.dest_name) as dest_name, latest(Vulnerabilities.dvc) as dvc, latest(Vulnerabilities.first_found) as first_found, latest(Vulnerabilities.has_patch) as has_patch, latest(host) as host, latest(Vulnerabilities.in_the_news) as in_the_news, latest(Vulnerabilities.last_found) as last_found, latest(Vulnerabilities.last_scan_time) as last_scan_time, latest(Vulnerabilities.os) as os, latest(Vulnerabilities.port) as port, latest(Vulnerabilities.protocol) as protocol, latest(Vulnerabilities.published_time) as published_time, latest(Vulnerabilities.severity) as severity, latest(Vulnerabilities.signature) as signature, latest(Vulnerabilities.signature_id) as signature_id, latest(Vulnerabilities.solution) as solution, latest(Vulnerabilities.status) as status, latest(_time) as time, latest(Vulnerabilities.tracking_method) as tracking_method, latest(Vulnerabilities.type) as type, latest(Vulnerabilities.user) as user FROM datamodel=Cyences_Vulnerabilities by Vulnerabilities.dest_id, Vulnerabilities.vul_id, Vulnerabilities.vendor_product \
| `drop_dm_object_name(Vulnerabilities)` \
| inputlookup cs_all_vuln append=t \
| dedup dest_id, vul_id, vendor_product \
| table category, cpe, cve, cvss, description, dest_id, dest_ip, dest_name, dvc, first_found, has_patch, host, in_the_news, last_found, last_scan_time, os, port, protocol, published_time, severity, signature, signature_id, solution, status, time, tracking_method, type, user, vendor_product, vul_id \
| outputlookup cs_all_vuln


[Asset Inventory - Vulnerability Lookup CleanUp]
disabled = 0
enableSched = 0
alert.track = 0
cron_schedule = 0 0 1 * *
description = This report cleans up cs_all_vuln lookup.
dispatch.earliest_time = -2y
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_all_vuln \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_all_vuln


# =======================
# Device Inventory
# =======================
# Reports
[Device Inventory - Lansweeper]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 * * * *
description = This report update the device inventory every hour and generates lookup for lansweeper data. \
\
Data Collection - The lansweeper data needs to be collected via the Lansweeper Add-On for Splunk(https://splunkbase.splunk.com/app/5418/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
# This time-range does not apply in the search as it is given as part of search-query
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_lansweeper` `cs_lansweeper_timerange` \
| eval hostname=lower(mvjoin(mvdedup(mvappend(AssetName, FQDN)),"~~")), ip=lower(IPAddress), mac_address=lower(Mac) \
| eval antivirus = mvzip(antivirus_name, antivirus_enabled, "#") \
| rename _time as time, host as lansweeper_collected_by, site_name as Site, AssetTypename as AssetType, Statename as lansweeper_state, Userdomain as Domain, AssetGroup as GroupName, OScode as OSVersion, Username as lansweeper_user, version as AssetVersion, OS as lansweeper_os, FQDN as lansweeper_fqdn, AssetID as lansweeper_id, Firstseen as FirstSeen, Lastseen as LastSeen \
| table time, lansweeper_collected_by, hostname, ip, mac_address, lansweeper_id, Site, AssetType, lansweeper_state, Domain, GroupName, OSVersion, BuildNumber, AssetVersion, lansweeper_user, lansweeper_os, Description, IPLocation, lansweeper_fqdn, antivirus, AssetDomain, FirstSeen, LastSeen, AssetName, Serialnumber, Processor, Model, Manufacturer, OSRelease, OSname, SystemVersion, Memory, LsAgentVersion, LastLsAgent, LastChanged, DNSName \
| stats values(GroupName) as GroupName, values(antivirus) as antivirus, values(Processor) as Processor, first(*) as * by lansweeper_id \
| eval _key=lansweeper_id \
| outputlookup cs_lansweeper_inventory \
| `cs_device_inventory_out_to_temp_lookup`
# Note - We are not appending previous lookup in case of Lansweeper as Lansweeper Add-on always fetch full asset list.
action.cyences_notable_event_action.products = Lansweeper


[Device Inventory - Tenable]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 2 * * * *
description = This report update the device inventory every hour and generates lookup for tenable data. \
\
Data Collection - The tenable data (asset summaries) needs to be collected via the Tenable Add-On for Splunk(https://splunkbase.splunk.com/app/4060/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_tenable_assets` | dedup tenable_uuid \
| eval ip=mvdedup(mvappend(ip, ipv4s, ipv6s)), ip=lower(mvjoin(ip, "~~")) | eval hostname=mvdedup(mvappend(hostnames, fqdns, dnsName)) | eval hostname=lower(mvjoin(hostname, "~~")), mac_address=lower(mvjoin(mvdedup(mvappend(mac_addresses, macAddress)), "~~")) \
| rename host as tenable_collected_by, network_name as tenable_network_name, state as tenable_state \
| eval tenable_fqdn=mvjoin(mvappend(fqdns, dnsName), ", "), tenable_netbios=mvjoin(mvappend(netbios_names, biosGUID), ", "), tenable_os=mvjoin(operating_systems, ", ") \
| table _time, tenable_collected_by, tenable_uuid, ip, hostname, mac_address, tenable_fqdn, tenable_netbios, tenable_os, tenable_state, tenable_network_name, created_at, first_scan_time, first_seen, has_agent, has_plugin_results, last_authenticated_scan_date, last_licensed_scan_date, last_seen \
| append [| inputlookup cs_tenable_inventory | rename time as _time] \
| stats latest(_time) as time, latest(*) as * by tenable_uuid \
| eval _key=tenable_uuid | outputlookup cs_tenable_inventory \
| `cs_device_inventory_out_to_temp_lookup`
action.cyences_notable_event_action.products = Tenable


[Device Inventory - Tenable Vuln]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 59 * * * *
description = This report generate tenable vulnerabilities lookup. \
\
Data Collection - The tenable data are necessary to collect the vulnerability scan results and host summaries via the Tenable Add-On for Splunk(https://splunkbase.splunk.com/app/4060/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_tenable_vuln` | dedup tenable_uuid, vul_id \
| table _time, tenable_uuid, vul_id, vul_name, vul_description, vul_severity, vul_severity_id, vul_state, last_fixed, last_found, vul_cve, vul_solution, vul_cpe, vul_family, vul_has_patch, vul_in_the_news, vul_risk_factor, vul_synopsis, vul_type, vul_version, vul_protocol, vul_port \
| append [| inputlookup cs_tenable_vuln] \
| dedup tenable_uuid, vul_id sortby -_time \
| outputlookup cs_tenable_vuln
action.cyences_notable_event_action.products = Tenable


[Device Inventory - Qualys]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 4 * * * *
description = This report update the device inventory every hour and generates lookup for qualys data. \
\
Data Collection - The qualys data (host summaries) needs to be collected via the Qualys Technology Add-on (TA) for Splunk(https://splunkbase.splunk.com/app/2964/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_qualys_hostsummary` | dedup HOST_ID \
| eval mac_address="" | eval hostname=lower(DNS) | eval IP=lower(IP) | fillnull hostname value="" \
| rename HOST_ID as qualys_id, host as qualys_collected_by, IP as ip, OS as QUALYS_OS, DNS as qualys_dns \
| table _time, qualys_collected_by qualys_id, ip, hostname, mac_address, qualys_dns, QUALYS_OS, NETWORK_ID, TRACKING_METHOD, ACTIVE*, CONFIRMED*, FIXED*, INFO*, LAST_*, NEW*, POTENTIAL*, RE_OPENED*, SEVERITY_*, TOTAL_VULNS \
| append [| inputlookup cs_qualys_inventory | rename time as _time] \
| stats latest(_time) as time, latest(*) as * by qualys_id \
| eval _key=qualys_id | outputlookup cs_qualys_inventory \
| `cs_device_inventory_out_to_temp_lookup`
action.cyences_notable_event_action.products = Qualys


[Device Inventory - Sophos]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 6 * * * *
description = This report update the device inventory every hour and generates lookup for sophos data. \
\
Data Collection - The sophos data are collected via custom command available withing the App via REST API call to Sophos Central. (See Sophos documentation for more information.)
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | sophosinstancedetails all_endpoints=True | extract \
| rename id as sophos_uuid, "tenant.id" as sophos_customer_id, type as sophos_type, "health.overall" as sophos_health, "health.threats.status" as sophos_threats_status, "health.services.status" as sophos_services_status, "lockdown.status" as sophos_lockdown_status, "lockdown.updateStatus" as sophos_lockdown_update_status, "associatedPerson.name" as sophos_user, "associatedPerson.viaLogin" as sophos_login_via, "os.name" as sophos_os | fillnull "os.build", "os.isServer", "os.majorVersion", "os.minorVersion", "os.platform" value="-" | eval sophos_os_details = mvappend("Platform:".'os.platform', "Build No.: ".'os.build', "ServerOS:".'os.isServer', "OS MajorVersion:".'os.majorVersion', "OS MinorVersion:".'os.minorVersion') \
| eval service_status=mvzip('health.services.serviceDetails{}.name', 'health.services.serviceDetails{}.status') \
| eval sophos_product_installed=mvzip('assignedProducts{}.code', mvzip('assignedProducts{}.status', 'assignedProducts{}.version')) \
| eval time=strptime(lastSeenAt, "%FT%T.%3QZ"), ip=lower(mvjoin(mvdedup(mvappend('ipv4Addresses{}','ipv6Addresses{}')),"~~")), hostname=lower(hostname), mac_address=lower(mvjoin('macAddresses{}',"~~")) \
| table time, sophos_customer_id, sophos_uuid, ip, hostname, mac_address, sophos_os, sophos_os_details, sophos_user, sophos_login_via, tamperProtectionEnabled, service_status, sophos_product_installed, sophos_health, sophos_services_status, sophos_threats_status, sophos_lockdown_status, sophos_lockdown_update_status, sophos_type \
| eval _key=sophos_uuid | outputlookup cs_sophos_inventory \
| `cs_device_inventory_out_to_temp_lookup`
# Note - We are not appending previous lookup in case of Sophos as custom command for Sophos data fetch always fetch complete asset list.
action.cyences_notable_event_action.products = Sophos


[Device Inventory - Windows Defender]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 8 * * * *
description = This report update the device inventory every hour and generates lookup for windows defender data. \
\
Data Collection - The windows defender data needs to be collected via the Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode=1151 | `cs_windows_defender_inventory_fill_search`
action.cyences_notable_event_action.products = Windows Defender


[Device Inventory - CrowdStrike]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 10 * * * *
description = This report update the device inventory every hour and generates lookup for crowdstrike data. \
\
Data Collection - The crowdstrike data needs to be collected via the CrowdStrike Event Stream Add-on (https://splunkbase.splunk.com/app/5082/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_crowdstrike_eventstream` | eval crowdstrike_userid=coalesce('event.UserId', 'event.UserName', user) | dedup crowdstrike_userid \
| eval ip=lower(coalesce('event.UserIp', 'event.LocalIP', src)), hostname=lower(coalesce('event.ComputerName', 'event.HostnameField')) \
| rename host as crowdstrike_collected_by, "metadata.customerIDString" as crowdstrike_customer_id, "event.MACAddress" as mac_address \
| fillnull ip, hostname, mac_address value="" \
| table _time, crowdstrike_collected_by, crowdstrike_customer_id, ip, hostname, mac_address, crowdstrike_userid \
| append [| inputlookup cs_crowdstrike_inventory | rename time as _time] \
| stats latest(_time) as time, latest(*) as * by crowdstrike_userid \
| eval _key=crowdstrike_userid | outputlookup cs_crowdstrike_inventory \
| `cs_device_inventory_out_to_temp_lookup`
action.cyences_notable_event_action.products = CrowdStrike EventStream


[Device Inventory - Kaspersky]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 10 * * * *
description = This report update the device inventory every hour and generates lookup for Kaspersky data. \
\
Data Collection - The Kaspersky data needs to be collected via the Kaspersky Add-on for Splunk (https://splunkbase.splunk.com/app/4656/#/details).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_kaspersky` ProductName=KES*  \
| rename dst as ip , dest as hostname,  ProductName as kaspersky_collected_by , ProductVersion as kaspersky_version, macaddress as mac_address  \
| eval hostname=lower(hostname) \
| table _time  ip, hostname, kaspersky_collected_by, kaspersky_version   \
| fillnull ip,hostname,mac_address value=""  \
| stats latest(_time) as _time latest(*) as * by hostname \
| join type=left [| search `cs_kaspersky`  log_type=KLSRV_HOST_STATUS_CRITICAL "Protection is disabled" \
    | rex field=_raw "Status of device \'(?<critical_device>[^\']*)" \
    | stats latest(_time) as time  by critical_device \
    | rename critical_device as hostname \
    |  eval hostname=lower(hostname) ]  \
| eval kaspersky_status=if(_time<time AND isnotnull(time),"Disabled","Present")  | fields - time \
| append [|inputlookup cs_kaspersky_inventory| rename _time as time ] \
| stats latest(*) as * latest(_time) as time by hostname \
| eval _key=hostname \
| eval kaspersky_host=hostname \
| outputlookup cs_kaspersky_inventory \
| `cs_device_inventory_out_to_temp_lookup`
action.cyences_notable_event_action.products = Kaspersky


[Device Inventory Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 20 * * * *
description = This report update the device inventory every hour and generates device inventory lookup from device inventory temp lookup. \
\
Data Collection - This report depends on different sub-reports like: Device Inventory - Lansweeper, Tenable, Qualys, Sophos, Windows Defender, CrowdStrike.
dispatch.earliest_time = -61m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_device_inventory_temp \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| deviceinventorygen


# Backfill
[Device Inventory Backfill]
disabled = 0
enableSched = 0
alert.track = 0
run_on_startup = true
description = This report backfills the all device inventory lookups. (Default timerange: last 30 days). \
The report executes on Splunk start to make sure we do not miss data as well as this make sure user do not have make manually tasks.
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | savedsearch "Device Inventory - Tenable Vuln" \
| append [| savedsearch "Device Inventory - Lansweeper"] \
| append [| savedsearch "Device Inventory - Tenable"] \
| append [| savedsearch "Device Inventory - Qualys"] \
| append [| savedsearch "Device Inventory - Sophos"] \
| append [| search `cs_windows_defender` EventCode=1151 `cs_windows_defender_max_timerange` | `cs_windows_defender_inventory_fill_search`] \
| append [| savedsearch "Device Inventory - CrowdStrike"] \
| append [| savedsearch "Device Inventory - Kaspersky"] \
| appendpipe [| where SEARCHNOTHING="SEARCHNOTHING" | append [| savedsearch "Device Inventory Gen"]]


# CleanUp
[Device Inventory Temp Lookup CleanUp]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 4 * * *
description = This report cleans up temp device inventory lookup.
dispatch.earliest_time = -7d@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_device_inventory_temp \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_device_inventory_temp


[Device Inventory Lookup CleanUp]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 5 * * 0
description = This report cleans up device inventory lookup every week (sunday early morning) and removes the devices from the inventories which did not showup in last 60 days.
dispatch.earliest_time = -60d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_device_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_device_inventory | where SEARCHNOTHING="SEARCHNOTHING" \
| append [| inputlookup cs_device_inventory_merge_logs.csv \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_device_inventory_merge_logs.csv | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_tenable_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_tenable_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_qualys_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_qualys_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_windows_defender_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_windows_defender_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_crowdstrike_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_crowdstrike_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_kaspersky_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_kaspersky_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| appendpipe [| inputlookup cs_tenable_vuln \
| join tenable_uuid [| inputlookup cs_device_inventory | search tenable_uuid=* | mvexpand tenable_uuid | fields tenable_uuid, uuid | table tenable_uuid, uuid] \
| search uuid=* | fields - uuid \
| outputlookup cs_tenable_vuln | where SEARCHNOTHING="SEARCHNOTHING"]
# Note - Sophos and Lansweeper Cleanup are not required as those lookups are always overridden completely.



# ===============
# Authentication
# ===============
[Authentication - Bruteforce Attempt for a User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A bruteforce attempt (more than 100 failures in an hour) for a perticular username. \
\
Data Collection - Any authentication data mapped with Authentication data model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.signature) as signature from datamodel=Authentication where `cs_authentication_indexes` Authentication.app!=OktaIM2:log Authentication.user!="*$" Authentication.action="failure" `cs_authentication_app_filter` `cs_bruteforce_from_user_additional_filter` by Authentication.app, Authentication.user, Authentication.src, Authentication.dest \
| `drop_dm_object_name(Authentication)` \
| appendpipe \
    [| stats sum(count) as count by app, user, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by app, user, src \
    | eval new_src = src." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(signature) as signature, values(new_*) as * by app, user \
| where count > `cs_authentication_bruteforce_attempt_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval sources=mvjoin(src, ", ") | fields - src \
| eval cyences_severity = case(count>200, "critical", count>100, "high", count>50, "medium") \
| `cs_authentication_bruteforce_attempt_for_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_bruteforce_attempt_for_user_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_authentication_indexes` tag=authentication action="failure"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_authentication_indexes` tag=authentication action="failure" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_authentication_indexes` tag=authentication action="failure" user=$row.user$
action.cyences_send_email_action = 1


[Authentication - Bruteforce Attempt from a Source]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A bruteforce attempt (more than 100 failures in an hour) from a perticular source. \
\
Data Collection - Any authentication data mapped with Authentication data model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.signature) as signature from datamodel=Authentication where `cs_authentication_indexes` Authentication.app!=OktaIM2:log Authentication.user!="*$" Authentication.action="failure" `cs_authentication_app_filter` `cs_bruteforce_from_source_additional_filter` by Authentication.app, Authentication.src, Authentication.user, Authentication.dest \
| `drop_dm_object_name(Authentication)` \
| appendpipe \
    [| stats sum(count) as count by app, src, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by app, src, user \
    | eval new_user = user." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(signature) as signature, values(new_*) as * by app, src \
| where count > `cs_authentication_bruteforce_attempt_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval users=mvjoin(user, ", ") | fields - user \
| eval cyences_severity = case(count>1000, "critical", count>500, "high", count>100, "medium") \
| eval cyences_severity = if((app=="win:unknown" or app=="win:remote") and src=="unknown" and cyences_severity=="critical", "high", cyences_severity) \
| `cs_authentication_bruteforce_attempt_from_source_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_bruteforce_attempt_from_source_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_authentication_indexes` tag=authentication action="failure"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_authentication_indexes` tag=authentication action="failure" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_authentication_indexes` tag=authentication action="failure" src=$row.src$
action.cyences_send_email_action = 1


[Authentication - Excessive Failed VPN Logins for a User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A excessive login failures (more than 20 failures in an hour) for VPN for a perticular username. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime from datamodel=Authentication where Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` AND Authentication.action="failure" by index, Authentication.app, Authentication.user, Authentication.src, Authentication.dest \
| `drop_dm_object_name(Authentication)` \
| appendpipe \
    [| stats sum(count) as count by index, app, user, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by index, app, user, src \
    | eval new_src = src." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(new_*) as * by index, app, user \
| where count > `cs_authentication_excessive_vpn_login_failure_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval sources=mvjoin(src, ", ") | fields - src \
| eval cyences_severity = case(count>200, "critical", count>100, "high", count>50, "medium", true(), "low") \
| `cs_authentication_excessive_vpn_login_failure_for_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_excessive_vpn_login_failure_for_user_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN


[Authentication - Excessive Failed VPN Logins from a Source]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A excessive login failures (more than 20 failures in an hour) for VPN from a perticular source. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime from datamodel=Authentication where Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` AND Authentication.action="failure" by index, Authentication.app, Authentication.src, Authentication.user, Authentication.dest \
| `drop_dm_object_name(Authentication)` \
| appendpipe \
    [| stats sum(count) as count by index, app, src, dest \
    | eval new_dest = dest." (".count.")" \
    | fields - count] \
| appendpipe \
    [| stats sum(count) as count by index, app, src, user \
    | eval new_user = user." (".count.")" \
    | fields - count] \
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, values(new_*) as * by index, app, src \
| where count > `cs_authentication_excessive_vpn_login_failure_limit` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval users=mvjoin(user, ", ") | fields - user \
| eval cyences_severity = case(count>1000, "critical", count>500, "high", count>100, "medium", true(), "low") \
| `cs_authentication_excessive_vpn_login_failure_from_source_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_excessive_vpn_login_failure_from_source_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by app
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" app=$row.app$
action.cyences_notable_event_action.attacker_search = | stats sum(count) as count by src
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` tag=authentication action="failure" dest_category="vpn_auth" src=$row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN


[Authentication - Successful VPN Login Outside Home Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Successful login outside home country for VPN from a perticular source. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, max(_time) as Last_Success_Login from datamodel=Authentication where Authentication.action="success" AND Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` by Authentication.user, Authentication.src, Authentication.dest \
| rename Authentication.* as * \
| iplocation src \
| where Country!=`cs_home_country` \
| `cs_confirmiplocation` \
| fillnull Country, Region, City value="-" \
| eval Location=src." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, max(Last_Success_Login) as Last_Success_Login, list(Location) as Location, values(dest) as Dest by user \
| eval cyences_severity = "medium" \
| sort - count \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_authentication_successful_vpn_login_outside_home_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_successful_vpn_login_outside_home_country_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication action="success" dest_category="vpn_auth" | iplocation src | where Country!=`cs_home_country` | `cs_confirmiplocation` 
action.cyences_notable_event_action.system_compromised_search = | stats count by Dest
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` dest=$row.Dest$ tag=authentication action="success" dest_category="vpn_auth" | iplocation src | where Country!=`cs_home_country` | `cs_confirmiplocation` 
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` user=$row.user$ tag=authentication action="success" dest_category="vpn_auth" | iplocation src | where Country!=`cs_home_country` | `cs_confirmiplocation` 
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN
action.cyences_notable_event_action.deprecated = 1
action.cyences_notable_event_action.deprecated_from_version = 4.0.0
action.cyences_notable_event_action.deprecated_replacement = Authentication - Successful VPN Login From Unusual Country


[Authentication - VPN Login Attemps Outside Working Hours]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A VPN Login Attemps Outside Working Hours. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count from datamodel=Authentication WHERE Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` by Authentication.user, Authentication.src, Authentication.action, Authentication.dest, _time \
| rename Authentication.* as * \
| eval time = _time \
| `cs_generate_time_fields_for_filter(time)` \
| where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 \
| `cs_remove_time_fields_for_filter(time)` \
| iplocation src \
| eval cyences_severity = "medium" \
| table time, cyences_severity, user, action, count, dest, src, City, Region, Country \
| `cs_human_readable_time_format(time)` \
| `cs_authentication_vpn_login_attemps_outside_working_hour_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_vpn_login_attemps_outside_working_hour_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication dest_category="vpn_auth" | eval time = _time | `cs_generate_time_fields_for_filter(time)` | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 | `cs_remove_time_fields_for_filter(time)`
action.cyences_notable_event_action.system_compromised_search = | stats count by dest
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` dest=$row.dest$ tag=authentication dest_category="vpn_auth" | eval time = _time | `cs_generate_time_fields_for_filter(time)` | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 | `cs_remove_time_fields_for_filter(time)`
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` user=$row.user$ tag=authentication dest_category="vpn_auth" | eval time = _time | `cs_generate_time_fields_for_filter(time)` | where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 | `cs_remove_time_fields_for_filter(time)`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN


[Authentication - Usual Login Location Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 1 * * 0
description = Generates the cs_authentication_usual_location.csv file with the Usual Login Location details for users. \
\
Data Collection - VPN data mapped with authentication data-model.
dispatch.earliest_time = -1w@w
dispatch.latest_time = @w
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats count from datamodel=Authentication where Authentication.action="success" AND Authentication.user!="unknown" AND `cs_public_ips(Authentication.src)` AND (sourcetype="o365:management:activity" OR sourcetype="pan:globalprotect") by Authentication.app, Authentication.user, Authentication.src, _time span=1w \
| `drop_dm_object_name(Authentication)` \
| iplocation src \
| stats sum(count) as count by user, app, Country, _time \
| table _time user app Country count \
| inputlookup cs_authentication_usual_location_intermediate.csv append=true \
| where _time > relative_time(now(), "-12w@w") \
| dedup user, app, Country, _time \
| outputlookup cs_authentication_usual_location_intermediate.csv \
| stats sum(count) as count by user, app, Country \
| table user app Country count \
| outputlookup cs_authentication_usual_location.csv


[Authentication - Successful VPN Login From Unusual Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Successful VPN Login From Unusual Country. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count from datamodel=Authentication where Authentication.dest_category="vpn_auth" AND Authentication.action="success" AND `cs_public_ips(Authentication.src)` by Authentication.app, Authentication.user, Authentication.src, Authentication.dest, _time \
| `drop_dm_object_name(Authentication)` \
| iplocation src \
| `cs_current_week_login_count(pan:globalprotect)` \
| `cs_country_login_percentage` \
| eval cyences_severity = case(percentage_login_from_country==0, "high", true(), "high") \
| table _time cyences_severity user dest src app count City Region Country percentage_login_from_country reason usual_login_location \
| `cs_authentication_successful_vpn_login_from_unusual_country_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_successful_vpn_login_from_unusual_country_filter
action.cyences_notable_event_action.contributing_events = index=* `cs_vpn_indexes` tag=authentication action="success" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_notable_event_action.system_compromised_search = | stats count by dest
action.cyences_notable_event_action.system_compromised_drilldown = index=* `cs_vpn_indexes` dest=$row.dest$ tag=authentication action="success" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = index=* `cs_vpn_indexes` user=$row.user$ tag=authentication action="success" dest_category="vpn_auth" `cs_public_ips(src)` | iplocation src | `cs_country_login_percentage`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN


[Authentication - Long Running VPN Session Disconnected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Long running VPN session disconnected detail. \
\
Data Collection - VPN logout events with eventtype cs_*_vpn_logout.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_vpn_indexes` eventtype="cs_*_vpn_logout" duration>=`cs_authentication_vpn_session_duration_limit` \
| eval SourceIP=coalesce(public_ip, src), PrivateIP=if(coalesce(private_ip, tunnelip)="0.0.0.0", null(), coalesce(private_ip, tunnelip)) \
| fillnull value="Unknown" SourceIP \
| dedup _time user SourceIP \
| iplocation SourceIP \
| eval duration = tostring(duration, "duration") \
| eval cyences_severity = "medium" \
| table _time cyences_severity user dest SourceIP PrivateIP duration City Country \
| rename dest as Dest, user as User, duration as Duration \
| `cs_authentication_vpn_long_running_session_disconnected_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_authentication_vpn_long_running_session_disconnected_filter
action.cyences_notable_event_action.contributing_events = `cs_vpn_indexes` eventtype="cs_*_vpn_logout" duration>=`cs_authentication_vpn_session_duration_limit`
action.cyences_notable_event_action.system_compromised_search = | stats count by dest
action.cyences_notable_event_action.system_compromised_drilldown = `cs_vpn_indexes` dest=$row.dest$ eventtype="cs_*_vpn_logout" duration>=`cs_authentication_vpn_session_duration_limit`
action.cyences_notable_event_action.attacker_search = | stats count by user
action.cyences_notable_event_action.attacker_drilldown = `cs_vpn_indexes` user=$row.user$  eventtype="cs_*_vpn_logout" duration>=`cs_authentication_vpn_session_duration_limit`
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = VPN


# ===============
# Linux/Unix
# ===============
[Linux - Change in Sudo Access of Local Linux Account]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
cron_schedule = 59 * * * *
counttype = number of events
quantity = 0
relation = greater than
description = This report generate lookup of linux local accounts and raise an alert when there is change in sudo access for last 60mins.\
\
Data Collection : Below two scripted inputs must be enable. \
                  Splunk_TA_nix Add-on -> usersWithLoginPrivs.sh \
                  Cyences add-on for Splunk -> sudousers.sh
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_linux_users_with_previledge` \
| table _time host UID USERNAME GID HOME_DIR \
| eval user_discovery=_time \
| stats earliest(_time) as _time latest(*) as * by host UID \
| append \
    [| search `cs_linux_sudousers` \
    | stats latest(_raw) as raw latest(_time) as sudo_discover by host \
    | rex field=raw "sudouser=(?<USERNAME>.*)" max_match=0 \
    | fields - raw \
    | mvexpand USERNAME \
    | eval sudo_access="Yes" ] \
| stats first(sudo*) as sudo*_new first(user_discovery) as user_discovery_new first(*) as * by host, USERNAME \
| appendpipe \
    [| inputlookup cs_linux_user_list.csv \
    | rename sudo_last_modified as sudo_discover,user_last_modified as user_discovery ] \
| join host type=left \
    [| tstats count where index=_internal host=*  earliest=-5m@m latest=now  by host \
    | eval internal_logs="Yes" ] \
| stats first(*) as * by host USERNAME \
| eval sudo_last_modified=case(isnull(internal_logs),sudo_discover,\
    isnull(user_discovery_new) and isnull(sudo_access),null(),\
    isnull(user_discovery_new) and isnotnull(sudo_access),now(),\
    isnull(sudo_access_new) and isnull(sudo_access),null(),\
    isnotnull(sudo_access_new) and isnull(sudo_access),sudo_discover_new,\
    isnotnull(sudo_access_new) and isnotnull(sudo_access) and sudo_access=="Yes",sudo_discover,\
    isnotnull(sudo_access_new) and isnotnull(sudo_access) and (sudo_access=="Sudo Access Revoked" OR sudo_access=="User Removed"),sudo_discover_new,\
    isnull(sudo_access_new) and isnotnull(sudo_access) and sudo_access=="Yes",now(),\
    isnull(sudo_access_new) and isnotnull(sudo_access) and (sudo_access=="Sudo Access Revoked" OR sudo_access=="User Removed"),sudo_discover) \
| eval sudo_access=case(isnull(internal_logs),sudo_access,\
    isnull(user_discovery_new) and isnull(sudo_access),null(),\
    isnull(user_discovery_new) and isnotnull(sudo_access),"User Removed",\
    isnull(sudo_access_new) and isnull(sudo_access),null(),\
    isnotnull(sudo_access_new) and isnull(sudo_access),"Yes",\
    isnotnull(sudo_access_new) and isnotnull(sudo_access) and sudo_access=="Yes",sudo_access,\
    isnotnull(sudo_access_new) and isnotnull(sudo_access) and (sudo_access=="Sudo Access Revoked" OR sudo_access=="User Removed"),"Yes",\
    isnull(sudo_access_new) and isnotnull(sudo_access) and sudo_access=="Yes","Sudo Access Revoked",\
    isnull(sudo_access_new) and isnotnull(sudo_access) and (sudo_access=="Sudo Access Revoked" OR sudo_access=="User Removed"),sudo_access) \
| eval user_status=case(isnull(internal_logs),user_status,\
    isnull(user_discovery_new) and isnull(user_discovery), null(),\
    isnotnull(user_discovery_new) and isnull(user_discovery), "User Available",\
    isnotnull(user_discovery_new) and isnotnull(user_discovery), "User Available",\
    isnull(user_discovery_new) and isnotnull(user_discovery), "User Removed") \
| eval user_last_modified=case(isnull(internal_logs),user_discovery,\
    isnull(user_discovery_new) and isnull(user_discovery), null(),\
    isnotnull(user_discovery_new) and isnull(user_discovery), user_discovery_new,\
    isnotnull(user_discovery_new) and isnotnull(user_discovery),user_discovery,\
    isnull(user_discovery_new) and isnotnull(user_discovery), now()) \
| fields - user_discovery*,sudo_discover*,sudo_access_new,internal_logs,count,sudo_last_modified_check, \
| appendpipe \
    [| outputlookup cs_linux_user_list.csv \
    | where hostname="DO-NOT-RETURN-ANYRESULTS"] \
| where sudo_last_modified>relative_time(now(),"-62m") \
| eval cyences_severity = case(sudo_access=="Yes", "high", sudo_access=="Sudo Access Revoked", "medium", true(), "low") \
| `cs_human_readable_time_format(sudo_last_modified)` \
| `cs_human_readable_time_format(user_last_modified)` \
| `cs_change_in_sudo_access_of_local_linux_account_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_change_in_sudo_access_of_local_linux_account_filter
action.cyences_notable_event_action.contributing_events = `cs_linux_sudousers` | rex field=_raw "sudouser=(?<USERNAME>.*)" max_match=0
action.cyences_notable_event_action.system_compromised_search = | stats count by host
action.cyences_notable_event_action.system_compromised_drilldown = `cs_linux_sudousers` host=$row.host$ | rex field=_raw "sudouser=(?<USERNAME>.*)" max_match=0
action.cyences_notable_event_action.attacker_search = | stats count by USERNAME
action.cyences_notable_event_action.attacker_drilldown = `cs_linux_sudousers` $row.USERNAME$ | rex field=_raw "sudouser=(?<USERNAME>.*)" max_match=0
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Linux


[Linux - cs_linux_groups Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 7 * * * *
description = Generate cs_linux_groups lookup
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_linux_groups` \
| eval new_users=if(isnull(users) OR users="","NOUSERS",users) \
| stats latest(new_*) as new_* latest(_time) as new_time by host group_name \
| eval host_status = "reporting" \
| appendpipe \
    [| inputlookup cs_linux_groups \
    | eval old_users=users \
    | stats latest(old_*) as old_* latest(status) as status latest(_time) as old_time by host group_name \
    | search status!="removed" \
    | fields - status ] \
| stats values(*) as * by host group_name \
| eventstats values(host_status) as host_status , max(new_time) as host_latest by host \
| eval status=case(isnull(old_users) AND host_status=="reporting","group_added",isnull(new_users) AND host_status=="reporting","group_removed",(new_users!=old_users) AND host_status=="reporting","group_updated",1=1,"no change") \
| search status!="no change" \
| eval _time=case(status=="group_added",new_time,status=="group_removed",host_latest,status=="group_updated",new_time) \
| eval users=case(status=="group_added",new_users,status=="group_removed",old_users,status=="group_updated",new_users) \
| table host group_name _time users status \
| outputlookup cs_linux_groups append=true
action.cyences_notable_event_action.products = Linux

[Linux - cs_linux_users Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 7 * * * *
description = Generate cs_linux_users lookup
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_linux_users` UID!=""\
| eval new_COMMAND_SHELL = COMMAND_SHELL, new_GID=GID, new_HOME_DIR=HOME_DIR,new_SUDOACCESS=SUDOACCESS,new_USER_INFO=USER_INFO,new_USERNAME=USERNAME\
| stats latest(new_*) as new_* latest(_time) as new_time by host UID \
| eval host_status = "reporting" \
| appendpipe \
    [| inputlookup cs_linux_users \
    | eval old_COMMAND_SHELL = COMMAND_SHELL, old_GID=GID, old_HOME_DIR=HOME_DIR,old_SUDOACCESS=SUDOACCESS,old_USER_INFO=USER_INFO,old_USERNAME=USERNAME\
    | stats latest(old_*) as old_* latest(status) as status latest(_time) as old_time by host UID \
    | search status!="removed" \
    | fields - status ] \
| stats values(*) as * by  host UID \
| eventstats values(host_status) as host_status , max(new_time) as host_latest by host \
| eval status=case(isnull(old_USERNAME) AND host_status=="reporting","user_added",isnull(new_USERNAME) AND host_status=="reporting","user_removed",(new_COMMAND_SHELL!=old_COMMAND_SHELL OR new_HOME_DIR!=old_HOME_DIR OR new_SUDOACCESS!=old_SUDOACCESS OR new_USER_INFO!=old_USER_INFO OR new_GID!=old_GID OR new_USERNAME!=old_USERNAME ) AND host_status=="reporting","user_updated",1=1,"no change") \
| search status!="no change" \
| eval _time=case(status=="user_added",new_time,status=="user_removed",host_latest,status=="user_updated",new_time) \
| eval USERNAME=case(status=="user_added",new_USERNAME,status=="user_removed",old_USERNAME,status=="user_updated",new_USERNAME) \
| eval COMMAND_SHELL=case(status=="user_added",new_COMMAND_SHELL,status=="user_removed",old_COMMAND_SHELL,status=="user_updated",new_COMMAND_SHELL) \
| eval HOME_DIR=case(status=="user_added",new_HOME_DIR,status=="user_removed",old_HOME_DIR,status=="user_updated",new_HOME_DIR) \
| eval SUDOACCESS=case(status=="user_added",new_SUDOACCESS,status=="user_removed",old_SUDOACCESS,status=="user_updated",new_SUDOACCESS) \
| eval USER_INFO=case(status=="user_added",new_USER_INFO,status=="user_removed",old_USER_INFO,status=="user_updated",new_USER_INFO) \
| eval GID=case(status=="user_added",new_GID,status=="user_removed",old_GID,status=="user_updated",new_GID) \
| table host UID _time USERNAME COMMAND_SHELL HOME_DIR SUDOACCESS USER_INFO GID status \
| outputlookup cs_linux_users append=true
action.cyences_notable_event_action.products = Linux

[Linux - User Added/Updated/Deleted]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 10 * * * *
description = A Linux User Added/Updated/Deleted \
\
Data Collection - TA-cyences add-on.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_linux_users\
| where _time>relative_time(now(),"-h") | table host UID _time USERNAME COMMAND_SHELL HOME_DIR SUDOACCESS USER_INFO GID status \
| eval cyences_severity = case(UID=0, "high",1=1, "medium") \
| `cs_change_in_user_linux_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_change_in_user_linux_filter
action.cyences_notable_event_action.contributing_events = `cs_linux_users` 
action.cyences_notable_event_action.system_compromised_search = | stats list(*) as * by host UID
action.cyences_notable_event_action.system_compromised_drilldown = `cs_linux_users` host=$row.host$ UID=$row.UID$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Linux


[Linux - Group Added/Updated/Deleted]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 10 * * * *
description = A Linux Group Added/Updated/Deleted \
\
Data Collection - TA-cyences add-on.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_linux_groups\
| where _time>relative_time(now(),"-h") | table _time host group_name users status \
| eval cyences_severity = case(group_name="root", "high",1=1, "medium") \
| `cs_change_in_group_of_linux_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_change_in_group_of_linux_filter
action.cyences_notable_event_action.contributing_events = `cs_linux_groups` 
action.cyences_notable_event_action.system_compromised_search = | stats list(*) as * by host group_name
action.cyences_notable_event_action.system_compromised_drilldown = `cs_linux_groups` host=$row.host$ group_name=$row.group_name$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Linux

# ===============
# AWS
# ===============
# Reports
[AWS - AWS Account Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 * * * *
description = This report is generating lookup containing AWS account info \
\
Data Collection - The AWS data needs to be collected via the Splunk Add-On for AWS (https://splunkbase.splunk.com/app/1876/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
# This time-range does not apply in the search as it is given as part of search-query
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_account_summary`| dedup name, account_id | table name, account_id | inputlookup cs_all_aws_account_ids.csv append=true | dedup name, account_id | outputlookup cs_all_aws_account_ids.csv
action.cyences_notable_event_action.products = AWS


# ===============
# Cisco IOS
# ===============
[Cisco IOS - New Connection For User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert will show the new connection to Cisco IOS device. \
\
Data Collection - Cisco IOS data (cisco:ios sourcetype).
dispatch.earliest_time = -35m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT" \
| rex "CONNECT:\s+(?<message>.*)\s+source\s+(?<src>[^\s]+)\s+destination\s+(?<dest>[^\s]+)" \
| eval cyences_severity = "low" \
| table _time cyences_severity message src dest \
| `cs_cisco_ios_new_connection_for_user_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_cisco_ios_new_connection_for_user_filter
action.cyences_notable_event_action.contributing_events = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT" $row.dest$
action.cyences_notable_event_action.attacker_search = | stats count by src
action.cyences_notable_event_action.attacker_drilldown = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT" $row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Cisco IOS


[Cisco IOS - Device Failed Login]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert will show the failed login to Cisco IOS device. \
\
Data Collection - Cisco IOS data (cisco:ios sourcetype).
dispatch.earliest_time = -35m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT" \
| rex "REJECT:\s+(?<message>.*)\s+source\s+(?<src>[^\s]+)\s+destination\s+(?<dest>[^\s]+)"  \
| eval cyences_severity = "low" \
| table _time cyences_severity message src dest \
| `cs_cisco_ios_device_failed_login_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_cisco_ios_device_failed_login_filter
action.cyences_notable_event_action.contributing_events = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count by dest
action.cyences_notable_event_action.system_compromised_drilldown = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT" $row.dest$
action.cyences_notable_event_action.attacker_search = | stats count by src
action.cyences_notable_event_action.attacker_drilldown = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT" $row.src$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = Cisco IOS



# ==============
# GSuite
# ==============
[G Suite - Multiple Password Changes in Short Time Period]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show if user made multiple password changes in the last hours. \
\
Data Collection - G Suite Data with G Suite Input Add-on (https://splunkbase.splunk.com/app/3793/)
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gsuite_login_events` event_name="password_edit" | stats latest(_time) as _time, count, values(ipAddress) as ipAddress by user | where count>=`cs_gsuite_multiple_password_changes_count_limit` \
| eval cyences_severity = case(count>5*`cs_gsuite_multiple_password_changes_count_limit`, "critical", count>3*`cs_gsuite_multiple_password_changes_count_limit`, "high", true(), "medium") \
| sort - count \
| `cs_gsuite_multiple_password_changes_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gsuite_multiple_password_changes_filter
action.cyences_notable_event_action.contributing_events = `cs_gsuite_login_events` event_name="password_edit"
action.cyences_notable_event_action.system_compromised_search = | stats sum(count) as count, values(ipAddress) as ipAddress by user
action.cyences_notable_event_action.system_compromised_drilldown = `cs_gsuite_login_events` event_name="password_edit" user=$row.user$
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = G Suite


[G Suite - Bulk User Creation or Deletion]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert will show if users being created or deleted in bulk. \
\
Data Collection - G Suite Data with G Suite Input Add-on (https://splunkbase.splunk.com/app/3793/)
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_gsuite` sourcetype="gapps:report:admin" eventtype IN ("gapps_aa_create_user", "gapps_aa_delete_user") \
| rename "events{}.parameters{}.USER_EMAIL" as user, "actor.email" as admin \
| fields _time, action, admin, user \
| eval users_created=if(action=="created", user, null()), users_deleted=if(action=="deleted", user, null()) \
| stats count as total_actions, count(eval(action=="created")) as no_users_created, values(users_created) as users_created, count(eval(action=="deleted")) as no_users_deleted, values(users_deleted) as users_deleted by admin \
| where total_actions>=`cs_gsuite_bulk_user_creation_deletion_count_limit` \
| eval cyences_severity = case(count>5*`cs_gsuite_bulk_user_creation_deletion_count_limit`, "critical", count>3*`cs_gsuite_bulk_user_creation_deletion_count_limit`, "high", true(), "medium") \
| `cs_gsuite_bulk_user_creation_deletion_filter`
action.cyences_notable_event_action = 1
action.cyences_notable_event_action.param.filter_macro_name = cs_gsuite_bulk_user_creation_deletion_filter
action.cyences_notable_event_action.contributing_events = `cs_gsuite` sourcetype="gapps:report:admin" eventtype IN ("gapps_aa_create_user", "gapps_aa_delete_user")
action.cyences_notable_event_action.attacker_search = | stats sum(total_actions) as count by admin
action.cyences_notable_event_action.attacker_drilldown = `cs_gsuite` sourcetype="gapps:report:admin" eventtype IN ("gapps_aa_create_user", "gapps_aa_delete_user") | rename "events{}.parameters{}.USER_EMAIL" as user, "actor.email" as admin | search admin=$row.admin|s$ | stats count by user
action.cyences_send_email_action = 1
action.cyences_notable_event_action.products = G Suite
