# Categaries #
# 1. Ransomware
# 2. Endpoint Compromise
# 3. Network Compromise
# 4. Palo Alto Firewall
# 5. Active Directoy and Windows
# 6. O365
# 7. Credential Comprimise
# 8. Sophos Central (Antivirus)
# 9. Splunk Admin
# 10. Windows Defender (Antivirus)


# Cron Details
# -------------------
# Every 10 minutes
#   - 1, 3, 4, 5, 6 and 8 's multiples
# Every 15 minutes
#   - 2, 17, 32, 47 th minutes
#   - 7, 22, 37, 52 th minutes
# Every 30 minutes
#   - 9, 39th minutes or 19, 49th minutes
# Hourly
#   - 29, 59th minutes
# Daily, Weekly, Monthly, Yearly
#   - At 0th Minute

# Severity Chart
# -----------------
# 5 - Critical
# 4 - High
# 3 - Medium
# 2 - Low
# 1 - Info



# ============
# Ransomware
# ============
# Reports
[Ransomware - Calculate UpperBound for Spike in File Writes]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for Ransomware - Spike in File Writes alert (Runs everyday at 4 AM) - Generates the upperBound value of file writes for each host \
For more information refer to Ransomware - Spike in File Writes alert. \
Warning - Do not run enable this search without enabling data-model acceleration on Endpoint data-model as this search will reduce the system performance without acceleration.
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count FROM datamodel=Endpoint.Filesystem where Filesystem.action=created by _time span=1h, Filesystem.dest | `drop_dm_object_name(Filesystem)` \
| eventstats max(_time) as maxtime \
| stats avg(eval(if(_time<relative_time(maxtime, "-1d@d"), count,null))) as avg stdev(eval(if(_time<relative_time(maxtime, "-1d@d"), count, null))) as stdev by "dest" \
| eval upperBound=(avg+stdev*4) \
| outputlookup cs_ransomware_file_writes_upperbound.csv


# Alerts
[Ransomware - Spike in File Writes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = Identify the spike in the file writes which may be Ransomware writing encrypted files. \
Warning - Enable the Report Ransomware - Calculate UpperBound for Spike in File Writes before enabling this search. And understand False Positive before enabling the alert. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza \
\
False Positive - Installation of any new applications on your hosts or are copying a large number of files can also give spike in the file writes.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count FROM datamodel=Endpoint.Filesystem where Filesystem.action=created by Filesystem.dest | `drop_dm_object_name(Filesystem)` \
| lookup cs_ransomware_file_writes_upperbound.csv dest OUTPUT upperBound | where count>upperBound \
| `cs_spike_in_file_writes_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Spike in File Writes


[Ransomware - Endpoint Compromise - Fake Windows Processes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 1,11,21,31,41,51 * * * *
description = Identify the processes which try to fake itself as a Windows process.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.process_path !="C:\\Windows\\System32*" Processes.process_path !="C:\\Windows\\SysWOW64*" by Processes.user Processes.dest Processes.process_name Processes.process_id Processes.process_path Processes.parent_process_name Processes.process_hash \
| `drop_dm_object_name("Processes")` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)` \
| `is_windows_system_file` \
| `cs_system_processes_run_from_unexpected_locations_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Endpoint Compromise - Fake Windows Processes


[Ransomware - Endpoint Compromise - Network Compromise - TOR Traffic]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 3,13,23,33,43,53 * * * *
description = This search will look for firewall data (Network_Traffic datamodel) to detect TOR traffic.\
\
Data Collection - Any Firewall data that fits with CIM definition.\
- The search will look for app=tor value.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.app=tor AND All_Traffic.action=allowed by All_Traffic.src_ip All_Traffic.dest_ip All_Traffic.dest_port All_Traffic.action \
| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name("All_Traffic")` \
| `cs_tor_traffic_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Endpoint Compromise - Network Compromise - TOR Traffic


[Ransomware - Common Ransomware File Extensions]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4,14,24,34,44,54 * * * *
description = Based on lookup from ES Content Update App, this search will try to identify Ransomware's common file extensions\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name \
| `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` \
| rex field=file_name "(?<file_extension>\.[^\.]+)$" | `ransomware_extensions` \
| `cs_common_ransomware_extensions_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Common Ransomware File Extensions


[Ransomware - Scheduled tasks used in BadRabbit ransomware]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 6,16,26,36,46,56 * * * *
description = The query tried to identify the BadRabbit ransomware based on the processes data. It tries to see data from the schtasks.exe process and some other keywords.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (uses data-model query)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process= "*create*"  OR Processes.process= "*delete*") by Processes.dest Processes.parent_process Processes.process_name Processes.user \
| `drop_dm_object_name("Processes")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` \
| search (process=*rhaegal* OR process=*drogon* OR *viserion_*) \
| `cs_scheduled_tasks_used_in_badrabbit_ransomware_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Scheduled tasks used in BadRabbit ransomware


[Ransomware - Common Ransomware Notes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 8,18,28,38,48,58 * * * *
description = Based on lookup from ES Content Update App, this search will try to identify common ransomware notes.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name \
| `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` \
| rex field=file_name "(?<file_extension>\.[^\.]+)$" | `ransomware_notes` \
| `cs_common_ransomware_notes_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Common Ransomware Notes


[Ransomware - Endpoint Compromise - USN Journal Deletion on Windows]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 1,11,21,31,41,51 * * * *
description = The fsutil.exe application is a legitimate Windows utility used to perform tasks related to the file allocation table (FAT) and NTFS file systems. The update sequence number (USN) change journal provides a log of all changes made to the files on the disk. This search looks for fsutil.exe deleting the USN journal.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (uses data-model query)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fsutil.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest \
| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` \
| search process="*deletejournal*" AND process="*usn*" \
| `cs_usn_journal_deletion_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Endpoint Compromise - USN Journal Deletion on Windows


[Ransomware - Windows - Windows Event Log Cleared]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 3,13,23,33,43,53 * * * *
description = Check for WinEventLog to see events that show WinEventLogs are cleared.\
\
Data Collection - Splunk_TA_Windows - WinEventLog://Security stanza and WinEventLog://System stanza\
\
False Positive - The administrator might have intentionally cleared the logs.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (`cs_wineventlog_security` (EventID=1102 OR EventID=1100)) OR (`cs_wineventlog_system` EventID=104) \
| rex max_match=2 field=_raw "<Channel>(?<LogName>[^<]+)</Channel>" | rex max_match=2 field=_raw "<SubjectUserName>(?<User>[^<]+)</SubjectUserName>" | eval LogName=mvjoin(LogName, " - ") | eval User=if(isnull(User), "-", User) \
| stats count min(_time) as firstTime max(_time) as lastTime by dest, EventID, LogName, User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` \
| `cs_windows_event_log_cleared_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Windows - Windows Event Log Cleared


[Ransomware - Endpoint Compromise - Windows - WMI Lateral Movement]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4,14,24,34,44,54 * * * *
description = Identifies the WMI lateral movement on Windows machines. These events might be due to the Ransomware activity on the host. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process create information)
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=1 Image=*wmic* CommandLine="*/node*" CommandLine="*process call create*" \
| table TimeCreated, Computer, User, signature, direction, Image, CommandLine \
| `cs_windows_wmi_lateral_movement_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Endpoint Compromise - Windows - WMI Lateral Movement



# ================
# Windows / AD
# ================
# Reports
[Windows - Hosts Lookup Gen]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 2 * * 0
description = Supporting Report for Windows update check alert (Runs every Sunday at 3 AM) - Generates the host list in the lookup
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_system` | dedup host | table host | append [| inputlookup all_windows_hosts.csv] | dedup host | outputlookup all_windows_hosts.csv


# Alerts
[Windows - Hosts Missing Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 3 1 * *
description = Which hosts are not having the latest update from last month (Runs 1st of every month and check update for previous month)\
\
Data collection - WinEventLog System events (EventCode=19)
dispatch.earliest_time = -31d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_system` EventCode=19 | dedup host | table host | eval updated="true" | append [| inputlookup all_windows_hosts.csv | table host] \
| stats first(updated) as updated by host | search NOT updated="true" \
| `cs_windows_host_missing_update_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows
action.summary_index.alert_name = Windows - Hosts Missing Update


[Windows - Endpoint Compromise - Windows Firewall Disabled Event]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 4 * * *
description = Windows Firewall Disabled Event from WinEventLog\
\
Data Collection - WinEventLog Security Events (EventCode=4950)
dispatch.earliest_time = -1d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode=4950 SettingType="Enable Windows Defender Firewall" SettingValue=No | table host, EventCode, ProfileChanged, SettingType, SettingValue\
| `cs_windows_firewall_disabled_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows
action.summary_index.alert_name = Windows - Endpoint Compromise - Windows Firewall Disabled Event



# ==============
# Network Compromise
# ==============
[Network Compromise - Basic Scanning]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = Looks for hosts that reach out to more than 500 hosts, or more than 100 ports in a short period of time, indicating scanning.\
\
Data Collection - Palo Alto Networks firewalls, and with any other device that uses the Splunk common information model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa) \
| stats dc(dest_port) as num_dest_port dc(dest_ip) as num_dest_ip by sourcetype, src_ip\
| where num_dest_port > 100 OR num_dest_ip > 500\
| `cs_scanning_basic_scanning_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Network Compromise
action.summary_index.alert_name = Network Compromise - Basic Scanning



# ==============
# Palo Alto Firewall
# ==============
[Palo Alto Firewall - Network Compromise - Palo Alto DNS Sinkhole]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = PalotAlto Firewall DNS Sinkhole Alert when outbound traffic goes to 72.5.65.111. \
\
Data Collection - Palo Alto Networks firewalls traffic data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:traffic" dest_ip="72.5.65.111" \
| stats count, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(src_port) as dc_src_port, values(dest_port) as dest_port, values(app) as app, values(rule) as rule, values(http_category) as http_category by src_ip \
| `cs_palo_dns_sinkhole_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Palo Alto Firewall
action.summary_index.alert_name = Palo Alto Firewall - Network Compromise - Palo Alto DNS Sinkhole


# Reports
[Palo Alto Firewall - Network Compromise - DDoS Attack Prevented]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Palo Alto Firewall prevented DDoS attack events. It searches for log_subtype=packet.\
\
Data Collection - Palo Alto Networks firewalls threat data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:threat" log_subtype=packet \
| stats count, latest(_time) as last_seen, dc(src_port) as dc_src_port, dc(dest_ip) as dc_dest_ip, values(signature) as signature, values(dvc) as dvc, values(dvc_name) as dvc_name, values(src_location) as src_location, dc(dest) as dc_dest, values(action) as action by src | sort - count \
| `cs_palo_ddos_prevented_filter`


[Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Network traffic coming from blocked IPs. The ip_blocked_list lookup is being used to identify the blocked IPs.\
\
Data Collection: Palo Alto pan:traffic sourcetype data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:traffic" action="allowed" `cs_filter_private_ips` packets_in>0 \
| stats count, latest(_time) as last_seen, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(dvc_name) as dc_dvc_name, dc(src_port) as dc_src_port, values(src_location) as src_location, sum(packets_in) as packets_in, sum(packets_out) as packets_out, dc(dest_ip) as dc_dest_ip, values(dest_port) as dest_port, dc(dest_location) as dc_dest_location, values(app) as app, values(http_category) as http_category, values(rule) as firewall_rule by src_ip \
| `cs_palo_search_blocked_ip("src_ip")` | sort -count \
| `cs_palo_blocked_ip_inbound_filter`


[Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Network traffic going to blocked IPs. The ip_blocked_list lookup is being used to identify the blocked IPs.\
\
Data Collection: Palo Alto pan:traffic sourcetype data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:traffic" action="allowed" `cs_filter_private_ips` packets_out>0 \
| stats count, latest(_time) as last_seen, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(dvc_name) as dc_dvc_name, dc(dest_port) as dc_dest_port, values(dest_location) as dest_location, sum(packets_in) as packets_in, sum(packets_out) as packets_out, dc(src_ip) as dc_src_ip, dc(src_port) as dc_src_port, dc(src_location) as dc_src_location, values(app) as app, values(http_category) as http_category, values(rule) as firewall_rule by dest_ip \
| `cs_palo_search_blocked_ip("dest_ip")` | sort -count \
| `cs_palo_blocked_ip_outbound_filter`


[Dynamically Update Blocked IPs with HoneyDB]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 29 */2 * * *
description = Runs every 2 hours and update the blocked IP lookup (ip_blocked_list.csv) with HoneyDB.\
Enable this report to dynamically update the lookup.
dispatch.earliest_time = 0
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | honeydblookupgen update_lookup=true generate_events=false


[Palo Alto Firewall - Malicious IP List Gen]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 2,17,32,47 * * * *
description = Based on various firewall activities like DDoS attack or it is an already blocked IP address and connecting through multiple firewalls this report will create a list of bad IP addresses.\
The report runs every 15 minutes for last 4 hours. (To cover blocked IPs that is trying to connect to more than 2 firewall devices.) \
\
Note - Enable below three reports to make use of this report.\
1. Palo Alto Firewall - Network Compromise - DDoS Attack Prevented\
2. Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs\
3. Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs
dispatch.earliest_time = -4h@m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | savedsearch "Palo Alto Firewall - Network Compromise - DDoS Attack Prevented" | rename src as ip, src_location as ip_location, dc_src_port as no_of_ports_used, dc_dest_ip as no_of_victims | table ip, no_of_ports_used, no_of_victims, ip_location, last_seen | eval description="Involved in DDoS Attack" \
| append [| savedsearch "Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs" | where dc_dvc_name>2 | rename src_ip as ip, dc_src_port as no_of_ports_used, src_location as ip_location, dc_dest_ip as no_of_victims | table ip, no_of_ports_used, no_of_victims, ip_location, last_seen | eval description="Incoming traffic into multiple firewalls from this blocked IP"] \
| append [| savedsearch "Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs" | where dc_dvc_name>2 | rename dest_ip as ip, dc_dest_port as no_of_ports_used, dest_location as ip_location, dc_src_ip as no_of_victims | table ip, no_of_ports_used, no_of_victims, ip_location, last_seen | eval description="Outgoing traffic through multiple firewalls to this blocked IP", last_seen=now()] \
| inputlookup append=true cs_malicious_ip_list.csv | dedup ip sortby -last_seen \
| `cs_palo_malicious_ip_list_filter_old_results` \
| `cs_palo_malicious_ip_list_filter` \
| outputlookup cs_malicious_ip_list.csv



# ==============
# Office 365 (O365)
# ==============
[O365 - DLP event in Exchange]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 0,6,12,18 * * *
description = O365 DLP (Data Loss Prevention) event in Exchange (Emails)\
\
Data Collection - O365 management activity data (Splunk Add-on for O365). The user has to enable the DLP rules on the O365 (https://docs.microsoft.com/en-us/microsoft-365/compliance/create-test-tune-dlp-policy?view=o365-worldwide).\
\
False Positive - The query itself does not have any false positive but DLP rules on O365 may have false positives.
dispatch.earliest_time = -362m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` Workload=Exchange UserId=DlpAgent \
| rename "ExchangeMetaData.From" as From, "ExchangeMetaData.To{}" as To, "ExchangeMetaData.CC{}" as CC, "ExchangeMetaData.BCC{}" as BCC, "ExchangeMetaData.Subject" as Subject, "PolicyDetails{}.PolicyName" as PolicyName, "PolicyDetails{}.Rules{}.RuleName" as RuleName, "PolicyDetails{}.Rules{}.Actions{}" as RuleActions, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.Location" as SensitiveInformationLocation, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.SensitiveInformationTypeName" as SensitiveInformationType, "ExchangeMetaData.FileSize" as fs \
| convert auto(fs) | eval "Email Size (KB)"=round(tonumber(fs)/1024, 2) \
| table _time, host, Subject, From, To, CC, BCC, "Email Size (KB)", PolicyName, RuleName, RuleActions, SensitiveInformationType, SensitiveInformationLocation \
| `cs_o365_dlp_exchange_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - DLP event in Exchange


[O365 - DLP event in SharePoint]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 0,6,12,18 * * *
description = O365 DLP (Data Loss Prevention) event in SharePoint\
\
Data Collection - O365 management activity data (Splunk Add-on for O365). The user has to enable the DLP rules on the O365 (https://docs.microsoft.com/en-us/microsoft-365/compliance/create-test-tune-dlp-policy?view=o365-worldwide).\
\
False Positive - The query itself does not have any false positive but DLP rules on O365 may have false positives.
dispatch.earliest_time = -362m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` Workload=SharePoint UserId=DlpAgent \
| rename "SharePointMetaData.From" as From, "SharePointMetaData.FileName" as FileName, "SharePointMetaData.FileOwner" as FileOwner, "SharePointMetaData.DocumentLastModifier" as User, "SharePointMetaData.FilePathUrl" as FilePathUrl, "PolicyDetails{}.PolicyName" as PolicyName, "PolicyDetails{}.Rules{}.RuleName" as RuleName, "PolicyDetails{}.Rules{}.Actions{}" as RuleActions, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.Location" as SensitiveInformationLocation, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.SensitiveInformationTypeName" as SensitiveInformationType \
| table _time, host, FileName, From, User, FileOwner, FilePathUrl, PolicyName, RuleName, RuleActions, SensitiveInformationType, SensitiveInformationLocation \
| `cs_o365_dlp_sharepoint_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - DLP event in SharePoint



# ======================
# Credential Compromise
# ======================
[Credential Compromise - Windows - Credential Dumping through LSASS Access]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = Identifies the credential dumping on Windows with LSASS access. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=10
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe (GrantedAccess=0x1010 OR GrantedAccess=0x1410) \
| stats count min(_time) as firstTime max(_time) as lastTime by Computer, SourceImage, SourceProcessId, TargetImage, TargetProcessId, EventCode, GrantedAccess \
| rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` \
| `cs_detect_credential_dumping_through_lsass_access_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Credential Compromise
action.summary_index.alert_name = Credential Compromise - Windows - Credential Dumping through LSASS Access


[Credential Compromise - Windows - Credential Dumping via Symlink to Shadow Copy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = Identifies the credential dumping on Windows via symlink to shadow copy. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=cmd.exe Processes.process=*mklink* Processes.process=*HarddiskVolumeShadowCopy* by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id \
| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` \
| `cs_credential_dumping_via_symlink_to_shadow_copy_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Credential Compromise
action.summary_index.alert_name = Credential Compromise - Windows - Credential Dumping via Symlink to Shadow Copy


[Credential Compromise - Windows - Credential Dumping via Copy Command from Shadow Copy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = Identifies the credential dumping via copy command from shadow copy. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=cmd.exe (Processes.process=*\\system32\\config\\sam* OR Processes.process=*\\system32\\config\\security* OR Processes.process=*\\system32\\config\\system* OR Processes.process=*\\windows\\ntds\\ntds.dit*) by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id \
| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` \
| `cs_credential_dumping_via_copy_command_from_shadow_copy_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Credential Compromise
action.summary_index.alert_name = Credential Compromise - Windows - Credential Dumping via Copy Command from Shadow Copy


[Credential Compromise - Windows - Credential Dump From Registry via Reg exe]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = Identifies the credential dump from registry via reg exe. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=reg.exe OR Processes.process_name=cmd.exe) Processes.process=*save* (Processes.process=*HKEY_LOCAL_MACHINE\\Security* OR Processes.process=*HKEY_LOCAL_MACHINE\\SAM* OR Processes.process=*HKEY_LOCAL_MACHINE\\System* OR Processes.process=*HKLM\\Security* OR Processes.process=*HKLM\\System* OR Processes.process=*HKLM\\SAM*) by Processes.user Processes.process_name Processes.process Processes.dest \
| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` \
| `cs_attempted_credential_dump_from_registry_via_reg_exe_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Credential Compromise
action.summary_index.alert_name = Credential Compromise - Windows - Credential Dump From Registry via Reg exe



# ======================
# Sophos Central
# ======================
[Sophos - Endpoint Not Protected by Sophos]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = Alert when Sophos endpoint is not protected. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/)
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::NotProtected" \
| stats count, latest(_time) as latest_event, values(src_ip) as src_ip, values(suser) as user by host, dhost | eval latest_event=strftime(latest_event, "%F %T") | sort -count \
| `cs_sophos_endpoint_not_protected_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Sophos
action.summary_index.alert_name = Sophos - Endpoint Not Protected by Sophos


[Sophos - Sophos RealTime Protection Disabled]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = Alert when real-time protection is disabled on Sophos endpoint. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/) \
\
False Positive - Admin might have manually disabled the real-time protection.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::SavDisabled" \
| stats count, latest(_time) as latest_event, values(src_ip) as src_ip, values(suser) as user by host, dhost | eval latest_event=strftime(latest_event, "%F %T") | sort -count \
| `cs_sophos_realtime_protection_disabled_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Sophos
action.summary_index.alert_name = Sophos - Sophos RealTime Protection Disabled


[Sophos - Sophos Service is not Running]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = Alert when Sophos endpoint service is not running. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/) \
\
False Positive - Admin might have manually stopped the sophos on the endpoint.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::ServiceNotRunning" \
| stats count, latest(_time) as latest_event, values(src_ip) as src_ip, values(suser) as user by host, dhost | eval latest_event=strftime(latest_event, "%F %T") | sort -count \
| `cs_sophos_service_not_running_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Sophos
action.summary_index.alert_name = Sophos - Sophos Service is not Running


[Sophos - Failed to clean up threat by Sophos]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = Alert when Sophos endpoint failed to clean-up threat. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/)
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type IN ("Event::Endpoint::Threat::CleanupFailed", "Event::Endpoint::CoreCleanFailed", "Event::Endpoint::CoreHmpaCleanFailed", "Event::Endpoint::CoreSystemCleanFailed") \
| stats count, latest(_time) as latest_event, values(name) as threat, values(src_ip) as src_ip, values(suser) as user by host, dhost | eval latest_event=strftime(latest_event, "%F %T") | sort -count \
| `cs_sophos_failed_to_cleanup_threat_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Sophos
action.summary_index.alert_name = Sophos - Failed to clean up threat by Sophos



# ======================
# Windows Defender
# ======================
[Windows Defender - Endpoint Not Protected by Windows Defender]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = Alert when Windows Defender endpoint is not protected. \
\
Data Collection - Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/) - WinEventLog://Microsoft-Windows-Windows Defender/Operational stanza
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode IN (2042, 5008, 5012) | dedup host \
| eval EventCodeDescription=case(EventCode=2042, "The antimalware engine no longer supports this operating system, and is no longer protecting your system from malware.", EventCode=5012, "Scanning for viruses is disabled.", EventCode=5008, "The antimalware engine encountered an error and failed.") \
| table _time, host, EventCode, EventCodeDescription \
| `cs_windows_defender_endpoint_not_protected`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows Defender
action.summary_index.alert_name = Windows Defender - Endpoint Not Protected by Windows Defender


[Windows Defender - Windows Defender RealTime Protection Disabled or Failed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = Alert when Windows Defender endpoint is not protected. \
\
Data Collection - Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/) - WinEventLog://Microsoft-Windows-Windows Defender/Operational stanza
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` (EventCode IN (5001, 3002) OR (EventCode=1151 AND RTP_state!="Enabled")) | dedup host \
| eval EventCodeDescription=case(EventCode=5001, "Real-time protection is disabled.", EventCode=1151, "Endpoint Protection client health report shows non enabled status for real-time protection.", EventCode=3002, "Real-time protection encountered an error and failed.") \
| eval RealTimeProtectionStatus=case(EventCode=5001, "Disabled", EventCode=1151, RTP_state, EventCode=3002, "Failed") \
| table _time, host, EventCode, EventCodeDescription, RealTimeProtectionStatus \
| `cs_windows_defender_realtime_protection_disabled_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows Defender
action.summary_index.alert_name = Windows Defender - Windows Defender RealTime Protection Disabled or Failed



# ======================
# Splunk Admin
# ======================
[Splunk Admin - Missing Data in the Index]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = Generates the indexes asset lookup (cs_indexes.csv) and also alerts when there is missing data in any of the indexes in last 60 minutes. \
\
Data Collection - It uses the index=* and do not require specific data collection.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_all_indexes` | stats max(_time) as last_event, dc(sourcetype) as no_sourcetypes, dc(host) as no_hosts by index \
| inputlookup append=true cs_indexes.csv \
| stats max(last_event) as last_event, last(no_sourcetypes) as no_sourcetypes, last(no_hosts) as no_hosts, last(sourcetypes) as sourcetypes, last(hosts) as hosts by index \
| addinfo | eval status = if(last_event < (info_max_time - 3600), "Missing", "Active") | eval status=if(status="Active" AND no_sourcetypes<sourcetypes, "Missing Sourcetypes", status) | eval status=if(status="Active" AND no_hosts<hosts, "Missing Hosts", status) \
| eval sourcetypes=no_sourcetypes, hosts=no_hosts \
| fields - info_max_time, info_min_time, info_search_time, info_sid, no_sourcetypes, no_hosts \
| appendpipe [| outputlookup cs_indexes.csv | where index="DO-NOT-RETURN-ANYRESULTS"] \
| where status="Missing" \
| eval last_event=strftime(last_event, "%F %T") \
| `cs_splunk_admin_missing_indexes_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Splunk Admin
action.summary_index.alert_name = Splunk Admin - Missing Data in the Index


[Splunk Admin - Missing Forwarder]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = Generates the forwarder asset lookup (cs_forwarders.csv) and also alerts when there is missing forwarder (based on _internal index data) in last 15 minutes. \
\
Data Collection - It uses the index=_internal and do not require specific data collection. But if the environment do not have access to _internal index might break this alert.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (index=_internal sourcetype=splunkd (connectionType=cooked OR connectionType=cookedSSL) fwdType=* group=tcpin_connections guid=* ) \
| stats values(fwdType) as forwarder_type, latest(version) as version, values(arch) as arch, values(os) as os, max(_time) as last_connected, sum(kb) as new_sum_kb, avg(tcp_KBps) as new_avg_tcp_kbps, avg(tcp_eps) as new_avg_tcp_eps by guid, hostname \
| inputlookup append=true cs_forwarders.csv \
| stats values(forwarder_type) as forwarder_type, max(version) as version, values(arch) as arch, values(os) as os, max(last_connected) as last_connected, values(new_sum_kb) as sum_kb, values(new_avg_tcp_kbps) as avg_tcp_kbps, values(new_avg_tcp_eps) as avg_tcp_eps by guid, hostname \
| addinfo | eval status = if(last_connected < (info_max_time - 900), "Missing", "Active") \
| appendpipe [| outputlookup cs_forwarders.csv | where hostname="DO-NOT-RETURN-ANYRESULTS"] \
| where status="Missing" \
| fields - guid, sum_kb, avg_tcp_kbps, avg_tcp_eps, info_max_time, info_min_time, info_search_time, info_sid \
| eval last_connected=strftime(last_connected, "%F %T") \
| `cs_splunk_admin_missing_forwarders_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Splunk Admin
action.summary_index.alert_name = Splunk Admin - Missing Forwarder
