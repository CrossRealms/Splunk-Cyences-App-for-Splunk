# Categaries #
# 1. Ransomware
# 2. Endpoint Compromise
# 3. Network Compromise
# 4. Palo Alto Firewall
# 5. Active Directoy and Windows
# 6. O365
# 7. Email
# 8. Credential Comprimise
# 9. Sophos Central (Antivirus)
# 10. Windows Defender (Antivirus)
# 11. CrowdStrike (Antivirus)
# 12. Authentication
# 13. Linux/Unix
# 14. AWS
# 15. O365 Defender ATP
# 16. Cisco IOS


# Cron Details
# -------------------
# Every 10 minutes
#   - 1, 3, 4, 5, 6 and 8 's multiples
# Every 15 minutes
#   - 2, 17, 32, 47 th minutes
#   - 7, 22, 37, 52 th minutes
# Every 30 minutes
#   - 9, 39th minutes or 19, 49th minutes
# Hourly
#   - 29, 59th minutes
# Daily, Weekly, Monthly, Yearly
#   - At 0th Minute

# Severity Chart
# -----------------
# 5 - Critical
# 4 - High
# 3 - Medium
# 2 - Low
# 1 - Info


[default]
display.visualizations.custom.network_telemetry_map.network_telemetry_map.defaultWeight = 1
display.visualizations.custom.network_telemetry_map.network_telemetry_map.defaultColor = #0000FF
display.visualizations.custom.network_telemetry_map.network_telemetry_map.mapLatitude = 35
display.visualizations.custom.network_telemetry_map.network_telemetry_map.mapLongitude = -95
display.visualizations.custom.network_telemetry_map.network_telemetry_map.mapZoom = 4
display.visualizations.custom.network_telemetry_map.network_telemetry_map.drilldownTimeRangeToken = timerange
display.visualizations.custom.network_telemetry_map.network_telemetry_map.drilldownQuery = 


# ============
# Ransomware
# ============
# Reports
[Ransomware - Calculate UpperBound for Spike in File Writes]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for Ransomware - Spike in File Writes alert (Runs everyday at 4 AM) - Generates the upperBound value of file writes for each host \
For more information refer to Ransomware - Spike in File Writes alert. \
Warning - Do not run enable this search without enabling data-model acceleration on Endpoint data-model as this search will reduce the system performance without acceleration.
dispatch.earliest_time = -7d@d
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count FROM datamodel=Endpoint.Filesystem where Filesystem.action=created by _time span=1h, Filesystem.dest | `drop_dm_object_name(Filesystem)` \
| eventstats max(_time) as maxtime \
| stats avg(eval(if(_time<relative_time(maxtime, "-1d@d"), count,null))) as avg stdev(eval(if(_time<relative_time(maxtime, "-1d@d"), count, null))) as stdev by "dest" \
| eval upperBound=(avg+stdev*4) \
| outputlookup cs_ransomware_file_writes_upperbound.csv


# Alerts
[Ransomware - Spike in File Writes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert identifies a spike in file writes that may result in ransomware writing encrypted files. \
Warning: Enable the following report, Ransomware - Calculate UpperBound for Spike in File Writes, before enabling this alert. Users should have a good understanding of false positives before enabling this alert. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza \
\
A false positive may appear from new application installations or by copying a large number of files.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=created by Filesystem.dest, Filesystem.file_path | `drop_dm_object_name(Filesystem)` \
| rex field=file_path "(?<file_location>.*)[\\\\|\\/]" \
| stats sum(count) as count, min(firstTime) as firstTime max(lastTime) as lastTime by dest, file_location \
| sort - count | eval file_location=file_location." (".count.")" \
| stats sum(count) as count, min(firstTime) as firstTime max(lastTime) as lastTime, list(file_location) as file_location by dest \
| eval top5_file_location=mvindex(file_location,0,4) | fields - file_location \
| where count>=`cs_ransomware_min_file_writes` \
| lookup cs_ransomware_file_writes_upperbound.csv dest OUTPUT upperBound | where count>upperBound \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_spike_in_file_writes_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Spike in File Writes


[Ransomware - Endpoint Compromise - Fake Windows Processes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 1,11,21,31,41,51 * * * *
description = This alert identifies processes which try to disguise themselves as a Windows process.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.process_path !="C:\\Windows\\System32*" Processes.process_path !="C:\\Windows\\SysWOW64*" by Processes.user Processes.dest Processes.process_name Processes.process_id Processes.process_path Processes.parent_process_name Processes.process_hash \
| `drop_dm_object_name("Processes")` \
|  `cs_system_processes_run_from_unexpected_locations_internal_filter` \
| lookup cs_fake_windows_processes_filter process_name, process_hash OUTPUT need_to_filtered | search NOT need_to_filtered=1 \
| `is_windows_system_file` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| `cs_system_processes_run_from_unexpected_locations_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Endpoint Compromise - Fake Windows Processes


[Ransomware - Endpoint Compromise - Network Compromise - TOR Traffic]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 3,13,23,33,43,53 * * * *
description = This alert will focus on firewall data (Network_Traffic datamodel) to detect TOR traffic. \
\
Data Collection - Any firewall data that complies with the CIM definition. The alert will look for app=tor value.
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_network_traffic` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic where All_Traffic.app=tor AND All_Traffic.action=allowed by All_Traffic.src_ip All_Traffic.dest_ip All_Traffic.dest_port All_Traffic.action \
| `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` | `drop_dm_object_name("All_Traffic")` \
| `cs_tor_traffic_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Endpoint Compromise - Network Compromise - TOR Traffic


[Ransomware - Common Ransomware File Extensions]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4,14,24,34,44,54 * * * *
description = This alert is based on a lookup from the ES Content Update app. It will inspect for common ransomware file extensions. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem by Filesystem.dest, Filesystem.file_name, Filesystem.file_path \
| `drop_dm_object_name(Filesystem)` \
| rex field=file_path "(?<file_location>.*)[\\\\|\\/]" | rex field=file_name "(?<file_extension>\.[^\.]+)$" \
| stats sum(count) as count, min(firstTime) as firstTime max(lastTime) as lastTime, values(file_name) as sample_file_names by dest, file_extension, file_location \
| `cs_ransomware_extensions` \
| eval sample_file_names=mvindex(sample_file_names,0,2) \
| sort - count | eval file_location=file_location." (".count.")" \
| stats sum(count) as total_files_with_extension, min(firstTime) as firstTime max(lastTime) as lastTime, list(file_location) as file_location, values(sample_file_names) as sample_file_names by dest, file_extension \
| eval sample_file_names=mvindex(sample_file_names,0,9) | fields - file_name \
| eval top10_file_location=mvindex(file_location,0,9) | fields - file_location \
| where total_files_with_extension>=`cs_ransomware_min_file_extension_count` \
| `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(firstTime)` \
| `cs_common_ransomware_extensions_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Common Ransomware File Extensions


[Ransomware - Scheduled tasks used in BadRabbit ransomware]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 6,16,26,36,46,56 * * * *
description = This alert identifies BadRabbit ransomware based on processed data. It examines data from the schtasks.exe process.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (uses data-model query)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process= "*create*"  OR Processes.process= "*delete*") by Processes.dest Processes.parent_process Processes.process_name Processes.user \
| `drop_dm_object_name("Processes")` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| search (process=*rhaegal* OR process=*drogon* OR *viserion_*) \
| `cs_scheduled_tasks_used_in_badrabbit_ransomware_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Scheduled tasks used in BadRabbit ransomware


[Ransomware - Common Ransomware Notes]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 8,18,28,38,48,58 * * * *
description = This alert is based on a lookup from the ES Content Update app. It will inspect for common ransomware notes. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name \
| `drop_dm_object_name(Filesystem)` | `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(firstTime)` \
| rex field=file_name "(?<file_extension>\.[^\.]+)$" | `ransomware_notes` \
| `cs_common_ransomware_notes_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Common Ransomware Notes


[Ransomware - Endpoint Compromise - USN Journal Deletion on Windows]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 1,11,21,31,41,51 * * * *
description = The fsutil.exe application is a legitimate Windows utility used to perform tasks related to the file allocation table (FAT) and NTFS file systems. The update sequence number (USN) change journal provides a log of all changes made to the files on the disk. This search looks for fsutil.exe deleting the USN journal.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (uses data-model query)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fsutil.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest \
| `drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| search process="*deletejournal*" AND process="*usn*" \
| `cs_usn_journal_deletion_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Endpoint Compromise - USN Journal Deletion on Windows


[Ransomware - Windows - Windows Event Log Cleared]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 3,13,23,33,43,53 * * * *
description = This alert monitors for when WinEventLog events are cleared. \
\
Data Collection - Splunk_TA_Windows - WinEventLog://Security stanza and WinEventLog://System stanza\
\
A false positive may appear when an administrator might have intentionally cleared the events.
dispatch.earliest_time = 0
dispatch.latest_time = 
# timerange is provided within the query to reduce the false positive, see notes below
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = (`cs_wineventlog_security` EventCode=1100) OR (`cs_wineventlog_system` EventCode IN (6005, 1074)) earliest=-14m@m latest=now \
| sort 0 - _time \
| stats list(EventCode) as EventCode, list(_time) as all_timestamp values(eval(if(EventCode==1100, LogName, NULL()))) as LogName, values(eval(if(EventCode==1100, user, NULL()))) as user, latest(eval(if(EventCode==1100, _time, NULL()))) as event_time by dest \
| search EventCode=1100 \
| eval index_of_1100=mvfind(EventCode, "^1100$") | eval prev_eventcode=mvindex(EventCode,index_of_1100-1) | eval next_eventcode=mvindex(EventCode,index_of_1100+1) \
| eval timestamp_1100=mvindex(all_timestamp, index_of_1100) | eval prev_timestamp=mvindex(all_timestamp,index_of_1100-1) | eval next_timestamp=mvindex(all_timestamp,index_of_1100+1) \
| eval prev_timediff=prev_timestamp-timestamp_1100, next_timediff=timestamp_1100-next_timestamp \
| search NOT (next_eventcode=1074 prev_eventcode=6005 next_timediff<800 prev_timediff<500) | where timestamp_1100<=relative_time(now(),"-2m@m") AND timestamp_1100>=relative_time(now(),"-12m@m") \
| eval Message="The event logging service has shut down.", EventCode=1100 \
| append [| search (`cs_wineventlog_security` EventCode=1102) OR (`cs_wineventlog_system` EventCode=104) earliest=-12m@m latest=-2m@m \
| stats values(name) as Message, latest(_time) as event_time, values(EventCode) as EventCode, values(LogName) as LogName, values(user) as user by dest \
| eval Message=if(isnull(Message), "The event log file was cleared", Message)] \
| `cs_human_readable_time_format(event_time)` \
| table dest, Message, event_time, EventCode, LogName, user \
| `cs_windows_event_log_cleared_filter`
# Excluding EventCode sequence 1074 (Windows Shutdown) → 1100 (Event logging shutdown) → 6005 (Event logging start)
# with time-gap 500 seconds for pre_timediff, 800 seconds for next_timediff
# Search query is is lagging behind by 2 minutes to avoid false positives where EventCode 6005 (logging started) comes after the alert has been triggred.
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Windows - Windows Event Log Cleared


[Ransomware - Endpoint Compromise - Windows - WMI Lateral Movement]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 4,14,24,34,44,54 * * * *
description = This alert recognizes WMI lateral movement on Windows machines. These alerts may be due to ransomware activity on the host. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process create information)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=1 Image=*wmic* CommandLine="*/node*" CommandLine="*process call create*" \
| table _time, TimeCreated, Computer, User, signature, direction, Image, CommandLine \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_wmi_lateral_movement_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Ransomware
action.summary_index.alert_name = Ransomware - Endpoint Compromise - Windows - WMI Lateral Movement



# ================
# Windows / AD
# ================
# Reports
[Windows - Hosts Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 2 * * 0
description = Supporting Report for Windows update check alert (Runs every Sunday at 3 AM) - Generates the host list in the lookup
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats count where `cs_wineventlog_system` by host | table host | append [| inputlookup all_windows_hosts.csv] | dedup host | outputlookup all_windows_hosts.csv

[AD - cs_ad_obj_domain - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every day @1AM)\
\
Data collection - Splunk_TA_windows - MSAD Health Logs (sourcetype=*Health)
dispatch.earliest_time = -24h@h
dispatch.latest_time = @h
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_health_logs` \
| fields host, DomainNetBIOSName,DomainDNSName,ForestName,Site \
| stats count by host, DomainNetBIOSName,DomainDNSName,ForestName,Site \
| eval DomainDNSName=lower(DomainDNSName),ForestName=lower(ForestName),Site=lower(Site),host=lower(host),DomainNetBIOSName=lower(DomainNetBIOSName) \
| eval domain=DomainNetBIOSName \
| table host,domain,DomainNetBIOSName,DomainDNSName,ForestName,Site \
| sort ForestName,Site,DomainDNSName,host \
| eval _key = host \
| outputlookup cs_ad_obj_domain append=true


[AD - cs_ad_obj_group - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour) \
\
Data collection - Splunk_TA_windows - admon stanza (sourcetype=ActiveDirectory)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|group" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields DomainDNSName, OU, admonEventType, adminCount, c, cn, orig_cn, dSCorePropagationData, dcName, deletedDate, description, displayName, distinguishedName, dn, dn_hist, dn_path, domain, groupType, groupType_Name, guid_lookup, instanceType, isCriticalSystemObject, isDeleted, isRecycled, l, lastKnownParent, managedBy, member, name, objectCategory, objectClass, objectGUID, objectSid, primaryGroupToken, sAMAccountName, sAMAccountType, showInAdvancedViewOnly, sid_lookup, st, systemFlags, uSNChanged, uSNCreated, whenChanged, whenCreated \
| rex field=distinguishedName max_match=0 "\\,DC\\=(?<DomainDNSName>[^(\\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\\-\\s,\\$(.+\\x5C{1}.+)[^\\sDEL:]+)\\sDEL:" \
| rex field=objectSid "\\d+\\-(?<primaryGroupToken>\\d+)$" \
| eval distinguishedName=lower(distinguishedName), displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName), dn=lower(distinguishedName), last_evt_flg=admonEventType, cn=lower(cn), lastKnownParent=lower(lastKnownParent), objectGUID=lower(objectGUID), DomainDNSName=lower(DomainDNSName), OU=lower(OU), sAMAccountName=lower(sAMAccountName), dNSHostName=if(isnull(dNSHostName),if(isnull(orig_cn),((displayName . ".") . DomainDNSName),((orig_cn . ".") . DomainDNSName)),dNSHostName), orig_evt_dn=lower(orig_evt_dn), member=lower(member), adminCount=if(isnull(adminCount),0,adminCount) \
| rex field=distinguishedName "(?i)(?:\\,(?<!\\x5C{1}))(?<dn_path>(cn|ou|dc)\\=[^$]+)" \
| rex field=distinguishedName "(?i)(?:\\,(?<!\\x5C{1}))(cn|ou|dc)\\=(?<orig_ou>[^\\,]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if((match(lower(last_evt_flg),"deleted") OR match(lower(isDeleted),"true")),strptime(whenChanged,"%I:%M.%S %p, %a %m/%d/%Y"),0), OU=if(isnull(OU),orig_ou,OU) \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName, domain] \
| lookup cs_ad_audit_group_details groupType,sAMAccountType OUTPUT groupType_Name,MSADGroupType,MSADGroupClass \
| eval isDistributionList=if((sAMAccountType == "268435457"),"TRUE","FALSE") \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if((dn_hist_cnt > 1),lower(dn_hist_hold),""), src_nt_domain=domain \
| fillnull value=0 uSNChanged,uSNCreated,whenChanged,whenCreated \
| fillnull value="" OU,c,orig_cn,dSCorePropagationData,dcName,description,displayName,distinguishedName,dn,dn_path,groupType,groupType_Name,MSADGroupType,MSADGroupClass,guid_lookup,instanceType,l,lastKnownParent,last_evt_flg,managedBy,member,name,objectCategory,objectSid,primaryGroupToken,sAMAccountName,sAMAccountType,sid_lookup,st,systemFlags,uSNChanged,uSNCreated \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName==cn,"",sAMAccountName) \
| eval lookup_grp=lower(d_cn)."|".lower(d_dn)."|".lower(d_sam) \
| makemv delim="|" lookup_grp \
| makemv delim="|" member \
| eval membercount=if((member == ""),0,mvcount(member)) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| table key_val, DomainDNSName, OU, adminCount, c, cn, orig_cn, dSCorePropagationData, dcName, deletedDate, description, displayName, distinguishedName, dn, dn_hist, dn_path, domain, groupType, groupType_Name, guid_lookup, instanceType, isCriticalSystemObject, isDeleted, isDistributionList, isRecycled, l, lastKnownParent, last_evt_flg, lookup_grp, managedBy, member, membercount, MSADGroupType, MSADGroupClass, name, objectCategory, objectClass, objectGUID, objectSid, orig_evt_dn, primaryGroupToken, sAMAccountName, sAMAccountType, showInAdvancedViewOnly, sid_lookup, src_nt_domain, st, systemFlags, uSNChanged, uSNCreated, whenChanged, whenCreated, time \
| lookup cs_ad_obj_group domain,objectGUID OUTPUT lookup_grp AS p_lookup_grp \
| eval lookup_grp=if(isnull(p_lookup_grp),mvjoin(lookup_grp,"|"),mvjoin(lookup_grp,"|")."|".mvjoin(p_lookup_grp,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_grp \
| fields - p_lookup_grp \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_group append=true

[AD - cs_ad_obj_computer - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour) \
\
Data collection - Splunk_TA_windows - admon stanza (sourcetype=ActiveDirectory)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|person|organizationalPerson|user|computer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields DomainDNSName,OU,admonEventType,accountExpires,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,deletedDate,description,displayName,distinguishedName,dn,dn_path,domain,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,localPolicyFlags,logonCount,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,primaryGroupID,pwdLastSet,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,st,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),lastKnownParent=lower(lastKnownParent),objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),OU=lower(OU),sAMAccountName=lower(sAMAccountName),dNSHostName=if(isnull(dNSHostName),if(isnull(orig_cn),displayName.".".DomainDNSName,orig_cn.".".DomainDNSName),dNSHostName),orig_evt_dn=lower(orig_evt_dn) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(?<dn_path>(cn|ou|dc)\=[^$]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0) \
| lookup cs_ad_obj_uac userAccountControl OUTPUT uac_bin_map, uac_details \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),""),src_nt_domain=domain \
| fillnull value=0 badPwdCount,lastLogonTimestamp,logonCount,primaryGroupID,pwdLastSet,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| fillnull value="" OU,accountExpires,badPasswordTime,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,instanceType,isCriticalSystemObject,l,lastKnownParent,lastLogon,last_evt_flg,localPolicyFlags,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,orig_evt_dn,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,src_nt_domain,st \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName=cn,"",lower(sAMAccountName)) \
| eval key_val=objectGUID."#".DomainDNSName,lookup_cmp=lower(d_cn)."|".lower(d_dn)."|".d_sam \
| makemv delim="|" lookup_cmp \
| eventstats values(lookup_cmp) AS lookup_cmp by key_val \
| table key_val,DomainDNSName,OU,accountExpires,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dNSHostName,dSCorePropagationData,dcName,deletedDate,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,last_evt_flg,localPolicyFlags,logonCount,lookup_cmp,managedBy,msDFSR-ComputerReferenceBL,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,operatingSystem,operatingSystemServicePack,operatingSystemVersion,orig_evt_dn,primaryGroupID,pwdLastSet,rIDSetReferences,sAMAccountName,sAMAccountType,serverReferenceBL,servicePrincipalName,sid_lookup,src_nt_domain,st,uac_details,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated,time \
| lookup cs_ad_obj_computer domain objectGUID OUTPUT lookup_cmp AS p_lookup_cmp \
| eval lookup_cmp=if(isnull(p_lookup_cmp),mvjoin(lookup_cmp,"|"),mvjoin(lookup_cmp,"|")."|".mvjoin(p_lookup_cmp,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_cmp \
| fields - p_lookup_cmp \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_computer append=true

[AD - cs_ad_obj_gpo - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour) \
\
Data collection - Splunk_TA_windows - admon stanza (sourcetype=ActiveDirectory)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=top|container|groupPolicyContainer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields admonEventType,cn,deletedDate,displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,isCriticalSystemObject,isRecycled,isDeleted,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,showInAdvancedViewOnly,systemFlags,uSNChanged,uSNCreated,versionNumber,whenChanged,whenCreated,_time \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(DomainDNSName,".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| rex field=distinguishedName "(?msi)(?:CN\=\{)(?<gpo_link>[^\}]+)\}\,CN\=Policies" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),orig_cn=lower(orig_cn),lastKnownParent=lower(lastKnownParent),objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),orig_evt_dn=lower(orig_evt_dn),gpo_link=lower(gpo_link) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(cn|ou|dc)\=(?<orig_ou>[^\,]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0),OU=if(isnull(OU),orig_ou,OU) \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),"") \
| fillnull value=0 uSNChanged,uSNCreated,whenChanged,whenCreated \
| fillnull value="" displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,systemFlags,uSNChanged,uSNCreated,versionNumber \
| eval key_val=objectGUID."#".DomainDNSName \
| table key_val,cn,deletedDate,displayName,distinguishedName,dn,dn_hist,domain,DomainDNSName,dSCorePropagationData,flags,gpo_link,gPCFileSysPath,gPCFunctionalityVersion,gPCMachineExtensionNames,instanceType,isCriticalSystemObject,isRecycled,isDeleted,lastKnownParent,lc,last_evt_flg,name,objectCategory,objectClass,objectGUID,orig_cn,showInAdvancedViewOnly,systemFlags,uSNChanged,uSNCreated,versionNumber,whenChanged,whenCreated,time \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_gpo append=true


[AD - cs_ad_obj_user - Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 29 * * * *
description = Supporting Report for AD Alerts which update required lookups. (Runs every hour) \
\
Data collection - Splunk_TA_windows - admon stanza (sourcetype=ActiveDirectory)
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_ad_active_directory` "objectClass=*|person|organizationalPerson|user" NOT "objectClass=top|person|organizationalPerson|user|computer" ("admonEventType=Sync" OR "admonEventType=Update" OR "admonEventType=Deleted") \
| fields _time,DomainDNSName,OU,accountExpires,adminCount,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,deletedDate,department,description,displayName,distinguishedName,dn,dn_path,domain,givenName,guid_lookup,initials,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,admonEventType,lockoutTime,logonCount,logonHours,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,physicalDeliveryOfficeName,postalCode,primaryGroupID,pwdLastSet,sAMAccountName,sAMAccountType,servicePrincipalName,showInAdvancedViewOnly,sid_lookup,sn,st,streetAddress,title,uSNChanged,uSNCreated,userAccountControl,userPrincipalName,userWorkstations,whenChanged,whenCreated \
| rex max_match=0 field=distinguishedName "\,DC\=(?<DomainDNSName>[^(\,|$)]+)" \
| eval DomainDNSName=mvjoin(lower(DomainDNSName),".") \
| stats max(_time) AS time,earliest(distinguishedName) AS orig_evt_dn,values(distinguishedName) AS dn_hist_hold,latest(*) AS * by objectGUID \
| rex field=cn "(?<orig_cn>[a-zA-Z0-9._\-\s,\$(.+\x5C{1}.+)[^\sDEL:]+)\sDEL:" \
| eval distinguishedName=lower(distinguishedName),displayName=if(isnull(displayName),if(isnull(cn),orig_cn,cn),displayName),dn=lower(distinguishedName),last_evt_flg=admonEventType,cn=lower(cn),lastKnownParent=lower(lastKnownParent),user_type="user",objectGUID=lower(objectGUID),DomainDNSName=lower(DomainDNSName),OU=lower(OU),sAMAccountName=lower(sAMAccountName),userPrincipalName=lower(userPrincipalName),orig_evt_dn=lower(orig_evt_dn) \
| rex field=distinguishedName "(?i)(?:\,(?<!\x5C{1}))(?<dn_path>(cn|ou|dc)\=[^$]+)" \
| fillnull value="FALSE" isRecycled,isDeleted,isCriticalSystemObject,showInAdvancedViewOnly \
| eval deletedDate=if(match(lower(last_evt_flg), "deleted") OR match(lower(isDeleted), "true"), strptime(whenChanged, "%I:%M.%S %p, %a %m/%d/%Y"), 0) \
| lookup cs_ad_obj_uac userAccountControl OUTPUT uac_bin_map, uac_details \
| join type=left DomainDNSName \
    [| inputlookup cs_ad_obj_domain \
    | stats count by DomainDNSName,domain \
    | table DomainDNSName,domain] \
| eval dn_hist_cnt=mvcount(dn_hist_hold) \
| eval dn_hist=if(dn_hist_cnt>1,lower(dn_hist_hold),"") \
| fillnull value=0 adminCount,badPwdCount,lastLogonTimestamp,logonCount,primaryGroupID,pwdLastSet,uSNChanged,uSNCreated,userAccountControl,whenChanged,whenCreated \
| fillnull value="" OU,accountExpires,badPasswordTime,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,department,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,givenName,guid_lookup,initials,instanceType,l,lastKnownParent,last_evt_flg,lockoutTime,logonHours,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,orig_evt_dn,physicalDeliveryOfficeName,postalCode,primaryGroupID,sAMAccountName,sAMAccountType,servicePrincipalName,sid_lookup,sn,st,streetAddress,title,uSNChanged,uSNCreated,uac_details,userPrincipalName,userWorkstations,uac_bin_map \
| eval d_dn=if(dn_hist=="",dn,mvjoin(dn_hist,"|")),d_cn=if(orig_cn=="",cn,cn."|".orig_cn),d_sam=if(sAMAccountName=cn,"",lower(sAMAccountName)),d_princ=if(userPrincipalName=="","",userPrincipalName) \
| eval key_val=objectGUID."#".DomainDNSName,lookup_usr=lower(d_cn)."|".lower(d_dn)."|".d_sam."|".d_princ \
| makemv delim="|" lookup_usr \
| eventstats values(lookup_usr) AS lookup_usr by key_val \
| table key_val,DomainDNSName,OU,accountExpires,adminCount,badPasswordTime,badPwdCount,c,cn,orig_cn,codePage,countryCode,dSCorePropagationData,dcName,deletedDate,department,description,displayName,distinguishedName,dn,dn_hist,dn_path,domain,givenName,guid_lookup,initials,instanceType,isCriticalSystemObject,isDeleted,isRecycled,l,lastKnownParent,lastLogon,lastLogonTimestamp,last_evt_flg,lockoutTime,logonCount,logonHours,lookup_usr,managedBy,msDS-SupportedEncryptionTypes,name,objectCategory,objectClass,objectGUID,objectSid,orig_evt_dn,physicalDeliveryOfficeName,postalCode,primaryGroupID,pwdLastSet,sAMAccountName,sAMAccountType,servicePrincipalName,showInAdvancedViewOnly,sid_lookup,sn,st,streetAddress,title,uac_details,uSNChanged,uSNCreated,userAccountControl,userPrincipalName,userWorkstations,whenChanged,whenCreated,user_type,time \
| lookup cs_ad_obj_user domain,objectGUID OUTPUT lookup_usr AS p_lookup_usr \
| eval lookup_usr=if(isnull(p_lookup_usr),mvjoin(lookup_usr,"|"),mvjoin(lookup_usr,"|")."|".mvjoin(p_lookup_usr,"|")) \
| eval key_val=((objectGUID . "#") . DomainDNSName) \
| makemv delim="|" lookup_usr \
| fields - p_lookup_usr \
| stats values(*) AS * by key_val \
| eval _key=key_val \
| outputlookup cs_ad_obj_user append=true


# Alerts
[Windows - Hosts Missing Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 3 1 * *
description = This alert is for Windows hosts that haven't received the latest update. It automatically runs on the first of every month and checks for any updates that might have been released in the previous month. \
\
Data collection - WinEventLog System events (EventCode=19)
dispatch.earliest_time = -31d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_system` EventCode=19 | dedup host | table host | eval updated="true" | append [| inputlookup all_windows_hosts.csv | table host] \
| stats first(updated) as updated by host | search NOT updated="true" \
| `cs_windows_host_missing_update_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows
action.summary_index.alert_name = Windows - Hosts Missing Update


[Windows - Endpoint Compromise - Windows Firewall Disabled Event]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 6,16,26,36,46,56 * * * *
description = Windows Firewall Disabled Event from WinEventLog\
\
Data Collection - WinEventLog Security Events (EventCode=4950)
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode=4950 SettingType="Enable Windows Defender Firewall" SettingValue=No | table _time, host, EventCode, ProfileChanged, SettingType, SettingValue\
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_firewall_disabled_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows
action.summary_index.alert_name = Windows - Endpoint Compromise - Windows Firewall Disabled Event


[Windows - Windows Process Tampering Detected]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 5,15,25,35,45,55 * * * *
description = Windows process tampering detected by sysmon.\
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=25
dispatch.earliest_time = -12m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=25 \
| table _time, Computer, User, Type, ProcessId, Image, CommandLine \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_process_tampering_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows
action.summary_index.alert_name = Windows - Windows Process Tampering Detected


[AD - Group Changed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = Change in Active Directory Group.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("groupchanged")` \
| `ms_obj_group_change_out`\
| fields - member_obj_lkp\
| rename adminuser as "Administrator",msad_action as "Action",group_obj_nm as "Group_Name",MSADGroupType as "Group_Type",MSADGroupClass AS "Group_Class",signature as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_group_changed_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = AD
action.summary_index.alert_name = AD - Group Changed

[AD - Group Membership Changed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = Change in Active Directory Group Membership.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("groupmembershipchanged")`\
| `ms_obj_groupmembership_change_out`\
| rename  group_obj_nm as "Target_Group",MSADGroupClass as "Class",msad_action AS "Action",member AS "Target Member",member_obj_lkp AS "Target Member Lookup",MSADGroupType as "Type",adminuser as "Admin User",MSADChanges as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_group_membership_changed_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = AD
action.summary_index.alert_name = AD - Group Membership Changed

[AD - Group Policy Changed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = Change in Active Directory Group Policy.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("grouppolicychanged")`\
| fields _time, session_id, src_nt_domain, src_user,Object_Name_Guid,displayName,dir_svcs_action,AttributeLDAPDisplayName,AttributeValue,MSADChangedAttributes,Correlation_ID,signature,msad_action,Old_DN,New_DN\
| fillnull value="" Correlation_ID,msad_action\
| eval adminuser=if(isnull(src_nt_domain),src_user,src_nt_domain."\\".src_user) \
| eval Object_Lookup_Name="{".lower(Object_Name_Guid)."}" \
| join type=left Object_Lookup_Name [| inputlookup cs_ad_obj_gpo | fields cn, displayName | rename cn AS Object_Lookup_Name | table Object_Lookup_Name, displayName]\
| eval displayName=if(isnull(displayName),"Warning: ".Object_Lookup_Name." GPO CN not found in the AD_Obj_GPO Lookup. If GPO is new wait 15 minutes and run report again, or check that ms_ad_obj_sched_sync_gpo scheduled search is running as scheduled.",displayName) \
| `ms_obj_msad-changed-attributes`\
| stats max(_time) AS last_time, min(_time) AS start_time,list(MSADChanges) AS MSADChanges,values(Correlation_ID) AS Correlation_IDs by session_id,Object_Lookup_Name,displayName,adminuser,signature,msad_action\
| eval MSADChanges=mvjoin(MSADChanges, "########")\
| eval MSADChanges=case(isnull(signature) AND isnull(MSADChanges),"Unknown Changes",isnull(signature),MSADChanges,isnotnull(MSADChanges),"Signature: ".signature."########".MSADChanges)\
| `cs_human_readable_time_format(start_time)` | `cs_human_readable_time_format(last_time)` \
| eval Session_Time="Session ID (".session_id.")|Start: ".start_time."|End: ".last_time \
| table displayName,adminuser,Session_Time,msad_action,Correlation_IDs,MSADChanges\
| makemv delim="########" MSADChanges\
| makemv delim="|" Session_Time\
| rename adminuser as "Administrator",msad_action as "Action",displayName as "GPO_Name",MSADChanges as "Changes" \
| `cs_ad_group_policy_changed_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = AD
action.summary_index.alert_name = AD - Group Policy Changed


[AD - User Changed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = User Changed on Active Directory.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `ms_obj_changes_base_cat_customised("userchanged")`\
| `ms_obj_user_change_out`\
| rename adminuser as "Administrator",msad_action as "Action",dest_user_subject as "Target_User_ID",MSADChanges as "Changes" \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_user_changed_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = AD
action.summary_index.alert_name = AD - User Changed


[AD - User Locked Out]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = A user account was locked out on Active Directory.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` (EventCode=4740) \
| eval Account_Name=mvfilter(NOT match(Account_Name, "\$")) \
| fields ComputerName Account_Domain Account_Name Caller_Computer_Name \
| rename ComputerName as "Domain_Controller", Account_Domain as User_Domain ,Account_Name as "User_Name", Caller_Computer_Name as "Source_Computer_Name" \
| fillnull value="-" Source_Computer_Name \
| table _time,User_Name,User_Domain,Source_Computer_Name,Domain_Controller \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_ad_user_locked_out_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = AD
action.summary_index.alert_name = AD - User Locked Out

[AD - Password Change Outside Working Hour]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 10 * * *
description = Password changed outside working hour.\
\
Data Collection - Splunk_TA_windows - WinEventLog://Security stanza
dispatch.earliest_time = -1d@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_security` EventCode IN (627, 628, 4723, 4724, 4794) \
| eval time = _time \
| `cs_generate_time_fields_for_filter(time)` \
| where time_wday="Saturday" OR time_wday="Sunday" OR time_hour<6 OR time_hour>19 \
| `cs_remove_time_fields_for_filter(time)` \
| table _time, user, Account_Domain, Account_Name, msad_action, action, EventCode \
| `cs_ad_password_change_outside_working_hour_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = AD
action.summary_index.alert_name = AD - Password Change Outside Working Hour


# ==============
# Network Compromise
# ==============
[Network Compromise - Basic Scanning]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert scans for hosts that either reach out to 500 or more hosts or 100 ports in a short period of time.\
\
Data Collection - Palo Alto Networks firewalls, and with any other device that uses the Splunk common information model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = index=* ( (tag=network tag=communicate) OR sourcetype=pan*traffic OR sourcetype=opsec OR sourcetype=cisco:asa) \
| stats dc(dest_port) as num_dest_port dc(dest_ip) as num_dest_ip by sourcetype, src_ip\
| where num_dest_port > 100 OR num_dest_ip > 500\
| `cs_scanning_basic_scanning_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Network Compromise
action.summary_index.alert_name = Network Compromise - Basic Scanning



# ==============
# Palo Alto Firewall
# ==============
[Palo Alto Firewall - Network Compromise - Palo Alto DNS Sinkhole]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Palo Alto Firewall DNS alert for when outbound traffic goes to 72.5.65.111. \
\
Data Collection - Palo Alto Networks firewalls traffic data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:traffic" dest_ip="72.5.65.111" \
| stats count, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(src_port) as dc_src_port, values(dest_port) as dest_port, values(app) as app, values(rule) as rule, values(http_category) as http_category by src_ip \
| `cs_palo_dns_sinkhole_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Palo Alto Firewall
action.summary_index.alert_name = Palo Alto Firewall - Network Compromise - Palo Alto DNS Sinkhole


[Palo Alto Firewall - Network Compromise - Palo Alto High Threats Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = A Palo Alto Firewall alerts for high or critical severity threats. \
\
Data Collection - Palo Alto Networks firewalls traffic data.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:threat" severity IN ("high" "critical") \
| table _time, log_subtype, threat_category, app, signature, severity, action, threat, dvc, dvc_name, src, src_port, src_location, src_zone, dest, dest_port, dest_translated_ip, dest_translated_port, url \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_high_threats_alert_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Palo Alto Firewall
action.summary_index.alert_name = Palo Alto Firewall - Network Compromise - Palo Alto High Threats Alert


[Palo Alto Firewall - Network Compromise - Palo Alto High System Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = A Palo Alto Firewall alerts for high or critical severity system events. \
\
Data Collection - Palo Alto Networks firewalls system data.
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:system" severity IN ("critical", "high") \
| table _time, log_subtype, signature, severity, action, description, dvc, dvc_name \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_high_system_alerts_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Palo Alto Firewall
action.summary_index.alert_name = Palo Alto Firewall - Network Compromise - Palo Alto High System Alert


[Palo Alto Firewall - Network Compromise - Palo Alto WildFire Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A Palo Alto Firewall WildFire events Alert \
\
Data Collection - Palo Alto Networks firewalls traffic data.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:threat" log_subtype="wildfire" \
| table _time, app, signature, severity, action, threat, dvc, dvc_name, src, src_port, src_location, src_zone, dest, dest_port, dest_translated_ip, dest_translated_port, url \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_palo_wildfire_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Palo Alto Firewall
action.summary_index.alert_name = Palo Alto Firewall - Network Compromise - Palo Alto WildFire Alert


# Reports
[Palo Alto Firewall - Network Compromise - DDoS Attack Prevented]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Palo Alto Firewall prevented DDoS attack events. It searches for log_subtype=packet.\
\
Data Collection - Palo Alto Networks firewalls threat data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:threat" log_subtype=packet \
| stats count, latest(_time) as last_seen, dc(src_port) as dc_src_port, dc(dest_ip) as dc_dest_ip, values(signature) as signature, values(dvc) as dvc, values(dvc_name) as dvc_name, values(src_location) as src_location, dc(dest) as dc_dest, values(action) as action by src | sort - count \
| `cs_palo_ddos_prevented_filter`


[Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Network traffic coming from blocked IPs. The ip_blocked_list lookup is being used to identify the blocked IPs.\
\
Data Collection: Palo Alto pan:traffic sourcetype data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:traffic" action="allowed" `cs_filter_private_ips` packets_in>0 \
| stats count, latest(_time) as last_seen, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(dvc_name) as dc_dvc_name, dc(src_port) as dc_src_port, values(src_location) as src_location, sum(packets_in) as packets_in, sum(packets_out) as packets_out, dc(dest_ip) as dc_dest_ip, values(dest_port) as dest_port, dc(dest_location) as dc_dest_location, values(app) as app, values(http_category) as http_category, values(rule) as firewall_rule by src_ip \
| `cs_palo_search_blocked_ip("src_ip")` | sort -count \
| `cs_palo_blocked_ip_inbound_filter`


[Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
description = Network traffic going to blocked IPs. The ip_blocked_list lookup is being used to identify the blocked IPs.\
\
Data Collection: Palo Alto pan:traffic sourcetype data. (Palo Alto Networks Add-on for Splunk)
search = `cs_palo` sourcetype="pan:traffic" action="allowed" `cs_filter_private_ips` packets_out>0 \
| stats count, latest(_time) as last_seen, values(dvc) as dvc, values(dvc_name) as dvc_name, dc(dvc_name) as dc_dvc_name, dc(dest_port) as dc_dest_port, values(dest_location) as dest_location, sum(packets_in) as packets_in, sum(packets_out) as packets_out, dc(src_ip) as dc_src_ip, dc(src_port) as dc_src_port, dc(src_location) as dc_src_location, values(app) as app, values(http_category) as http_category, values(rule) as firewall_rule by dest_ip \
| `cs_palo_search_blocked_ip("dest_ip")` | sort -count \
| `cs_palo_blocked_ip_outbound_filter`

[Palo Alto Firewall - Commits]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = A Palo Alto Firewall alerts for commit events. \
\
Data Collection - Palo Alto Networks firewalls system data.
dispatch.earliest_time = -20m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_palo` sourcetype="pan:system" "Commit job succeeded" \
| table _time serial_number dvc dvc_name description \
| `cs_palo_commit_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Palo Alto Firewall
action.summary_index.alert_name = Palo Alto Firewall - Commits

[Dynamically Update Blocked IPs with HoneyDB]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 29 */8 * * *
description = Runs every 8 hours and update the blocked IP lookup (ip_blocked_list.csv) with HoneyDB.\
Enable this report to dynamically update the lookup.
dispatch.earliest_time = 0
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | honeydblookupgen update_lookup=true generate_events=false


[Palo Alto Firewall - Malicious IP List Gen]
disabled = 1
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 2,17,32,47 * * * *
description = Based on various firewall activities like DDoS attack or it is an already blocked IP address and connecting through multiple firewalls this report will create a list of bad IP addresses.\
The report runs every 15 minutes for last 4 hours. (To cover blocked IPs that is trying to connect to more than 2 firewall devices.) \
\
Note - Enable below three reports to make use of this report.\
1. Palo Alto Firewall - Network Compromise - DDoS Attack Prevented\
2. Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs\
3. Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs
dispatch.earliest_time = -4h@m
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
display.visualizations.show = 0
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | savedsearch "Palo Alto Firewall - Network Compromise - DDoS Attack Prevented" | rename src as ip, src_location as ip_location, dc_src_port as no_of_ports_used, dc_dest_ip as no_of_victims | eval description="Involved in DDoS Attack" | eval ip_category="ddos" \
| append [| savedsearch "Palo Alto Firewall - Network Compromise - Inbound Traffic from Blocked IPs" | rename src_ip as ip, dc_src_port as no_of_ports_used, src_location as ip_location, dc_dest_ip as no_of_victims  | eval description="Incoming traffic into multiple firewalls from this blocked IP" | eval ip_category="inbound"] \
| append [| savedsearch "Palo Alto Firewall - Network Compromise - Outbound Traffic to Blocked IPs" | rename dest_ip as ip, dc_dest_port as no_of_ports_used, dest_location as ip_location, dc_src_ip as no_of_victims | eval description="Outgoing traffic through multiple firewalls to this blocked IP", last_seen=now() | eval ip_category="outbound"] \
| maliciousipupload \
| appendpipe [| maliciousiplookupgen ]
# TODO - malicioudiplookupgen command should be executed sequencially. Currently it is being executed before the maliciousipupload command.



# ==============
# Office 365 (O365)
# ==============
[O365 - DLP event in Exchange]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 0,6,12,18 * * *
description = This alert will pinpoint when there's an Office 365 data loss prevention event in Microsoft Exchange. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). The user has to enable the DLP rules on the Office 365 (https://docs.microsoft.com/en-us/microsoft-365/compliance/create-test-tune-dlp-policy?view=o365-worldwide).\
\
A false positive could be generated when the query itself lacks a false positive, but the DLP rules for Office 365 might contain some. 
dispatch.earliest_time = -362m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` Workload=Exchange UserId=DlpAgent \
| rename "ExchangeMetaData.From" as From, "ExchangeMetaData.To{}" as To, "ExchangeMetaData.CC{}" as CC, "ExchangeMetaData.BCC{}" as BCC, "ExchangeMetaData.Subject" as Subject, "PolicyDetails{}.PolicyName" as PolicyName, "PolicyDetails{}.Rules{}.RuleName" as RuleName, "PolicyDetails{}.Rules{}.Actions{}" as RuleActions, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.Location" as SensitiveInformationLocation, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.SensitiveInformationTypeName" as SensitiveInformationType, "ExchangeMetaData.FileSize" as fs \
| convert auto(fs) | eval EmailSizeInKB=round(tonumber(fs)/1024, 2) \
| table _time, host, Subject, From, To, CC, BCC, EmailSizeInKB, PolicyName, RuleName, RuleActions, SensitiveInformationType, SensitiveInformationLocation \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_dlp_exchange_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - DLP event in Exchange


[O365 - DLP event in SharePoint]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 0,6,12,18 * * *
description = This alert will pinpoint when there's an Office 365 data loss prevention event in Microsoft SharePoint. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). The user has to enable the DLP rules on the Office 365 (https://docs.microsoft.com/en-us/microsoft-365/compliance/create-test-tune-dlp-policy?view=o365-worldwide).\
\
A false positive could be generated when the query itself lacks a false positive, but the DLP rules for SharePoint might contain some.
dispatch.earliest_time = -362m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` Workload=SharePoint UserId=DlpAgent \
| rename "SharePointMetaData.From" as From, "SharePointMetaData.FileName" as FileName, "SharePointMetaData.FileOwner" as FileOwner, "SharePointMetaData.DocumentLastModifier" as User, "SharePointMetaData.FilePathUrl" as FilePathUrl, "PolicyDetails{}.PolicyName" as PolicyName, "PolicyDetails{}.Rules{}.RuleName" as RuleName, "PolicyDetails{}.Rules{}.Actions{}" as RuleActions, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.Location" as SensitiveInformationLocation, "PolicyDetails{}.Rules{}.ConditionsMatched.SensitiveInformation{}.SensitiveInformationTypeName" as SensitiveInformationType \
| table _time, host, FileName, From, User, FileOwner, FilePathUrl, PolicyName, RuleName, RuleActions, SensitiveInformationType, SensitiveInformationLocation \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_o365_dlp_sharepoint_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - DLP event in SharePoint


[O365 - O365 Service is not Operational]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 5
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert will trigger when O365 service is not in operational state.\
\
Data Collection - Office 365 service status data (Splunk Add-on for Office 365).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:service:status" source="*CurrentStatus" \
| stats latest(Status) as Status latest(_time) as _time by WorkloadDisplayName host \
| search Status IN ("ExtendedRecovery","InformationUnavailable","Investigating*","RestoringService","ServiceDegradation","ServiceInterruption") \
| `cs_human_readable_time_format(_time, LastUpdatedTime)` \
| table LastUpdatedTime host Work* Status \
| sort host Status | `cs_o365_service_not_operational_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - O365 Service is not Operational



[O365 - External User Added to Microsoft Teams]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 0 1 * * *
description = This alert will pinpoint when external user added to teams. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2d@h
dispatch.latest_time = +2d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-25h@m _index_latest=-1h@m Workload=MicrosoftTeams Operation=MemberAdded Members{}.UPN=*\#ext\#* \
| rename Members{}.UPN AS memberUpn \
| eval memberUpn =lower(memberUpn) \
| rex field=memberUpn "(?<email>.*)\#ext\#" \
| rex mode=sed field=email "s/_(?!.*_)/@/g" \
| rex field=email "@(?<target_domain>.*)" \
| stats count, latest(_time) as _time by memberUpn \
| `cs_human_readable_time_format(_time, event_time)` \
| table event_time, memberUpn | rename memberUpn as "External Users" | `cs_o365_external_users_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - External User Added to Microsoft Teams


[O365 - Azure Active Directory - AuthorizationPolicy Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the change/update in AuthorizationPolicy. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("AuthorizationPolicy")` _index_earliest=-31m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_authorizationpolicy_change_internal_filter` \
| `cs_o365_authorizationpolicy_change_filter`  \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - AuthorizationPolicy Change/Update


[O365 - Azure Active Directory - Policy Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the change/update in Policy. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("Policy")` _index_earliest=-31m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_policy_change_internal_filter` \
| `cs_o365_policy_change_filter`  \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Policy Change/Update


[O365 - Azure Active Directory - Role Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the change/update in Role. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("Role")` _index_earliest=-31m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_role_change_internal_filter` \
| `cs_o365_role_change_filter`   \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Role Change/Update


[O365 - Azure Active Directory - Group Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the change/update in Group. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("Group")` _index_earliest=-31m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_group_change_internal_filter` \
| `cs_o365_group_change_filter`  \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Group Change/Update


[O365 - Azure Active Directory - GroupMembership Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the change/update in Group members. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("GroupMembership")` _index_earliest=-31m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_group_membership_change_internal_filter` \
| `cs_o365_group_membership_change_filter`  \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - GroupMembership Change/Update


[O365 - Azure Active Directory - User Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the change/update in User. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("User")` _index_earliest=-31m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_user_change_internal_filter` \
| `cs_o365_user_change_filter`  \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - User Change/Update


[O365 - Azure Active Directory - ServicePrincipal Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the change/update in ServicePrincipal. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("ServicePrincipal")` _index_earliest=-31m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_serviceprincipal_change_internal_filter` \
| `cs_o365_serviceprincipal_change_filter`  \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - ServicePrincipal Change/Update


[O365 - Azure Active Directory - Application Change/Update]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert will show the change/update in Application. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_managementactivity_change("Application")` _index_earliest=-31m@m _index_latest=-1m@m \
| `cs_o365_managementactivity_change_out` \
| `cs_o365_application_change_internal_filter` \
| `cs_o365_application_change_filter`  \
| table event_time, Actor, Command, Target_ObjectID, Target_DisplayName, ResultStatus, ModifiedProperties, MetaData
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Application Change/Update

[O365 - Login Failure Due To Multi Factor Authentication]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	29 * * * *
description = This alert will show the login failure due to multi factor authentication. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, max(_time) as Last_Failed_Login, values(LogonError) as LogonError, values(ExtendedProperties) as ExtendedProperties by user, ClientIP \
| iplocation ClientIP \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, max(Last_Failed_Login) as Last_Failed_Login, list(Location) as Location, values(LogonError) as LogonError, values(ExtendedProperties) as ExtendedProperties by user \
| sort - count \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_mfs_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Login Failure Due To Multi Factor Authentication

[O365 - Login Failure Outside Home Country Due To Multi Factor Authentication]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	9,39 * * * *
description = This alert will show the login failure outside home country due to multi factor authentication. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed (LogonError="DeviceAuthenticationRequired" OR LogonError="UserStrongAuthClientAuthNRequiredInterrupt") \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, max(_time) as Last_Failed_Login, values(LogonError) as LogonError, values(ExtendedProperties) as ExtendedProperties by user, ClientIP \
| iplocation ClientIP \
| where Country!=`cs_home_country` \
| `cs_confirmiplocation` \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, max(Last_Failed_Login) as Last_Failed_Login, list(Location) as Location, values(LogonError) as LogonError, values(ExtendedProperties) as ExtendedProperties by user \
| sort - count \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_mfs_outside_country_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Login Failure Outside Home Country Due To Multi Factor Authentication

[O365 - Login From Unknown User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	9,39 * * * *
description = This alert will show the Login from unknown user. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoggedIn UserId=Unknown \
| stats count, max(_time) as Last_Success_Login by ClientIP \
| iplocation ClientIP \
| sort - count \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_o365_login_by_unknown_userid_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Login From Unknown User

[O365 - Successful Login Outside Home Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	9,39 * * * *
description = This alert will show the successful login outside home country. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2h@h
dispatch.latest_time = +2h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-31m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoggedIn NOT LogonError=* \
| stats count, max(_time) as Last_Success_Login by user, ClientIP \
| iplocation ClientIP \
| where Country!=`cs_home_country` \
| `cs_confirmiplocation` \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, max(Last_Success_Login) as Last_Success_Login, list(Location) as Location by user \
| sort - count \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_o365_success_login_outside_country_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Successful Login Outside Home Country

[O365 - Authentication Blocked By Conditional Access Policy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	29 * * * *
description = This alert will show the authentication blocked by conditional access policy. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=AzureActiveDirectory Operation=UserLoginFailed LogonError="BlockedByConditionalAccess" \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, max(_time) as Last_Failed_Login, values(ExtendedProperties) as ExtendedProperties by user, ClientIP \
| iplocation ClientIP \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, max(Last_Failed_Login) as Last_Failed_Login, list(Location) as Location, values(ExtendedProperties) as ExtendedProperties by user \
| sort - count \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_failed_login_due_to_conditional_access_policy_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Authentication Blocked By Conditional Access Policy

[O365 - Daily Login Failure]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	0 1 * * *
description = This alert will show the daily Login failure. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -2d@h
dispatch.latest_time = +2d@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-25h@m _index_latest=-1h@m Workload=AzureActiveDirectory Operation=UserLoginFailed \
| eval ExtendedProperties=mvzip('ExtendedProperties{}.Name','ExtendedProperties{}.Value'," : ") \
| stats count, max(_time) as Last_Failed_Login, values(LogonError) as LogonError, values(ExtendedProperties) as ExtendedProperties by user, ClientIP \
| iplocation ClientIP \
| fillnull Country, Region, City value="-" \
| eval Location=ClientIP." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, max(Last_Failed_Login) as Last_Failed_Login, list(Location) as Location, values(LogonError) as LogonError, values(ExtendedProperties) as ExtendedProperties by user \
| sort - count \
| `cs_human_readable_time_format(Last_Failed_Login)` \
| `cs_o365_daily_login_failure_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Daily Login Failure

[O365 - Security Compliance Alert]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	29 * * * *
description = This alert will show Security compliance alert. \
\
Data Collection - Office 365 management activity data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -4h@h
dispatch.latest_time = +4h@h
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="o365:management:activity" _index_earliest=-61m@m _index_latest=-1m@m Workload=SecurityComplianceCenter Operation=AlertTriggered \
| dedup AlertId \
| spath input=Data \
| table _time Name Severity AlertType Category f3u lon wl ad \
| `cs_o365_security_compliance_alert_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = O365
action.summary_index.alert_name = O365 - Security Compliance Alert


# ======================
# Email
# ======================
[Email - Hourly Increase In Emails Over Baseline]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	29 * * * *
description = This alert will show the hourly increase in emails over baseline. \
\
Data Collection - Office 365 reporting messagetrace data (Splunk Add-on for Office 365). 
dispatch.earliest_time = -85m@s
dispatch.latest_time = -25m@s
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="ms:o365:reporting:messagetrace" \
| stats count, values(Subject) as Subject by SenderAddress \
| join type=inner SenderAddress \
    [ search `cs_o365` sourcetype="ms:o365:reporting:messagetrace" earliest=-7d \
    | bin span=1h _time \
    | stats count as 7daycount by SenderAddress, _time \
    | stats avg(7daycount) as average_emails_per_7days by SenderAddress \
    | eval average_emails_per_7days=round(average_emails_per_7days,2) ] \
| eval PercentIncrease = (count - average_emails_per_7days) / count * 100 \
| where count > average_emails_per_7days AND PercentIncrease > `cs_email_increase_over_baseline_limit_in_percentage` AND count > 10 \
| sort - PercentIncrease \
| `cs_email_increase_in_email_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Email
action.summary_index.alert_name = Email - Hourly Increase In Emails Over Baseline

[Email - Daily Spam Email]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule =	0 1 * * *
description = This alert will show the daily spam email. \
\
Data Collection - Office 365 reporting messagetrace data (Splunk Add-on for Office 365).
dispatch.earliest_time = -25h@m
dispatch.latest_time = -1h@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365` sourcetype="ms:o365:reporting:messagetrace" Status=FilteredAsSpam \
| stats count, values(RecipientAddress) as RecipientAddress by SenderAddress, Subject \
| sort - count \
| `cs_email_daily_spam_email_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Email
action.summary_index.alert_name = Email - Daily Spam Email


# ======================
# Credential Compromise
# ======================
[Credential Compromise - Windows - Credential Dumping through LSASS Access]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert points out credential dumping on Windows with LSASS Access. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=10
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sysmon` EventCode=10 TargetImage=*lsass.exe (GrantedAccess=0x1010 OR GrantedAccess=0x1410) \
| stats count min(_time) as firstTime max(_time) as lastTime by Computer, SourceImage, SourceProcessId, TargetImage, TargetProcessId, EventCode, GrantedAccess \
| rename Computer as dest | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| `cs_detect_credential_dumping_through_lsass_access_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Credential Compromise
action.summary_index.alert_name = Credential Compromise - Windows - Credential Dumping through LSASS Access


[Credential Compromise - Windows - Credential Dumping via Symlink to Shadow Copy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert identifies credential dumping on Windows via symlink to the shadow copy. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=cmd.exe Processes.process=*mklink* Processes.process=*HarddiskVolumeShadowCopy* by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id \
| `drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| `cs_credential_dumping_via_symlink_to_shadow_copy_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Credential Compromise
action.summary_index.alert_name = Credential Compromise - Windows - Credential Dumping via Symlink to Shadow Copy


[Credential Compromise - Windows - Credential Dumping via Copy Command from Shadow Copy]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 9,39 * * * *
description = This alert recognizes credential dumping via copy command from a shadow copy. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=cmd.exe (Processes.process=*\\system32\\config\\sam* OR Processes.process=*\\system32\\config\\security* OR Processes.process=*\\system32\\config\\system* OR Processes.process=*\\windows\\ntds\\ntds.dit*) by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id \
| `drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| `cs_credential_dumping_via_copy_command_from_shadow_copy_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Credential Compromise
action.summary_index.alert_name = Credential Compromise - Windows - Credential Dumping via Copy Command from Shadow Copy


[Credential Compromise - Windows - Credential Dump From Registry via Reg exe]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert identifies credential dumping from registry via reg exe. \
\
Data Collection - TA-microsoft-sysmon - WinEventLog://Microsoft-Windows-Sysmon/Operational stanza - EventCode=1 (Process creation information)
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_endpoint` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=reg.exe OR Processes.process_name=cmd.exe) Processes.process=*save* (Processes.process=*HKEY_LOCAL_MACHINE\\Security* OR Processes.process=*HKEY_LOCAL_MACHINE\\SAM* OR Processes.process=*HKEY_LOCAL_MACHINE\\System* OR Processes.process=*HKLM\\Security* OR Processes.process=*HKLM\\System* OR Processes.process=*HKLM\\SAM*) by Processes.user Processes.process_name Processes.process Processes.dest \
| `drop_dm_object_name(Processes)` | `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` \
| `cs_attempted_credential_dump_from_registry_via_reg_exe_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Credential Compromise
action.summary_index.alert_name = Credential Compromise - Windows - Credential Dump From Registry via Reg exe



# ======================
# Sophos Central
# ======================
[Sophos - Endpoint Not Protected by Sophos]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alert will trigger when a Sophos endpoint is unprotected. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/)
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::NotProtected" \
| stats count, latest(_time) as _time, values(src_ip) as src_ip, values(suser) as user by host, dhost | sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_endpoint_not_protected_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Sophos
action.summary_index.alert_name = Sophos - Endpoint Not Protected by Sophos


[Sophos - Sophos RealTime Protection Disabled]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert will trigger when RealTime Protection is disabled on a Sophos endpoint. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/) \
\
A false positive may appear when an administrator might have intentionally disabled RealTime Protection for Sophos. 
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::SavDisabled" \
| stats count, latest(_time) as _time, values(src_ip) as src_ip, values(suser) as user by host, dhost | sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_realtime_protection_disabled_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Sophos
action.summary_index.alert_name = Sophos - Sophos RealTime Protection Disabled


[Sophos - Sophos Service is not Running]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alet will trigger when a Sophos endpoint service is no longer running. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/) \
\
A false positive may appear when an administrator might have manually stopped Sophos on an endpoint.
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type="Event::Endpoint::ServiceNotRunning" \
| stats count, latest(_time) as _time, values(src_ip) as src_ip, values(suser) as user by host, dhost | sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_service_not_running_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Sophos
action.summary_index.alert_name = Sophos - Sophos Service is not Running


[Sophos - Failed to clean up threat by Sophos]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert will trigger when a Sophos endpoint fails to clean-up a known threat. \
\
Data Collection - Sophos Central SIEM Integration Add-on (https://splunkbase.splunk.com/app/4647/)
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_sophos` type IN ("Event::Endpoint::Threat::CleanupFailed", "Event::Endpoint::CoreCleanFailed", "Event::Endpoint::CoreHmpaCleanFailed", "Event::Endpoint::CoreSystemCleanFailed") \
| stats count, latest(_time) as _time, values(name) as threat, values(src_ip) as src_ip, values(suser) as user by host, dhost | sort -count \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_sophos_failed_to_cleanup_threat_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Sophos
action.summary_index.alert_name = Sophos - Failed to clean up threat by Sophos



# ======================
# Windows Defender
# ======================
[Windows Defender - Endpoint Not Protected by Windows Defender]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 7,22,37,52 * * * *
description = This alert notifies users when a Windows Defender endpoint is unprotected. \
\
Data Collection - Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/) - WinEventLog://Microsoft-Windows-Windows Defender/Operational stanza
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode IN (2042, 5008, 5012) | dedup host \
| eval EventCodeDescription=case(EventCode=2042, "The antimalware engine no longer supports this operating system, and is no longer protecting your system from malware.", EventCode=5012, "Scanning for viruses is disabled.", EventCode=5008, "The antimalware engine encountered an error and failed.") \
| table _time, host, EventCode, EventCodeDescription \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_windows_defender_endpoint_not_protected`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows Defender
action.summary_index.alert_name = Windows Defender - Endpoint Not Protected by Windows Defender


[Windows Defender - Windows Defender RealTime Protection Disabled or Failed]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = This alert notifies users when Windows Defender RealTime Protection has failed or been disabled. \
\
Data Collection - Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/) - WinEventLog://Microsoft-Windows-Windows Defender/Operational stanza
dispatch.earliest_time = -65m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_wineventlog_system` EventCode=3002 OR EventCode=3007 OR EventCode=5001 OR EventCode=5000 \
| stats latest(EventCode) as latest_EventCode latest(eval(if(EventCode==3002 OR EventCode==5001,_time,null()))) as failed_time latest(eval(if(EventCode==3007 OR EventCode==5000,_time,null()))) as success_time latest(eval(if(EventCode==3002 OR EventCode==5001,EventCode,null()))) as failed_EventCode latest(eval(if(EventCode==3007 OR EventCode==5000,EventCode,null()))) as success_EventCode  by host \
| `cs_human_readable_time_format(failed_time)` \
| `cs_human_readable_time_format(success_time)` \
| `cs_windows_defender_realtime_protection_disabled_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Windows Defender
action.summary_index.alert_name = Windows Defender - Windows Defender RealTime Protection Disabled or Failed



# ======================
# Office365 Defender ATP
# ======================
[Defender ATP - Defender ATP Alerts]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = This alert notifies users when there is alert from Microsoft Office 365 Defender ATP. \
\
Data Collection - Microsoft 365 Defender Add-on for Splunk (https://splunkbase.splunk.com/app/4959)
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_o365_defender_atp_alerts`\
| stats count, earliest(_time) as firstTime, latest(_time) as lastTime, last(lastUpdateTime) as lastUpdateTime, last(resolvedTime) as resolvedTime, last(severity) as severity, last(status) as status, last(threatFamilyName) as threatFamilyName, last(threatName) as threatName, last(title) as title, last(investigationState) as investigationState, last(detectionSource) as detectionSource, last(assignedTo) as assignedTo, last(category) as category, last(classification) as classification, last(description) as description, last(incidentId) as incidentId, last(investigationId) as investigationId by detectorId, id, machineId, computerDnsName\
| eval lastUpdateTime=strptime(lastUpdateTime, "%FT%T.%7QZ"), resolvedTime=strptime(resolvedTime, "%FT%T.%7QZ")\
| `cs_human_readable_time_format(firstTime)` | `cs_human_readable_time_format(lastTime)` | `cs_human_readable_time_format(lastUpdateTime)` | `cs_human_readable_time_format(resolvedTime)`\
| table computerDnsName, count, firstTime, lastTime, lastUpdateTime, resolvedTime, incidentId, title, threatFamilyName, threatName, category, classification, severity, status, investigationId, invenstigationState, assignedTo, detectionSource, detectorId, id, machineId\
| `cs_o365_defender_atp_alerts_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Defender ATP
action.summary_index.alert_name = Defender ATP - Defender ATP Alerts



# ======================
# CrowdStrike
# ======================
[CrowdStrike - Suspicious Activity or Malware Detected by CrowdStrike]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 2,17,32,47 * * * *
description = This alert notifies users when CrowdStrike detects a suspicios activity or malware. \
\
Data Collection - CrowdStrike Event Stream Add-on (https://splunkbase.splunk.com/app/5082/)
dispatch.earliest_time = -17m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_crowdstrike_eventstream` "metadata.eventType"=DetectionSummaryEvent action="allowed" \
| table _time, event.ComputerName, event.LocalIP, event.UserName, event.DetectDescription, event.DetectName, event.CommandLine, event.MD5String, event.SHA256String, event.ProcessId, event.PatternDispositionDescription, event.ParentCommandLine, event.Objective, event.DetectId, event.FalconHostLink, event.SeverityName, event.Tactic, event.Technique, event.ProcessStartTime, event.ProcessEndTime \
| rename event.* as * | `cs_human_readable_time_format(ProcessStartTime)` | `cs_human_readable_time_format(ProcessEndTime)` \
| `cs_human_readable_time_format(_time, event_time)` \
| `cs_crowdstrike_malware_detected_alert_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = CrowdStrike
action.summary_index.alert_name = CrowdStrike - Suspicious Activity or Malware Detected by CrowdStrike



# =======================
# Device Inventory
# =======================
# Reports
[Device Inventory - Lansweeper]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 * * * *
description = This report update the device inventory every hour and generates lookup for lansweeper data. \
\
Data Collection - The lansweeper data needs to be collected via the Lansweeper Add-On for Splunk(https://splunkbase.splunk.com/app/5418/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
# This time-range does not apply in the search as it is given as part of search-query
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_lansweeper` `cs_lansweeper_timerange` | eval lansweeper_id=coalesce(AssetID,id) | dedup lansweeper_id \
| eval fqdn=coalesce('assetBasicInfo.fqdn',FQDN) | eval hostname=lower(mvjoin(mvdedup(mvappend(AssetName, fqdn)),"~~")), ip=lower(IPAddress), mac_address=lower(Mac) \
| rename _time as time, host as lansweeper_collected_by, site_name as Site, AssetTypename as AssetType, Statename as lansweeper_state, Userdomain as Domain, AssetGroup as GroupName, OScode as OSVersion, Username as lansweeper_user, BuildNumber as BuildNumber, version as AssetVersion, OS as lansweeper_os, fqdn as lansweeper_fqdn \
| table time, lansweeper_collected_by, hostname, ip, mac_address, lansweeper_id, Site, AssetType, lansweeper_state, Domain, GroupName, OSVersion, BuildNumber, AssetVersion, lansweeper_user, lansweeper_os, Description, IPLocation, lansweeper_fqdn \
| eval _key=lansweeper_id | outputlookup cs_lansweeper_inventory \
| `cs_device_inventory_out_to_temp_lookup`
# Note - We are not appending previous lookup in case of Lansweeper as Lansweeper Add-on always fetch full asset list.


[Device Inventory - Tenable]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 2 * * * *
description = This report update the device inventory every hour and generates lookup for tenable data. \
\
Data Collection - The tenable data (asset summaries) needs to be collected via the Tenable Add-On for Splunk(https://splunkbase.splunk.com/app/4060/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_tenable_assets` | dedup tenable_uuid \
| eval ip=mvdedup(mvappend(ip, ipv4s, ipv6s)), ip=lower(mvjoin(ip, "~~")) | eval hostname=mvdedup(mvappend(hostnames, fqdns, dnsName)) | eval hostname=lower(mvjoin(hostname, "~~")), mac_address=lower(mvjoin(mvdedup(mvappend(mac_addresses, macAddress)), "~~")) \
| rename host as tenable_collected_by, network_name as tenable_network_name, state as tenable_state \
| eval tenable_fqdn=mvjoin(mvappend(fqdns, dnsName), ", "), tenable_netbios=mvjoin(mvappend(netbios_names, biosGUID), ", "), tenable_os=mvjoin(operating_systems, ", ") \
| table _time, tenable_collected_by, tenable_uuid, ip, hostname, mac_address, tenable_fqdn, tenable_netbios, tenable_os, tenable_state, tenable_network_name, created_at, first_scan_time, first_seen, has_agent, has_plugin_results, last_authenticated_scan_date, last_licensed_scan_date, last_seen \
| append [| inputlookup cs_tenable_inventory | rename time as _time] \
| stats latest(_time) as time, latest(*) as * by tenable_uuid \
| eval _key=tenable_uuid | outputlookup cs_tenable_inventory \
| `cs_device_inventory_out_to_temp_lookup`


[Device Inventory - Tenable Vuln]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 59 * * * *
description = This report generate tenable vulnerabilities lookup. \
\
Data Collection - The tenable data are necessary to collect the vulnerability scan results and host summaries via the Tenable Add-On for Splunk(https://splunkbase.splunk.com/app/4060/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_tenable_vuln` | dedup tenable_uuid, vul_id \
| table _time, tenable_uuid, vul_id, vul_name, vul_description, vul_severity, vul_severity_id, vul_state, last_fixed, last_found, vul_cve, vul_solution, vul_cpe, vul_family, vul_has_patch, vul_in_the_news, vul_risk_factor, vul_synopsis, vul_type, vul_version, vul_protocol, vul_port \
| append [| inputlookup cs_tenable_vuln] \
| dedup tenable_uuid, vul_id sortby -_time \
| outputlookup cs_tenable_vuln


[Device Inventory - Qualys]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 4 * * * *
description = This report update the device inventory every hour and generates lookup for qualys data. \
\
Data Collection - The qualys data (host summaries) needs to be collected via the Qualys Technology Add-on (TA) for Splunk(https://splunkbase.splunk.com/app/2964/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_qualys_hostsummary` | dedup HOST_ID \
| eval mac_address="" | eval hostname=lower(DNS) | eval IP=lower(IP) | fillnull hostname value="" \
| rename HOST_ID as qualys_id, host as qualys_collected_by, IP as ip, OS as QUALYS_OS, DNS as qualys_dns \
| table _time, qualys_collected_by qualys_id, ip, hostname, mac_address, qualys_dns, QUALYS_OS, NETWORK_ID, TRACKING_METHOD, ACTIVE*, CONFIRMED*, FIXED*, INFO*, LAST_*, NEW*, POTENTIAL*, RE_OPENED*, SEVERITY_*, TOTAL_VULNS \
| append [| inputlookup cs_qualys_inventory | rename time as _time] \
| stats latest(_time) as time, latest(*) as * by qualys_id \
| eval _key=qualys_id | outputlookup cs_qualys_inventory \
| `cs_device_inventory_out_to_temp_lookup`


[Device Inventory - Sophos]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 6 * * * *
description = This report update the device inventory every hour and generates lookup for sophos data. \
\
Data Collection - The sophos data are collected via custom command available withing the App via REST API call to Sophos Central. (See Sophos documentation for more information.)
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | sophosinstancedetails all_endpoints=True | extract \
| rename id as sophos_uuid, "tenant.id" as sophos_customer_id, type as sophos_type, "health.overall" as sophos_health, "health.threats.status" as sophos_threats_status, "health.services.status" as sophos_services_status, "lockdown.status" as sophos_lockdown_status, "lockdown.updateStatus" as sophos_lockdown_update_status, "associatedPerson.name" as sophos_user, "associatedPerson.viaLogin" as sophos_login_via, "os.name" as sophos_os | fillnull "os.build", "os.isServer", "os.majorVersion", "os.minorVersion", "os.platform" value="-" | eval sophos_os_details = mvappend("Platform:".'os.platform', "Build No.: ".'os.build', "ServerOS:".'os.isServer', "OS MajorVersion:".'os.majorVersion', "OS MinorVersion:".'os.minorVersion') \
| eval service_status=mvzip('health.services.serviceDetails{}.name', 'health.services.serviceDetails{}.status') \
| eval sophos_product_installed=mvzip('assignedProducts{}.code', mvzip('assignedProducts{}.status', 'assignedProducts{}.version')) \
| eval time=strptime(lastSeenAt, "%FT%T.%3QZ"), ip=lower(mvjoin(mvdedup(mvappend('ipv4Addresses{}','ipv6Addresses{}')),"~~")), hostname=lower(hostname), mac_address=lower(mvjoin('macAddresses{}',"~~")) \
| table time, sophos_customer_id, sophos_uuid, ip, hostname, mac_address, sophos_os, sophos_os_details, sophos_user, sophos_login_via, tamperProtectionEnabled, service_status, sophos_product_installed, sophos_health, sophos_services_status, sophos_threats_status, sophos_lockdown_status, sophos_lockdown_update_status, sophos_type \
| eval _key=sophos_uuid | outputlookup cs_sophos_inventory \
| `cs_device_inventory_out_to_temp_lookup`
# Note - We are not appending previous lookup in case of Sophos as custom command for Sophos data fetch always fetch complete asset list.


[Device Inventory - Windows Defender]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 8 * * * *
description = This report update the device inventory every hour and generates lookup for windows defender data. \
\
Data Collection - The windows defender data needs to be collected via the Windows Defender Add-on (https://splunkbase.splunk.com/app/3734/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_windows_defender` EventCode=1151 | `cs_windows_defender_inventory_fill_search`


[Device Inventory - CrowdStrike]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 10 * * * *
description = This report update the device inventory every hour and generates lookup for crowdstrike data. \
\
Data Collection - The crowdstrike data needs to be collected via the CrowdStrike Event Stream Add-on (https://splunkbase.splunk.com/app/5082/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_crowdstrike_eventstream` | eval crowdstrike_userid=coalesce('event.UserId', 'event.UserName', user) | dedup crowdstrike_userid \
| eval ip=lower(coalesce('event.UserIp', 'event.LocalIP', src)), hostname=lower(coalesce('event.ComputerName', 'event.HostnameField')) \
| rename host as crowdstrike_collected_by, "metadata.customerIDString" as crowdstrike_customer_id, "event.MACAddress" as mac_address \
| fillnull ip, hostname, mac_address value="" \
| table _time, crowdstrike_collected_by, crowdstrike_customer_id, ip, hostname, mac_address, crowdstrike_userid \
| append [| inputlookup cs_crowdstrike_inventory | rename time as _time] \
| stats latest(_time) as time, latest(*) as * by crowdstrike_userid \
| eval _key=crowdstrike_userid | outputlookup cs_crowdstrike_inventory \
| `cs_device_inventory_out_to_temp_lookup`

[Device Inventory - Kaspersky]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 10 * * * *
description = This report update the device inventory every hour and generates lookup for Kaspersky data. \
\
Data Collection - The Kaspersky data needs to be collected via the Kaspersky Add-on for Splunk (https://splunkbase.splunk.com/app/4656/#/details).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_kaspersky` ProductName=KES*  \
| rename dst as ip , dest as hostname,  ProductName as kaspersky_collected_by , ProductVersion as kaspersky_version, macaddress as mac_address  \
| eval hostname=lower(hostname) \
| table _time  ip, hostname, kaspersky_collected_by, kaspersky_version   \
| fillnull ip,hostname,mac_address value=""  \
| stats latest(_time) as _time latest(*) as * by hostname \
| join type=left [| search `cs_kaspersky`  log_type=KLSRV_HOST_STATUS_CRITICAL "Protection is disabled" \
    | rex field=_raw "Status of device \'(?<critical_device>[^\']*)" \
    | stats latest(_time) as time  by critical_device \
    | rename critical_device as hostname \
    |  eval hostname=lower(hostname) ]  \
| eval kaspersky_status=if(_time<time AND isnotnull(time),"Disabled","Present")  | fields - time \
| append [|inputlookup cs_kaspersky_inventory| rename _time as time ] \
| stats latest(*) as * latest(_time) as time by hostname \
| eval _key=hostname \
| eval kaspersky_host=hostname \
| outputlookup cs_kaspersky_inventory \
| `cs_device_inventory_out_to_temp_lookup`


[Device Inventory Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 20 * * * *
description = This report update the device inventory every hour and generates device inventory lookup from device inventory temp lookup. \
\
Data Collection - This report depends on different sub-reports like: Device Inventory - Lansweeper, Tenable, Qualys, Sophos, Windows Defender, CrowdStrike.
dispatch.earliest_time = -61m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_device_inventory_temp \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| deviceinventorygen


# Backfill
[Device Inventory Backfill]
disabled = 0
enableSched = 0
alert.track = 0
run_on_startup = true
description = This report backfills the all device inventory lookups. (Default timerange: last 30 days). \
The report executes on Splunk start to make sure we do not miss data as well as this make sure user do not have make manually tasks.
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | savedsearch "Device Inventory - Tenable Vuln" \
| append [| savedsearch "Device Inventory - Lansweeper"] \
| append [| savedsearch "Device Inventory - Tenable"] \
| append [| savedsearch "Device Inventory - Qualys"] \
| append [| savedsearch "Device Inventory - Sophos"] \
| append [| search `cs_windows_defender` EventCode=1151 `cs_windows_defender_max_timerange` | `cs_windows_defender_inventory_fill_search`] \
| append [| savedsearch "Device Inventory - CrowdStrike"] \
| append [| savedsearch "Device Inventory - Kaspersky"] \
| appendpipe [| where SEARCHNOTHING="SEARCHNOTHING" | append [| savedsearch "Device Inventory Gen"]]


# CleanUp
[Device Inventory Temp Lookup CleanUp]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 4 * * *
description = This report cleans up temp device inventory lookup.
dispatch.earliest_time = -7d@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_device_inventory_temp \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_device_inventory_temp


[Device Inventory Lookup CleanUp]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 5 * * 0
description = This report cleans up device inventory lookup every week (sunday early morning) and removes the devices from the inventories which did not showup in last 60 days.
dispatch.earliest_time = -60d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | inputlookup cs_device_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_device_inventory | where SEARCHNOTHING="SEARCHNOTHING" \
| append [| inputlookup cs_device_inventory_merge_logs.csv \
| addinfo | where indextime>=info_min_time and indextime<=info_max_time \
| outputlookup cs_device_inventory_merge_logs.csv | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_tenable_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_tenable_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_qualys_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_qualys_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_windows_defender_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_windows_defender_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_crowdstrike_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_crowdstrike_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| append [| inputlookup cs_kaspersky_inventory \
| addinfo | where time>=info_min_time and time<=info_max_time \
| outputlookup cs_kaspersky_inventory | where SEARCHNOTHING="SEARCHNOTHING"] \
| appendpipe [| inputlookup cs_tenable_vuln \
| join tenable_uuid [| inputlookup cs_device_inventory | search tenable_uuid=* | mvexpand tenable_uuid | fields tenable_uuid, uuid | table tenable_uuid, uuid] \
| search uuid=* | fields - uuid \
| outputlookup cs_tenable_vuln | where SEARCHNOTHING="SEARCHNOTHING"]
# Note - Sophos and Lansweeper Cleanup are not required as those lookups are always overridden completely.



# ===============
# Authentication
# ===============
[Authentication - Bruteforce Attempt for a User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A bruteforce attempt (more than 100 failures in an hour) for a perticular username. \
\
Data Collection - Any authentication data mapped with Authentication data model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.signature) as signature, values(Authentication.src) as src, values(Authentication.dest) as dest from datamodel=Authentication where `cs_authentication_indexes` Authentication.app!=OktaIM2:log Authentication.action="failure" `cs_authentication_app_filter` by Authentication.app, Authentication.user \
| where count > `cs_authentication_bruteforce_attempt_limit` \
| `drop_dm_object_name(Authentication)` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval sources=mvjoin(src, ", ") | fields - src \
| `cs_authentication_bruteforce_attempt_for_user_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Authentication
action.summary_index.alert_name = Authentication - Bruteforce Attempt for a User


[Authentication - Bruteforce Attempt from a Source]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 29 * * * *
description = A bruteforce attempt (more than 100 failures in an hour) from a perticular source. \
\
Data Collection - Any authentication data mapped with Authentication data model.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.signature) as signature, values(Authentication.user) as user, values(Authentication.dest) as dest from datamodel=Authentication where `cs_authentication_indexes` Authentication.app!=OktaIM2:log Authentication.action="failure" `cs_authentication_app_filter` by Authentication.app, Authentication.src \
| where count > `cs_authentication_bruteforce_attempt_limit` \
| `drop_dm_object_name(Authentication)` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval users=mvjoin(user, ", ") | fields - user \
| `cs_authentication_bruteforce_attempt_from_source_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Authentication
action.summary_index.alert_name = Authentication - Bruteforce Attempt from a Source


[Authentication - Excessive Failed VPN Logins for a User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A excessive login failures (more than 20 failures in an hour) for VPN for a perticular username. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.src) as src, values(Authentication.dest) as dest from datamodel=Authentication where Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` AND Authentication.action="failure" by index, Authentication.app, Authentication.user \
| where count > `cs_authentication_excessive_vpn_login_failure_limit` \
| `drop_dm_object_name(Authentication)` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval sources=mvjoin(src, ", ") | fields - src \
| `cs_authentication_excessive_vpn_login_failure_for_user_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Authentication
action.summary_index.alert_name = Authentication - Excessive Failed VPN Logins for a User


[Authentication - Excessive Failed VPN Logins from a Source]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A excessive login failures (more than 20 failures in an hour) for VPN from a perticular source. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, min(_time) as firstTime, max(_time) as lastTime, values(Authentication.user) as user, values(Authentication.dest) as dest from datamodel=Authentication where Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` AND Authentication.action="failure" by index, Authentication.app, Authentication.src \
| where count > `cs_authentication_excessive_vpn_login_failure_limit` \
| `drop_dm_object_name(Authentication)` \
| `cs_human_readable_time_format(firstTime)` \
| `cs_human_readable_time_format(lastTime)` \
| eval reasons=mvjoin(signature, ", ") | fields - signature | eval users=mvjoin(user, ", ") | fields - user \
| `cs_authentication_excessive_vpn_login_failure_from_source_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Authentication
action.summary_index.alert_name = Authentication - Excessive Failed VPN Logins from a Source

[Authentication - Successful VPN Login Outside Home Country]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 59 * * * *
description = A Successful login outside home country for VPN from a perticular source. \
\
Data Collection - VPN data mapped with authentication data-model and has dest_category=vpn_auth.
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = | tstats `cs_summariesonly_authentication` count, max(_time) as Last_Success_Login from datamodel=Authentication where Authentication.action="success" AND Authentication.dest_category="vpn_auth" AND `cs_vpn_indexes` by Authentication.user, Authentication.src \
| rename Authentication.* as * \
| iplocation src \
| where Country!=`cs_home_country` \
| `cs_confirmiplocation` \
| fillnull Country, Region, City value="-" \
| eval Location=src." (".count.") | ".Country." | ".Region." | ".City \
| stats sum(count) as count, max(Last_Success_Login) as Last_Success_Login, list(Location) as Location by user \
| sort - count \
| `cs_human_readable_time_format(Last_Success_Login)` \
| `cs_authentication_successful_vpn_login_outside_home_country_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Authentication
action.summary_index.alert_name = Authentication - Successful VPN Login Outside Home Country


# ===============
# Linux/Unix
# ===============
[Linux - Change in Sudo Access of Local Linux Account]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 3
alert.suppress = 0
cron_schedule = 59 * * * *
counttype = number of events
quantity = 0
relation = greater than
description = This report generate lookup of linux local accounts and raise an alert when there is change in sudo access for last 60mins.\
\
Data Collection : Below two scripted inputs must be enable. \
                  Splunk_TA_nix Add-on -> usersWithLoginPrivs.sh \
                  Cyences add-on for Splunk -> sudousers.sh
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_linux_users_with_previledge` \
| table _time host UID USERNAME GID HOME_DIR \
| eval user_discovery=_time \
| stats earliest(_time) as _time latest(*) as * by host UID \
| append \
    [| search `cs_linux_sudousers` \
    | stats latest(_raw) as raw latest(_time) as sudo_discover by host \
    | rex field=raw "sudouser=(?<USERNAME>.*)" max_match=0 \
    | fields - raw \
    | mvexpand USERNAME \
    | eval sudo_access="Yes" ] \
| stats first(sudo*) as sudo*_new first(user_discovery) as user_discovery_new first(*) as * by host, USERNAME \
| appendpipe \
    [| inputlookup cs_linux_user_list.csv \
    | rename sudo_last_modified as sudo_discover,user_last_modified as user_discovery ] \
| join host type=left \
    [| tstats count where index=_internal host=*  earliest=-5m@m latest=now  by host \
    | eval internal_logs="Yes" ] \
| stats first(*) as * by host USERNAME \
| eval sudo_last_modified=case(isnull(internal_logs),sudo_discover,\
    isnull(user_discovery_new) and isnull(sudo_access),null(),\
    isnull(user_discovery_new) and isnotnull(sudo_access),now(),\
    isnull(sudo_access_new) and isnull(sudo_access),null(),\
    isnotnull(sudo_access_new) and isnull(sudo_access),sudo_discover_new,\
    isnotnull(sudo_access_new) and isnotnull(sudo_access) and sudo_access=="Yes",sudo_discover,\
    isnotnull(sudo_access_new) and isnotnull(sudo_access) and (sudo_access=="Sudo Access Revoked" OR sudo_access=="User Removed"),sudo_discover_new,\
    isnull(sudo_access_new) and isnotnull(sudo_access) and sudo_access=="Yes",now(),\
    isnull(sudo_access_new) and isnotnull(sudo_access) and (sudo_access=="Sudo Access Revoked" OR sudo_access=="User Removed"),sudo_discover) \
| eval sudo_access=case(isnull(internal_logs),sudo_access,\
    isnull(user_discovery_new) and isnull(sudo_access),null(),\
    isnull(user_discovery_new) and isnotnull(sudo_access),"User Removed",\
    isnull(sudo_access_new) and isnull(sudo_access),null(),\
    isnotnull(sudo_access_new) and isnull(sudo_access),"Yes",\
    isnotnull(sudo_access_new) and isnotnull(sudo_access) and sudo_access=="Yes",sudo_access,\
    isnotnull(sudo_access_new) and isnotnull(sudo_access) and (sudo_access=="Sudo Access Revoked" OR sudo_access=="User Removed"),"Yes",\
    isnull(sudo_access_new) and isnotnull(sudo_access) and sudo_access=="Yes","Sudo Access Revoked",\
    isnull(sudo_access_new) and isnotnull(sudo_access) and (sudo_access=="Sudo Access Revoked" OR sudo_access=="User Removed"),sudo_access) \
| eval user_status=case(isnull(internal_logs),user_status,\
    isnull(user_discovery_new) and isnull(user_discovery), null(),\
    isnotnull(user_discovery_new) and isnull(user_discovery), "User Available",\
    isnotnull(user_discovery_new) and isnotnull(user_discovery), "User Available",\
    isnull(user_discovery_new) and isnotnull(user_discovery), "User Removed") \
| eval user_last_modified=case(isnull(internal_logs),user_discovery,\
    isnull(user_discovery_new) and isnull(user_discovery), null(),\
    isnotnull(user_discovery_new) and isnull(user_discovery), user_discovery_new,\
    isnotnull(user_discovery_new) and isnotnull(user_discovery),user_discovery,\
    isnull(user_discovery_new) and isnotnull(user_discovery), now()) \
| fields - user_discovery*,sudo_discover*,sudo_access_new,internal_logs,count,sudo_last_modified_check, \
| appendpipe \
    [| outputlookup cs_linux_user_list.csv \
    | where hostname="DO-NOT-RETURN-ANYRESULTS"] \
| where sudo_last_modified>relative_time(now(),"-62m") \
| `cs_human_readable_time_format(sudo_last_modified)` \
| `cs_human_readable_time_format(user_last_modified)`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Linux
action.summary_index.alert_name = Linux - Change in Sudo Access of Local Linux Account


# ===============
# AWS
# ===============
# Reports
[AWS - AWS Account Lookup Gen]
disabled = 0
enableSched = 1
alert.track = 0
cron_schedule = 0 * * * *
description = This report is generating lookup containing AWS account info \
\
Data Collection - The AWS data needs to be collected via the Splunk Add-On for AWS (https://splunkbase.splunk.com/app/1876/).
dispatch.earliest_time = -62m@m
dispatch.latest_time = -2m@m
# This time-range does not apply in the search as it is given as part of search-query
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_aws_account_summary`| dedup name, account_id | table name, account_id | inputlookup cs_all_aws_account_ids.csv append=true | dedup name, account_id | outputlookup cs_all_aws_account_ids.csv


# ===============
# Cisco IOS
# ===============
[Cisco IOS - New Connection For User]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert will show the new connection to Cisco IOS device. \
\
Data Collection - Cisco IOS data (cisco:ios sourcetype).
dispatch.earliest_time = -35m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-I-CONNECT" \
| rex "CONNECT:\s(?<message>.*)" \
| table _time message \
| `cs_cisco_ios_new_connection_for_user_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Cisco IOS
action.summary_index.alert_name = Cisco IOS - New Connection For User

[Cisco IOS - Device Failed Login]
disabled = 1
enableSched = 1
alert.track = 1
alert.severity = 4
alert.suppress = 0
counttype = number of events
quantity = 0
relation = greater than
cron_schedule = 19,49 * * * *
description = This alert will show the failed login to Cisco IOS device. \
\
Data Collection - Cisco IOS data (cisco:ios sourcetype).
dispatch.earliest_time = -35m@m
dispatch.latest_time = -5m@m
display.general.type = statistics
display.page.search.tab = statistics
display.page.search.mode = fast
request.ui_dispatch_app = cyences_app_for_splunk
request.ui_dispatch_view = search
search = `cs_cisco_ios` sourcetype=cisco:ios "%AAA-W-REJECT" \
| rex "REJECT:\s(?<message>.*)" \
| table _time message \
| `cs_cisco_ios_device_failed_login_filter`
action.summary_index = 1
action.summary_index._name = cyences
action.summary_index.category = Cisco IOS
action.summary_index.alert_name = Cisco IOS - Device Failed Login
